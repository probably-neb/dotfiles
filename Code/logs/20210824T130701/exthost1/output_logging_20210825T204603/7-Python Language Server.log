INFO:pygls.server:Starting IO server
INFO:pygls.feature_manager:Registered "textDocument/didOpen" with options "None"
INFO:pygls.feature_manager:Registered "textDocument/didChange" with options "None"
INFO:pygls.feature_manager:Registered "textDocument/didSave" with options "None"
INFO:pygls.feature_manager:Registered "textDocument/didClose" with options "None"
INFO:pygls.feature_manager:Registered "textDocument/hover" with options "None"
INFO:pygls.protocol:Language server initialized work_done_token=None process_id=101384 root_uri='file:///home/neb/Dropbox/pie/Music_Organizer' capabilities=ClientCapabilities(workspace=WorkspaceClientCapabilities(apply_edit=True, workspace_edit=WorkspaceEditClientCapabilities(document_changes=True, resource_operations=[<ResourceOperationKind.Create: 'create'>, <ResourceOperationKind.Rename: 'rename'>, <ResourceOperationKind.Delete: 'delete'>], failure_handling=<FailureHandlingKind.TextOnlyTransactional: 'textOnlyTransactional'>, normalizes_line_endings=True, change_annotation_support=ChangeAnnotationSupport(groups_on_label=True)), did_change_configuration=DidChangeConfigurationClientCapabilities(dynamic_registration=True), did_change_watched_files=DidChangeWatchedFilesClientCapabilities(dynamic_registration=True), symbol=WorkspaceSymbolClientCapabilities(dynamic_registration=True, symbol_kind=WorkspaceCapabilitiesSymbolKind(value_set=[<SymbolKind.File: 1>, <SymbolKind.Module: 2>, <SymbolKind.Namespace: 3>, <SymbolKind.Package: 4>, <SymbolKind.Class: 5>, <SymbolKind.Method: 6>, <SymbolKind.Property: 7>, <SymbolKind.Field: 8>, <SymbolKind.Constructor: 9>, <SymbolKind.Enum: 10>, <SymbolKind.Interface: 11>, <SymbolKind.Function: 12>, <SymbolKind.Variable: 13>, <SymbolKind.Constant: 14>, <SymbolKind.String: 15>, <SymbolKind.Number: 16>, <SymbolKind.Boolean: 17>, <SymbolKind.Array: 18>, <SymbolKind.Object: 19>, <SymbolKind.Key: 20>, <SymbolKind.Null: 21>, <SymbolKind.EnumMember: 22>, <SymbolKind.Struct: 23>, <SymbolKind.Event: 24>, <SymbolKind.Operator: 25>, <SymbolKind.TypeParameter: 26>]), tag_support=WorkspaceCapabilitiesTagSupport(value_set=[<SymbolKind.File: 1>])), execute_command=ExecuteCommandClientCapabilities(dynamic_registration=True), workspace_folders=True, configuration=True, semantic_tokens=SemanticTokensWorkspaceClientCapabilities(refresh_support=True), code_lens=CodeLensWorkspaceClientCapabilities(refresh_support=True), file_operations=FileOperationsClientCapabilities(dynamic_registration=True, did_create=True, will_create=True, did_rename=True, will_rename=True, did_delete=True, will_delete=True)), text_document=TextDocumentClientCapabilities(synchronization=TextDocumentSyncClientCapabilities(dynamic_registration=True, will_save=True, will_save_wait_until=True, did_save=True), completion=CompletionClientCapabilities(dynamic_registration=True, completion_item=CompletionItemClientCapabilities(snippet_support=True, commit_characters_support=True, documentation_format=[<MarkupKind.Markdown: 'markdown'>, <MarkupKind.PlainText: 'plaintext'>], deprecated_support=True, preselect_support=True, tag_support=CompletionTagSupportClientCapabilities(value_set=[<CompletionItemTag.Deprecated: 1>]), insert_replace_support=True, resolve_support=ResolveSupportClientCapabilities(properties=['documentation', 'detail', 'additionalTextEdits']), insert_text_mode_support=InsertTextModeSupportClientCapabilities(value_set=[<InsertTextMode.AsIs: 1>, <InsertTextMode.AdjustIndentation: 2>])), completion_item_kind=CompletionItemKindClientCapabilities(value_set=[<CompletionItemKind.Text: 1>, <CompletionItemKind.Method: 2>, <CompletionItemKind.Function: 3>, <CompletionItemKind.Constructor: 4>, <CompletionItemKind.Field: 5>, <CompletionItemKind.Variable: 6>, <CompletionItemKind.Class: 7>, <CompletionItemKind.Interface: 8>, <CompletionItemKind.Module: 9>, <CompletionItemKind.Property: 10>, <CompletionItemKind.Unit: 11>, <CompletionItemKind.Value: 12>, <CompletionItemKind.Enum: 13>, <CompletionItemKind.Keyword: 14>, <CompletionItemKind.Snippet: 15>, <CompletionItemKind.Color: 16>, <CompletionItemKind.File: 17>, <CompletionItemKind.Reference: 18>, <CompletionItemKind.Folder: 19>, <CompletionItemKind.EnumMember: 20>, <CompletionItemKind.Constant: 21>, <CompletionItemKind.Struct: 22>, <CompletionItemKind.Event: 23>, <CompletionItemKind.Operator: 24>, <CompletionItemKind.TypeParameter: 25>]), context_support=True), hover=HoverClientCapabilities(dynamic_registration=True, content_format=[<MarkupKind.Markdown: 'markdown'>, <MarkupKind.PlainText: 'plaintext'>]), signature_help=SignatureHelpClientCapabilities(dynamic_registration=True, signature_information=SignatureHelpInformationClientCapabilities(documentation_format=[<MarkupKind.Markdown: 'markdown'>, <MarkupKind.PlainText: 'plaintext'>], parameter_information=SignatureHelpInformationParameterInformationClientCapabilities(label_offset_support=True), active_parameter_support=True), context_support=True), declaration=DeclarationClientCapabilities(dynamic_registration=True, link_support=True), definition=DefinitionClientCapabilities(dynamic_registration=True, link_support=True), type_definition=TypeDefinitionClientCapabilities(dynamic_registration=True, link_support=True), implementation=ImplementationClientCapabilities(dynamic_registration=True, link_support=True), references=ReferenceClientCapabilities(dynamic_registration=True), document_highlight=DocumentHighlightClientCapabilities(dynamic_registration=True), document_symbol=DocumentSymbolClientCapabilities(dynamic_registration=True, symbol_kind=WorkspaceCapabilitiesSymbolKind(value_set=[<SymbolKind.File: 1>, <SymbolKind.Module: 2>, <SymbolKind.Namespace: 3>, <SymbolKind.Package: 4>, <SymbolKind.Class: 5>, <SymbolKind.Method: 6>, <SymbolKind.Property: 7>, <SymbolKind.Field: 8>, <SymbolKind.Constructor: 9>, <SymbolKind.Enum: 10>, <SymbolKind.Interface: 11>, <SymbolKind.Function: 12>, <SymbolKind.Variable: 13>, <SymbolKind.Constant: 14>, <SymbolKind.String: 15>, <SymbolKind.Number: 16>, <SymbolKind.Boolean: 17>, <SymbolKind.Array: 18>, <SymbolKind.Object: 19>, <SymbolKind.Key: 20>, <SymbolKind.Null: 21>, <SymbolKind.EnumMember: 22>, <SymbolKind.Struct: 23>, <SymbolKind.Event: 24>, <SymbolKind.Operator: 25>, <SymbolKind.TypeParameter: 26>]), hierarchical_document_symbol_support=True, tag_support=WorkspaceCapabilitiesTagSupport(value_set=[<SymbolKind.File: 1>]), label_support=True), code_action=CodeActionClientCapabilities(dynamic_registration=True, code_action_literal_support=CodeActionLiteralSupportClientCapabilities(code_action_kind=CodeActionLiteralSupportActionKindClientCapabilities(value_set=['', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 'refactor.rewrite', 'source', 'source.organizeImports'])), is_preferred_support=True, disabled_support=True, data_support=True, resolve_support=ResolveSupportClientCapabilities(properties=['edit']), honors_change_annotations=False), code_lens=CodeLensClientCapabilities(dynamic_registration=True), document_link=DocumentLinkClientCapabilities(dynamic_registration=True, tooltip_support=True), color_provider=DocumentColorClientCapabilities(dynamic_registration=True), formatting=DocumentFormattingClientCapabilities(dynamic_registration=True), range_formatting=DocumentRangeFormattingClientCapabilities(dynamic_registration=True), on_type_formatting=DocumentOnTypeFormattingClientCapabilities(dynamic_registration=True), rename=RenameClientCapabilities(dynamic_registration=True, prepare_support=True, prepare_support_default_behavior=<PrepareSupportDefaultBehavior.Identifier: 1>, honors_change_annotations=True), publish_diagnostics=PublishDiagnosticsClientCapabilities(related_information=True, tag_support=PublishDiagnosticsTagSupportClientCapabilities(value_set=[<DiagnosticTag.Unnecessary: 1>, <DiagnosticTag.Deprecated: 2>]), version_support=False, code_description_support=True, data_support=True), folding_range=FoldingRangeClientCapabilities(dynamic_registration=True, range_limit=5000, line_folding_only=True), selection_range=SelectionRangeClientCapabilities(dynamic_registration=True), linked_editing_range=LinkedEditingRangeClientCapabilities(dynamic_registration=True), call_hierarchy=CallHierarchyClientCapabilities(dynamic_registration=True), semantic_tokens=SemanticTokensClientCapabilities(requests=SemanticTokensRequests(range=True, full=SemanticTokensRequestsFull(delta=True)), token_types=['namespace', 'type', 'class', 'enum', 'interface', 'struct', 'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 'number', 'regexp', 'operator'], token_modifiers=['declaration', 'definition', 'readonly', 'static', 'deprecated', 'abstract', 'async', 'modification', 'documentation', 'defaultLibrary'], formats=[<TokenFormat.Relative: 'relative'>], overlapping_token_support=False, multiline_token_support=False, dynamic_registration=True), moniker=None), window=WindowClientCapabilities(work_done_progress=True, show_message=ShowMessageRequestClientCapabilities(message_action_item=ShowMessageRequestActionItem(additional_properties_support=True)), show_document=ShowDocumentClientCapabilities(support=True)), general=GeneralClientCapabilities(regular_expressions=RegularExpressionsClientCapabilities(engine='ECMAScript', version='ES2020'), markdown=MarkdownClientCapabilities(parser='marked', version='1.1.0')), experimental=None) client_info=ClientInfo(name='Visual Studio Code', version='1.59.1') locale='en-gb' root_path='/home/neb/Dropbox/pie/Music_Organizer' initialization_options={'markupKindPreferred': 'markdown', 'completion': {'resolveEagerly': False, 'disableSnippets': False}, 'diagnostics': {'enable': True, 'didOpen': True, 'didSave': True, 'didChange': True}, 'workspace': {'extraPaths': ['/home/neb/Dropbox/pie/Music_Organizer'], 'symbols': {'maxSymbols': 0}}} trace=<Trace.Off: 'off'> workspace_folders=[WorkspaceFolder(uri='file:///home/neb/Dropbox/pie/Music_Organizer', name='Music_Organizer')]
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 0, "result": {"capabilities": {"textDocumentSync": {"openClose": true, "change": 2, "willSave": false, "willSaveWaitUntil": false, "save": true}, "completionProvider": {"triggerCharacters": [".", "'", "\""], "resolveProvider": true}, "hoverProvider": true, "signatureHelpProvider": {"triggerCharacters": ["(", ","]}, "definitionProvider": true, "referencesProvider": true, "documentHighlightProvider": true, "documentSymbolProvider": true, "codeActionProvider": {"codeActionKinds": ["refactor.inline", "refactor.extract"]}, "renameProvider": true, "executeCommandProvider": {"commands": []}, "workspaceSymbolProvider": true, "workspace": {"workspaceFolders": {"supported": true, "changeNotifications": true}, "fileOperations": {}}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 1, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 14, "character": 37}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 2, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement filename\n```\n---\n```python\nfor filename in os.scandir(directory): if filename.endswith(\".flac\" or \".jpg\" or \".png\"): set.add(filename) if filename.is_dir: dirs.add(filename) contains_directory = True\n```\n**Full name:** `fixer.get_songs.filename`"}, "range": {"start": {"line": 9, "character": 11}, "end": {"line": 9, "character": 19}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 3, "result": {"isIncomplete": false, "items": [{"label": "False", "kind": 14, "sortText": "z", "filterText": "False", "insertText": "False", "insertTextFormat": 1}, {"label": "FileExistsError", "kind": 7, "sortText": "z", "filterText": "FileExistsError", "insertText": "FileExistsError($0)", "insertTextFormat": 2}, {"label": "filename", "kind": 6, "sortText": "z", "filterText": "filename", "insertText": "filename", "insertTextFormat": 1}, {"label": "FileNotFoundError", "kind": 7, "sortText": "z", "filterText": "FileNotFoundError", "insertText": "FileNotFoundError($0)", "insertTextFormat": 2}, {"label": "filter", "kind": 3, "sortText": "z", "filterText": "filter", "insertText": "filter(${1:function}, ${2:iterable})$0", "insertTextFormat": 2}, {"label": "FLAC", "kind": 9, "sortText": "z", "filterText": "FLAC", "insertText": "FLAC", "insertTextFormat": 1}, {"label": "float", "kind": 7, "sortText": "z", "filterText": "float", "insertText": "float($0)", "insertTextFormat": 2}, {"label": "FloatingPointError", "kind": 7, "sortText": "z", "filterText": "FloatingPointError", "insertText": "FloatingPointError($0)", "insertTextFormat": 2}, {"label": "for", "kind": 14, "sortText": "z", "filterText": "for", "insertText": "for", "insertTextFormat": 1}, {"label": "format", "kind": 3, "sortText": "z", "filterText": "format", "insertText": "format(${1:o})$0", "insertTextFormat": 2}, {"label": "from", "kind": 14, "sortText": "z", "filterText": "from", "insertText": "from", "insertTextFormat": 1}, {"label": "frozenset", "kind": 7, "sortText": "z", "filterText": "frozenset", "insertText": "frozenset($0)", "insertTextFormat": 2}, {"label": "FutureWarning", "kind": 7, "sortText": "z", "filterText": "FutureWarning", "insertText": "FutureWarning($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 4, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 3}, "edits": [{"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef "}, {"range": {"start": {"line": 16, "character": 10}, "end": {"line": 26, "character": 1}}, "newText": " = jls_extract_def()\n\n        \n\n        \n\n        \n\n    \n\n\n"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 5, "result": {"label": "from", "kind": 14, "detail": "keyword from", "documentation": {"kind": "markdown", "value": "```text\nThe \"import\" statement\n**********************\n\n   import_stmt     ::= \"import\" module [\"as\" identifier] (\",\" module [\"as\" identifier])*\n                   | \"from\" relative_module \"import\" identifier [\"as\" identifier]\n                   (\",\" identifier [\"as\" identifier])*\n                   | \"from\" relative_module \"import\" \"(\" identifier [\"as\" identifier]\n                   (\",\" identifier [\"as\" identifier])* [\",\"] \")\"\n                   | \"from\" relative_module \"import\" \"*\"\n   module          ::= (identifier \".\")* identifier\n   relative_module ::= \".\"* module | \".\"+\n\nThe basic import statement (no \"from\" clause) is executed in two\nsteps:\n\n1. find a module, loading and initializing it if necessary\n\n2. define a name or names in the local namespace for the scope where\n   the \"import\" statement occurs.\n\nWhen the statement contains multiple clauses (separated by commas) the\ntwo steps are carried out separately for each clause, just as though\nthe clauses had been separated out into individual import statements.\n\nThe details of the first step, finding and loading modules are\ndescribed in greater detail in the section on the import system, which\nalso describes the various types of packages and modules that can be\nimported, as well as all the hooks that can be used to customize the\nimport system. Note that failures in this step may indicate either\nthat the module could not be located, *or* that an error occurred\nwhile initializing the module, which includes execution of the\nmodule\u2019s code.\n\nIf the requested module is retrieved successfully, it will be made\navailable in the local namespace in one of three ways:\n\n* If the module name is followed by \"as\", then the name following \"as\"\n  is bound directly to the imported module.\n\n* If no other name is specified, and the module being imported is a\n  top level module, the module\u2019s name is bound in the local namespace\n  as a reference to the imported module\n\n* If the module being imported is *not* a top level module, then the\n  name of the top level package that contains the module is bound in\n  the local namespace as a reference to the top level package. The\n  imported module must be accessed using its full qualified name\n  rather than directly\n\nThe \"from\" form uses a slightly more complex process:\n\n1. find the module specified in the \"from\" clause, loading and\n   initializing it if necessary;\n\n2. for each of the identifiers specified in the \"import\" clauses:\n\n   1. check if the imported module has an attribute by that name\n\n   2. if not, attempt to import a submodule with that name and then\n      check the imported module again for that attribute\n\n   3. if the attribute is not found, \"ImportError\" is raised.\n\n   4. otherwise, a reference to that value is stored in the local\n      namespace, using the name in the \"as\" clause if it is present,\n      otherwise using the attribute name\n\nExamples:\n\n   import foo                 # foo imported and bound locally\n   import foo.bar.baz         # foo.bar.baz imported, foo bound locally\n   import foo.bar.baz as fbb  # foo.bar.baz imported and bound as fbb\n   from foo.bar import baz    # foo.bar.baz imported and bound as baz\n   from foo import attr       # foo imported and foo.attr bound as attr\n\nIf the list of identifiers is replaced by a star (\"'*'\"), all public\nnames defined in the module are bound in the local namespace for the\nscope where the \"import\" statement occurs.\n\nThe *public names* defined by a module are determined by checking the\nmodule\u2019s namespace for a variable named \"__all__\"; if defined, it must\nbe a sequence of strings which are names defined or imported by that\nmodule.  The names given in \"__all__\" are all considered public and\nare required to exist.  If \"__all__\" is not defined, the set of public\nnames includes all names found in the module\u2019s namespace which do not\nbegin with an underscore character (\"'_'\").  \"__all__\" should contain\nthe entire public API. It is intended to avoid accidentally exporting\nitems that are not part of the API (such as library modules which were\nimported and used within the module).\n\nThe wild card form of import \u2014 \"from module import *\" \u2014 is only\nallowed at the module level.  Attempting to use it in class or\nfunction definitions will raise a \"SyntaxError\".\n\nWhen specifying what module to import you do not have to specify the\nabsolute name of the module. When a module or package is contained\nwithin another package it is possible to make a relative import within\nthe same top package without having to mention the package name. By\nusing leading dots in the specified module or package after \"from\" you\ncan specify how high to traverse up the current package hierarchy\nwithout specifying exact names. One leading dot means the current\npackage where the module making the import exists. Two dots means up\none package level. Three dots is up two levels, etc. So if you execute\n\"from . import mod\" from a module in the \"pkg\" package then you will\nend up importing \"pkg.mod\". If you execute \"from ..subpkg2 import mod\"\nfrom within \"pkg.subpkg1\" you will import \"pkg.subpkg2.mod\". The\nspecification for relative imports is contained in the Package\nRelative Imports section.\n\n\"importlib.import_module()\" is provided to support applications that\ndetermine dynamically the modules to be loaded.\n\nRaises an auditing event \"import\" with arguments \"module\", \"filename\",\n\"sys.path\", \"sys.meta_path\", \"sys.path_hooks\".\n\n\nFuture statements\n=================\n\nA *future statement* is a directive to the compiler that a particular\nmodule should be compiled using syntax or semantics that will be\navailable in a specified future release of Python where the feature\nbecomes standard.\n\nThe future statement is intended to ease migration to future versions\nof Python that introduce incompatible changes to the language.  It\nallows use of the new features on a per-module basis before the\nrelease in which the feature becomes standard.\n\n   future_stmt ::= \"from\" \"__future__\" \"import\" feature [\"as\" identifier]\n                   (\",\" feature [\"as\" identifier])*\n                   | \"from\" \"__future__\" \"import\" \"(\" feature [\"as\" identifier]\n                   (\",\" feature [\"as\" identifier])* [\",\"] \")\"\n   feature     ::= identifier\n\nA future statement must appear near the top of the module.  The only\nlines that can appear before a future statement are:\n\n* the module docstring (if any),\n\n* comments,\n\n* blank lines, and\n\n* other future statements.\n\nThe only feature that requires using the future statement is\n\"annotations\" (see **PEP 563**).\n\nAll historical features enabled by the future statement are still\nrecognized by Python 3.  The list includes \"absolute_import\",\n\"division\", \"generators\", \"generator_stop\", \"unicode_literals\",\n\"print_function\", \"nested_scopes\" and \"with_statement\".  They are all\nredundant because they are always enabled, and only kept for backwards\ncompatibility.\n\nA future statement is recognized and treated specially at compile\ntime: Changes to the semantics of core constructs are often\nimplemented by generating different code.  It may even be the case\nthat a new feature introduces new incompatible syntax (such as a new\nreserved word), in which case the compiler may need to parse the\nmodule differently.  Such decisions cannot be pushed off until\nruntime.\n\nFor any given release, the compiler knows which feature names have\nbeen defined, and raises a compile-time error if a future statement\ncontains a feature not known to it.\n\nThe direct runtime semantics are the same as for any import statement:\nthere is a standard module \"__future__\", described later, and it will\nbe imported in the usual way at the time the future statement is\nexecuted.\n\nThe interesting runtime semantics depend on the specific feature\nenabled by the future statement.\n\nNote that there is nothing special about the statement:\n\n   import __future__ [as name]\n\nThat is not a future statement; it\u2019s an ordinary import statement with\nno special semantics or syntax restrictions.\n\nCode compiled by calls to the built-in functions \"exec()\" and\n\"compile()\" that occur in a module \"M\" containing a future statement\nwill, by default, use the new syntax or semantics associated with the\nfuture statement.  This can be controlled by optional arguments to\n\"compile()\" \u2014 see the documentation of that function for details.\n\nA future statement typed at an interactive interpreter prompt will\ntake effect for the rest of the interpreter session.  If an\ninterpreter is started with the \"-i\" option, is passed a script name\nto execute, and the script includes a future statement, it will be in\neffect in the interactive session started after the script is\nexecuted.\n\nSee also:\n\n  **PEP 236** - Back to the __future__\n     The original proposal for the __future__ mechanism.\n```"}, "sortText": "z", "filterText": "from", "insertText": "from", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 6, "result": {"label": "filename", "kind": 6, "detail": "for filename in os.scandir(directory): if filename.endswith(\".flac\" or \".jpg\" or \".png\"): set.add(filename) if filename.is_dir: dirs.add(filename) contains_directory = True f", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "filename", "insertText": "filename", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 7, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 4}, "edits": [{"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef "}, {"range": {"start": {"line": 16, "character": 9}, "end": {"line": 26, "character": 1}}, "newText": " = jls_extract_def()\n\n        \n\n        \n\n        \n\n    \n\n\n"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 8, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 16, "character": 9}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 9, "result": {"label": "for", "kind": 14, "detail": "keyword for", "documentation": {"kind": "markdown", "value": "```text\nThe \"for\" statement\n*******************\n\nThe \"for\" statement is used to iterate over the elements of a sequence\n(such as a string, tuple or list) or other iterable object:\n\n   for_stmt ::= \"for\" target_list \"in\" expression_list \":\" suite\n                [\"else\" \":\" suite]\n\nThe expression list is evaluated once; it should yield an iterable\nobject.  An iterator is created for the result of the\n\"expression_list\".  The suite is then executed once for each item\nprovided by the iterator, in the order returned by the iterator.  Each\nitem in turn is assigned to the target list using the standard rules\nfor assignments (see Assignment statements), and then the suite is\nexecuted.  When the items are exhausted (which is immediately when the\nsequence is empty or an iterator raises a \"StopIteration\" exception),\nthe suite in the \"else\" clause, if present, is executed, and the loop\nterminates.\n\nA \"break\" statement executed in the first suite terminates the loop\nwithout executing the \"else\" clause\u2019s suite.  A \"continue\" statement\nexecuted in the first suite skips the rest of the suite and continues\nwith the next item, or with the \"else\" clause if there is no next\nitem.\n\nThe for-loop makes assignments to the variables in the target list.\nThis overwrites all previous assignments to those variables including\nthose made in the suite of the for-loop:\n\n   for i in range(10):\n       print(i)\n       i = 5             # this will not affect the for-loop\n                         # because i will be overwritten with the next\n                         # index in the range\n\nNames in the target list are not deleted when the loop is finished,\nbut if the sequence is empty, they will not have been assigned to at\nall by the loop.  Hint: the built-in function \"range()\" returns an\niterator of integers suitable to emulate the effect of Pascal\u2019s \"for i\n:= a to b do\"; e.g., \"list(range(3))\" returns the list \"[0, 1, 2]\".\n\nNote:\n\n  There is a subtlety when the sequence is being modified by the loop\n  (this can only occur for mutable sequences, e.g. lists).  An\n  internal counter is used to keep track of which item is used next,\n  and this is incremented on each iteration.  When this counter has\n  reached the length of the sequence the loop terminates.  This means\n  that if the suite deletes the current (or a previous) item from the\n  sequence, the next item will be skipped (since it gets the index of\n  the current item which has already been treated).  Likewise, if the\n  suite inserts an item in the sequence before the current item, the\n  current item will be treated again the next time through the loop.\n  This can lead to nasty bugs that can be avoided by making a\n  temporary copy using a slice of the whole sequence, e.g.,\n\n     for x in a[:]:\n         if x < 0: a.remove(x)\n```"}, "sortText": "z", "filterText": "for", "insertText": "for", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 16, "character": 11}, "end": {"line": 17, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 16, "character": 12}, "end": {"line": 17, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 10, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 16, "character": 11}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 16, "character": 13}, "end": {"line": 17, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 11, "result": {"isIncomplete": false, "items": [{"label": "delattr", "kind": 3, "sortText": "z", "filterText": "delattr", "insertText": "delattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "DeprecationWarning", "kind": 7, "sortText": "z", "filterText": "DeprecationWarning", "insertText": "DeprecationWarning($0)", "insertTextFormat": 2}, {"label": "dict", "kind": 7, "sortText": "z", "filterText": "dict", "insertText": "dict($0)", "insertTextFormat": 2}, {"label": "dir", "kind": 3, "sortText": "z", "filterText": "dir", "insertText": "dir($0)", "insertTextFormat": 2}, {"label": "directory", "kind": 6, "sortText": "z", "filterText": "directory", "insertText": "directory", "insertTextFormat": 1}, {"label": "dirs", "kind": 6, "sortText": "z", "filterText": "dirs", "insertText": "dirs", "insertTextFormat": 1}, {"label": "divmod", "kind": 3, "sortText": "z", "filterText": "divmod", "insertText": "divmod(${1:a}, ${2:b})$0", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 16, "character": 14}, "end": {"line": 17, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 16, "character": 15}, "end": {"line": 17, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 12, "result": {"label": "dir", "kind": 3, "detail": "def dir", "documentation": {"kind": "markdown", "value": "```text\ndir(o: object=..., /) -> List[str]\n\ndir([object]) -> list of strings\n\nIf called without an argument, return the names in the current scope.\nElse, return an alphabetized list of names comprising (some of) the attributes\nof the given object, and of attributes reachable from it.\nIf the object supplies a method named __dir__, it will be used; otherwise\nthe default dir() logic is used and returns:\n  for a module object: the module's attributes.\n  for a class object:  its attributes, and recursively the attributes\n    of its bases.\n  for any other object: its attributes, its class's attributes, and\n    recursively the attributes of its class's base classes.\n```"}, "sortText": "z", "filterText": "dir", "insertText": "dir($0)", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 16, "character": 16}, "end": {"line": 17, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 16, "character": 16}, "end": {"line": 16, "character": 17}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 13, "result": {"isIncomplete": false, "items": [{"label": "in", "kind": 14, "sortText": "z", "filterText": "in", "insertText": "in", "insertTextFormat": 1}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 14, "result": {"label": "in", "kind": 14, "detail": "keyword in", "documentation": {"kind": "markdown", "value": "```text\nMembership test operations\n**************************\n\nThe operators \"in\" and \"not in\" test for membership.  \"x in s\"\nevaluates to \"True\" if *x* is a member of *s*, and \"False\" otherwise.\n\"x not in s\" returns the negation of \"x in s\".  All built-in sequences\nand set types support this as well as dictionary, for which \"in\" tests\nwhether the dictionary has a given key. For container types such as\nlist, tuple, set, frozenset, dict, or collections.deque, the\nexpression \"x in y\" is equivalent to \"any(x is e or x == e for e in\ny)\".\n\nFor the string and bytes types, \"x in y\" is \"True\" if and only if *x*\nis a substring of *y*.  An equivalent test is \"y.find(x) != -1\".\nEmpty strings are always considered to be a substring of any other\nstring, so \"\"\" in \"abc\"\" will return \"True\".\n\nFor user-defined classes which define the \"__contains__()\" method, \"x\nin y\" returns \"True\" if \"y.__contains__(x)\" returns a true value, and\n\"False\" otherwise.\n\nFor user-defined classes which do not define \"__contains__()\" but do\ndefine \"__iter__()\", \"x in y\" is \"True\" if some value \"z\", for which\nthe expression \"x is z or x == z\" is true, is produced while iterating\nover \"y\". If an exception is raised during the iteration, it is as if\n\"in\" raised that exception.\n\nLastly, the old-style iteration protocol is tried: if a class defines\n\"__getitem__()\", \"x in y\" is \"True\" if and only if there is a non-\nnegative integer index *i* such that \"x is y[i] or x == y[i]\", and no\nlower integer index raises the \"IndexError\" exception.  (If any other\nexception is raised, it is as if \"in\" raised that exception).\n\nThe operator \"not in\" is defined to have the inverse truth value of\n\"in\".\n```"}, "sortText": "z", "filterText": "in", "insertText": "in", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 16, "character": 18}, "end": {"line": 17, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 15, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 16, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 16, "character": 18}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 16, "character": 19}, "end": {"line": 17, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 16, "character": 20}, "end": {"line": 17, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 17, "result": {"isIncomplete": false, "items": [{"label": "delattr", "kind": 3, "sortText": "z", "filterText": "delattr", "insertText": "delattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "DeprecationWarning", "kind": 7, "sortText": "z", "filterText": "DeprecationWarning", "insertText": "DeprecationWarning($0)", "insertTextFormat": 2}, {"label": "dict", "kind": 7, "sortText": "z", "filterText": "dict", "insertText": "dict($0)", "insertTextFormat": 2}, {"label": "dir", "kind": 3, "sortText": "z", "filterText": "dir", "insertText": "dir($0)", "insertTextFormat": 2}, {"label": "directory", "kind": 6, "sortText": "z", "filterText": "directory", "insertText": "directory", "insertTextFormat": 1}, {"label": "dirs", "kind": 6, "sortText": "z", "filterText": "dirs", "insertText": "dirs", "insertTextFormat": 1}, {"label": "divmod", "kind": 3, "sortText": "z", "filterText": "divmod", "insertText": "divmod(${1:a}, ${2:b})$0", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 16, "character": 21}, "end": {"line": 17, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 16, "character": 22}, "end": {"line": 17, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 16, "character": 23}, "end": {"line": 17, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 18, "result": {"label": "dirs", "kind": 6, "detail": "dirs = set()", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "dirs", "insertText": "dirs", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 19, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 20, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 16, "character": 23}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 27, "character": 0}, "end": {"line": 27, "character": 0}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 21, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 22, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 16, "character": 24}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 28, "character": 0}, "end": {"line": 28, "character": 0}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 23, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 16, "character": 24}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 24, "result": {"contents": {"kind": "markdown", "value": "```python\nkeyword :\n```\n---\n```text\nSlicings\n********\n\nA slicing selects a range of items in a sequence object (e.g., a\nstring, tuple or list).  Slicings may be used as expressions or as\ntargets in assignment or \"del\" statements.  The syntax for a slicing:\n\n   slicing      ::= primary \"[\" slice_list \"]\"\n   slice_list   ::= slice_item (\",\" slice_item)* [\",\"]\n   slice_item   ::= expression | proper_slice\n   proper_slice ::= [lower_bound] \":\" [upper_bound] [ \":\" [stride] ]\n   lower_bound  ::= expression\n   upper_bound  ::= expression\n   stride       ::= expression\n\nThere is ambiguity in the formal syntax here: anything that looks like\nan expression list also looks like a slice list, so any subscription\ncan be interpreted as a slicing.  Rather than further complicating the\nsyntax, this is disambiguated by defining that in this case the\ninterpretation as a subscription takes priority over the\ninterpretation as a slicing (this is the case if the slice list\ncontains no proper slice).\n\nThe semantics for a slicing are as follows.  The primary is indexed\n(using the same \"__getitem__()\" method as normal subscription) with a\nkey that is constructed from the slice list, as follows.  If the slice\nlist contains at least one comma, the key is a tuple containing the\nconversion of the slice items; otherwise, the conversion of the lone\nslice item is the key.  The conversion of a slice item that is an\nexpression is that expression.  The conversion of a proper slice is a\nslice object (see section The standard type hierarchy) whose \"start\",\n\"stop\" and \"step\" attributes are the values of the expressions given\nas lower bound, upper bound and stride, respectively, substituting\n\"None\" for missing expressions.\n```"}, "range": null}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 25, "result": {"contents": {"kind": "markdown", "value": "```python\nkeyword in\n```\n---\n```text\nMembership test operations\n**************************\n\nThe operators \"in\" and \"not in\" test for membership.  \"x in s\"\nevaluates to \"True\" if *x* is a member of *s*, and \"False\" otherwise.\n\"x not in s\" returns the negation of \"x in s\".  All built-in sequences\nand set types support this as well as dictionary, for which \"in\" tests\nwhether the dictionary has a given key. For container types such as\nlist, tuple, set, frozenset, dict, or collections.deque, the\nexpression \"x in y\" is equivalent to \"any(x is e or x == e for e in\ny)\".\n\nFor the string and bytes types, \"x in y\" is \"True\" if and only if *x*\nis a substring of *y*.  An equivalent test is \"y.find(x) != -1\".\nEmpty strings are always considered to be a substring of any other\nstring, so \"\"\" in \"abc\"\" will return \"True\".\n\nFor user-defined classes which define the \"__contains__()\" method, \"x\nin y\" returns \"True\" if \"y.__contains__(x)\" returns a true value, and\n\"False\" otherwise.\n\nFor user-defined classes which do not define \"__contains__()\" but do\ndefine \"__iter__()\", \"x in y\" is \"True\" if some value \"z\", for which\nthe expression \"x is z or x == z\" is true, is produced while iterating\nover \"y\". If an exception is raised during the iteration, it is as if\n\"in\" raised that exception.\n\nLastly, the old-style iteration protocol is tried: if a class defines\n\"__getitem__()\", \"x in y\" is \"True\" if and only if there is a non-\nnegative integer index *i* such that \"x is y[i] or x == y[i]\", and no\nlower integer index raises the \"IndexError\" exception.  (If any other\nexception is raised, it is as if \"in\" raised that exception).\n\nThe operator \"not in\" is defined to have the inverse truth value of\n\"in\".\n```"}, "range": {"start": {"line": 16, "character": 16}, "end": {"line": 16, "character": 18}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 26, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 27, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 28, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 29, "result": {"contents": {"kind": "markdown", "value": "```python\nkeyword for\n```\n---\n```text\nThe \"for\" statement\n*******************\n\nThe \"for\" statement is used to iterate over the elements of a sequence\n(such as a string, tuple or list) or other iterable object:\n\n   for_stmt ::= \"for\" target_list \"in\" expression_list \":\" suite\n                [\"else\" \":\" suite]\n\nThe expression list is evaluated once; it should yield an iterable\nobject.  An iterator is created for the result of the\n\"expression_list\".  The suite is then executed once for each item\nprovided by the iterator, in the order returned by the iterator.  Each\nitem in turn is assigned to the target list using the standard rules\nfor assignments (see Assignment statements), and then the suite is\nexecuted.  When the items are exhausted (which is immediately when the\nsequence is empty or an iterator raises a \"StopIteration\" exception),\nthe suite in the \"else\" clause, if present, is executed, and the loop\nterminates.\n\nA \"break\" statement executed in the first suite terminates the loop\nwithout executing the \"else\" clause\u2019s suite.  A \"continue\" statement\nexecuted in the first suite skips the rest of the suite and continues\nwith the next item, or with the \"else\" clause if there is no next\nitem.\n\nThe for-loop makes assignments to the variables in the target list.\nThis overwrites all previous assignments to those variables including\nthose made in the suite of the for-loop:\n\n   for i in range(10):\n       print(i)\n       i = 5             # this will not affect the for-loop\n                         # because i will be overwritten with the next\n                         # index in the range\n\nNames in the target list are not deleted when the loop is finished,\nbut if the sequence is empty, they will not have been assigned to at\nall by the loop.  Hint: the built-in function \"range()\" returns an\niterator of integers suitable to emulate the effect of Pascal\u2019s \"for i\n:= a to b do\"; e.g., \"list(range(3))\" returns the list \"[0, 1, 2]\".\n\nNote:\n\n  There is a subtlety when the sequence is being modified by the loop\n  (this can only occur for mutable sequences, e.g. lists).  An\n  internal counter is used to keep track of which item is used next,\n  and this is incremented on each iteration.  When this counter has\n  reached the length of the sequence the loop terminates.  This means\n  that if the suite deletes the current (or a previous) item from the\n  sequence, the next item will be skipped (since it gets the index of\n  the current item which has already been treated).  Likewise, if the\n  suite inserts an item in the sequence before the current item, the\n  current item will be treated again the next time through the loop.\n  This can lead to nasty bugs that can be avoided by making a\n  temporary copy using a slice of the whole sequence, e.g.,\n\n     for x in a[:]:\n         if x < 0: a.remove(x)\n```"}, "range": {"start": {"line": 16, "character": 8}, "end": {"line": 16, "character": 11}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 30, "result": {"contents": {"kind": "markdown", "value": "```python\nkeyword for\n```\n---\n```text\nThe \"for\" statement\n*******************\n\nThe \"for\" statement is used to iterate over the elements of a sequence\n(such as a string, tuple or list) or other iterable object:\n\n   for_stmt ::= \"for\" target_list \"in\" expression_list \":\" suite\n                [\"else\" \":\" suite]\n\nThe expression list is evaluated once; it should yield an iterable\nobject.  An iterator is created for the result of the\n\"expression_list\".  The suite is then executed once for each item\nprovided by the iterator, in the order returned by the iterator.  Each\nitem in turn is assigned to the target list using the standard rules\nfor assignments (see Assignment statements), and then the suite is\nexecuted.  When the items are exhausted (which is immediately when the\nsequence is empty or an iterator raises a \"StopIteration\" exception),\nthe suite in the \"else\" clause, if present, is executed, and the loop\nterminates.\n\nA \"break\" statement executed in the first suite terminates the loop\nwithout executing the \"else\" clause\u2019s suite.  A \"continue\" statement\nexecuted in the first suite skips the rest of the suite and continues\nwith the next item, or with the \"else\" clause if there is no next\nitem.\n\nThe for-loop makes assignments to the variables in the target list.\nThis overwrites all previous assignments to those variables including\nthose made in the suite of the for-loop:\n\n   for i in range(10):\n       print(i)\n       i = 5             # this will not affect the for-loop\n                         # because i will be overwritten with the next\n                         # index in the range\n\nNames in the target list are not deleted when the loop is finished,\nbut if the sequence is empty, they will not have been assigned to at\nall by the loop.  Hint: the built-in function \"range()\" returns an\niterator of integers suitable to emulate the effect of Pascal\u2019s \"for i\n:= a to b do\"; e.g., \"list(range(3))\" returns the list \"[0, 1, 2]\".\n\nNote:\n\n  There is a subtlety when the sequence is being modified by the loop\n  (this can only occur for mutable sequences, e.g. lists).  An\n  internal counter is used to keep track of which item is used next,\n  and this is incremented on each iteration.  When this counter has\n  reached the length of the sequence the loop terminates.  This means\n  that if the suite deletes the current (or a previous) item from the\n  sequence, the next item will be skipped (since it gets the index of\n  the current item which has already been treated).  Likewise, if the\n  suite inserts an item in the sequence before the current item, the\n  current item will be treated again the next time through the loop.\n  This can lead to nasty bugs that can be avoided by making a\n  temporary copy using a slice of the whole sequence, e.g.,\n\n     for x in a[:]:\n         if x < 0: a.remove(x)\n```"}, "range": {"start": {"line": 16, "character": 8}, "end": {"line": 16, "character": 11}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 31, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 32, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 0}, "end": {"line": 29, "character": 0}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 33, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 0}, "end": {"line": 29, "character": 0}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 34, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 35, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 17, "character": 20}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 36, "result": {"contents": {"kind": "markdown", "value": "```python\ndef dir(o: object=..., /) -> List[str]\n```\n---\n```text\ndir([object]) -> list of strings\n\nIf called without an argument, return the names in the current scope.\nElse, return an alphabetized list of names comprising (some of) the attributes\nof the given object, and of attributes reachable from it.\nIf the object supplies a method named __dir__, it will be used; otherwise\nthe default dir() logic is used and returns:\n  for a module object: the module's attributes.\n  for a class object:  its attributes, and recursively the attributes\n    of its bases.\n  for any other object: its attributes, its class's attributes, and\n    recursively the attributes of its class's base classes.\n```\n**Full name:** `builtins.dir`"}, "range": {"start": {"line": 17, "character": 8}, "end": {"line": 17, "character": 11}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 37, "result": {"contents": {"kind": "markdown", "value": "```python\ndef dir(o: object=..., /) -> List[str]\n```\n---\n```text\ndir([object]) -> list of strings\n\nIf called without an argument, return the names in the current scope.\nElse, return an alphabetized list of names comprising (some of) the attributes\nof the given object, and of attributes reachable from it.\nIf the object supplies a method named __dir__, it will be used; otherwise\nthe default dir() logic is used and returns:\n  for a module object: the module's attributes.\n  for a class object:  its attributes, and recursively the attributes\n    of its bases.\n  for any other object: its attributes, its class's attributes, and\n    recursively the attributes of its class's base classes.\n```\n**Full name:** `builtins.dir`"}, "range": {"start": {"line": 17, "character": 8}, "end": {"line": 17, "character": 11}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 0}, "end": {"line": 29, "character": 0}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 38, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 17, "character": 20}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 0}, "end": {"line": 29, "character": 0}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 28, "character": 0}, "end": {"line": 28, "character": 0}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 39, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 16, "character": 20}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 40, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 0}, "end": {"line": 29, "character": 0}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 41, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 16, "character": 20}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 42, "result": {"isIncomplete": false, "items": [{"label": "GeneratorExit", "kind": 7, "sortText": "z", "filterText": "GeneratorExit", "insertText": "GeneratorExit($0)", "insertTextFormat": 2}, {"label": "get_songs", "kind": 3, "sortText": "z", "filterText": "get_songs", "insertText": "get_songs(${1:directory}, ${2:albums})$0", "insertTextFormat": 2}, {"label": "getattr", "kind": 3, "sortText": "z", "filterText": "getattr", "insertText": "getattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "global", "kind": 14, "sortText": "z", "filterText": "global", "insertText": "global", "insertTextFormat": 1}, {"label": "globals", "kind": 3, "sortText": "z", "filterText": "globals", "insertText": "globals()$0", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 43, "result": {"label": "get_songs", "kind": 3, "detail": "def get_songs", "documentation": {"kind": "markdown", "value": "```text\nget_songs(directory, albums)\n```"}, "sortText": "z", "filterText": "get_songs", "insertText": "get_songs(${1:directory}, ${2:albums})$0", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 44, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 29}, "edits": [{"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef "}, {"range": {"start": {"line": 17, "character": 11}, "end": {"line": 28, "character": 1}}, "newText": " = jls_extract_def()\n\n\n        \n\n        \n\n        \n\n    \n\n\n"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 45, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 17, "character": 11}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 46, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 30}, "edits": [{"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef "}, {"range": {"start": {"line": 17, "character": 12}, "end": {"line": 28, "character": 1}}, "newText": " = jls_extract_def()\n\n\n        \n\n        \n\n        \n\n    \n\n\n"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 47, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 35}, "edits": [{"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef "}, {"range": {"start": {"line": 17, "character": 17}, "end": {"line": 28, "character": 1}}, "newText": " = jls_extract_def()\n\n\n        \n\n        \n\n        \n\n    \n\n\n"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 48, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 17, "character": 17}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 49, "result": {"signatures": [{"label": "get_songs(directory, albums)", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "directory"}, {"label": "albums"}]}], "activeSignature": 0, "activeParameter": 0}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 50, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 51, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 17, "character": 19}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 52, "result": {"isIncomplete": false, "items": [{"label": "delattr", "kind": 3, "sortText": "z", "filterText": "delattr", "insertText": "delattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "DeprecationWarning", "kind": 7, "sortText": "z", "filterText": "DeprecationWarning", "insertText": "DeprecationWarning($0)", "insertTextFormat": 2}, {"label": "dict", "kind": 7, "sortText": "z", "filterText": "dict", "insertText": "dict($0)", "insertTextFormat": 2}, {"label": "dir", "kind": 6, "sortText": "z", "filterText": "dir", "insertText": "dir", "insertTextFormat": 1}, {"label": "directory", "kind": 6, "sortText": "z", "filterText": "directory", "insertText": "directory", "insertTextFormat": 1}, {"label": "directory=", "kind": 6, "sortText": "a", "filterText": "directory=", "insertText": "directory=", "insertTextFormat": 1}, {"label": "dirs", "kind": 6, "sortText": "z", "filterText": "dirs", "insertText": "dirs", "insertTextFormat": 1}, {"label": "divmod", "kind": 3, "sortText": "z", "filterText": "divmod", "insertText": "divmod(${1:a}, ${2:b})$0", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 53, "result": {"signatures": [{"label": "get_songs(directory, albums)", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "directory"}, {"label": "albums"}]}], "activeSignature": 0, "activeParameter": 0}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 54, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 55, "result": {"signatures": [{"label": "get_songs(directory, albums)", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "directory"}, {"label": "albums"}]}], "activeSignature": 0, "activeParameter": 0}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 56, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 57, "result": {"signatures": [{"label": "get_songs(directory, albums)", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "directory"}, {"label": "albums"}]}], "activeSignature": 0, "activeParameter": 0}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 58, "result": {"signatures": [{"label": "get_songs(directory, albums)", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "directory"}, {"label": "albums"}]}], "activeSignature": 0, "activeParameter": 0}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 59, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 60, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 17, "character": 19}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 61, "result": {"isIncomplete": false, "items": [{"label": "delattr", "kind": 3, "sortText": "z", "filterText": "delattr", "insertText": "delattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "DeprecationWarning", "kind": 7, "sortText": "z", "filterText": "DeprecationWarning", "insertText": "DeprecationWarning($0)", "insertTextFormat": 2}, {"label": "dict", "kind": 7, "sortText": "z", "filterText": "dict", "insertText": "dict($0)", "insertTextFormat": 2}, {"label": "dir", "kind": 6, "sortText": "z", "filterText": "dir", "insertText": "dir", "insertTextFormat": 1}, {"label": "directory", "kind": 6, "sortText": "z", "filterText": "directory", "insertText": "directory", "insertTextFormat": 1}, {"label": "directory=", "kind": 6, "sortText": "a", "filterText": "directory=", "insertText": "directory=", "insertTextFormat": 1}, {"label": "dirs", "kind": 6, "sortText": "z", "filterText": "dirs", "insertText": "dirs", "insertTextFormat": 1}, {"label": "divmod", "kind": 3, "sortText": "z", "filterText": "divmod", "insertText": "divmod(${1:a}, ${2:b})$0", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 62, "result": {"signatures": [{"label": "get_songs(directory, albums)", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "directory"}, {"label": "albums"}]}], "activeSignature": 0, "activeParameter": 0}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 63, "result": {"signatures": [{"label": "get_songs(directory, albums)", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "directory"}, {"label": "albums"}]}], "activeSignature": 0, "activeParameter": 0}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 64, "result": {"signatures": [{"label": "get_songs(directory, albums)", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "directory"}, {"label": "albums"}]}], "activeSignature": 0, "activeParameter": 0}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 65, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 66, "result": {"signatures": [{"label": "get_songs(directory, albums)", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "directory"}, {"label": "albums"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 67, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 68, "result": {"signatures": [{"label": "get_songs(directory, albums)", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "directory"}, {"label": "albums"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 69, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 70, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 17, "character": 24}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 71, "result": {"signatures": [{"label": "get_songs(directory, albums)", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "directory"}, {"label": "albums"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 72, "result": [{"title": "Inline variable", "kind": "refactor.inline", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 50}, "edits": [{"range": {"start": {"line": 5, "character": 4}, "end": {"line": 6, "character": 4}}, "newText": ""}, {"range": {"start": {"line": 17, "character": 24}, "end": {"line": 28, "character": 1}}, "newText": "et())\n\n\n        \n\n        \n\n        \n\n    \n\n\n"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 73, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 74, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 0}, "end": {"line": 29, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 75, "result": {"signatures": [{"label": "get_songs(directory, albums)", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "directory"}, {"label": "albums"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 0}, "end": {"line": 29, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 76, "result": {"signatures": [{"label": "get_songs(directory, albums)", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "directory"}, {"label": "albums"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 0}, "end": {"line": 29, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 77, "result": {"signatures": [{"label": "get_songs(directory, albums)", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "directory"}, {"label": "albums"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 0}, "end": {"line": 29, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 0}, "end": {"line": 29, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 78, "result": {"signatures": [{"label": "get_songs(directory, albums)", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "directory"}, {"label": "albums"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 0}, "end": {"line": 29, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 79, "result": {"signatures": [{"label": "get_songs(directory, albums)", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "directory"}, {"label": "albums"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 31, "character": 0}, "end": {"line": 31, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 31, "character": 0}, "end": {"line": 31, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 31, "character": 0}, "end": {"line": 31, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 31, "character": 0}, "end": {"line": 31, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 80, "result": {"isIncomplete": false, "items": [{"label": "abs", "kind": 3, "sortText": "z", "filterText": "abs", "insertText": "abs(${1:n})$0", "insertTextFormat": 2}, {"label": "albums", "kind": 6, "sortText": "z", "filterText": "albums", "insertText": "albums", "insertTextFormat": 1}, {"label": "all", "kind": 3, "sortText": "z", "filterText": "all", "insertText": "all(${1:i})$0", "insertTextFormat": 2}, {"label": "any", "kind": 3, "sortText": "z", "filterText": "any", "insertText": "any(${1:i})$0", "insertTextFormat": 2}, {"label": "ArithmeticError", "kind": 7, "sortText": "z", "filterText": "ArithmeticError", "insertText": "ArithmeticError($0)", "insertTextFormat": 2}, {"label": "ascii", "kind": 3, "sortText": "z", "filterText": "ascii", "insertText": "ascii(${1:o})$0", "insertTextFormat": 2}, {"label": "assert", "kind": 14, "sortText": "z", "filterText": "assert", "insertText": "assert", "insertTextFormat": 1}, {"label": "AssertionError", "kind": 7, "sortText": "z", "filterText": "AssertionError", "insertText": "AssertionError($0)", "insertTextFormat": 2}, {"label": "async", "kind": 14, "sortText": "z", "filterText": "async", "insertText": "async", "insertTextFormat": 1}, {"label": "AttributeError", "kind": 7, "sortText": "z", "filterText": "AttributeError", "insertText": "AttributeError($0)", "insertTextFormat": 2}, {"label": "await", "kind": 14, "sortText": "z", "filterText": "await", "insertText": "await", "insertTextFormat": 1}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 81, "result": {"label": "albums", "kind": 6, "detail": "param albums", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "albums", "insertText": "albums", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 82, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 83, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 84, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 16, "character": 11}, "end": {"line": 17, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 85, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 86, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 87, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 88, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 89, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 90, "result": {"isIncomplete": false, "items": [{"label": "set", "kind": 7, "sortText": "z", "filterText": "set", "insertText": "set($0)", "insertTextFormat": 2}, {"label": "setattr", "kind": 3, "sortText": "z", "filterText": "setattr", "insertText": "setattr(${1:object}, ${2:name}, ${3:value})$0", "insertTextFormat": 2}, {"label": "slice", "kind": 7, "sortText": "z", "filterText": "slice", "insertText": "slice(${1:stop})$0", "insertTextFormat": 2}, {"label": "songs", "kind": 6, "sortText": "z", "filterText": "songs", "insertText": "songs", "insertTextFormat": 1}, {"label": "sorted", "kind": 3, "sortText": "z", "filterText": "sorted", "insertText": "sorted(${1:iterable})$0", "insertTextFormat": 2}, {"label": "staticmethod", "kind": 7, "sortText": "z", "filterText": "staticmethod", "insertText": "staticmethod(${1:f})$0", "insertTextFormat": 2}, {"label": "StopAsyncIteration", "kind": 7, "sortText": "z", "filterText": "StopAsyncIteration", "insertText": "StopAsyncIteration($0)", "insertTextFormat": 2}, {"label": "StopIteration", "kind": 7, "sortText": "z", "filterText": "StopIteration", "insertText": "StopIteration($0)", "insertTextFormat": 2}, {"label": "str", "kind": 7, "sortText": "z", "filterText": "str", "insertText": "str($0)", "insertTextFormat": 2}, {"label": "sum", "kind": 3, "sortText": "z", "filterText": "sum", "insertText": "sum(${1:iterable})$0", "insertTextFormat": 2}, {"label": "super", "kind": 7, "sortText": "z", "filterText": "super", "insertText": "super(${1:t}, ${2:obj})$0", "insertTextFormat": 2}, {"label": "SyntaxError", "kind": 7, "sortText": "z", "filterText": "SyntaxError", "insertText": "SyntaxError($0)", "insertTextFormat": 2}, {"label": "SyntaxWarning", "kind": 7, "sortText": "z", "filterText": "SyntaxWarning", "insertText": "SyntaxWarning($0)", "insertTextFormat": 2}, {"label": "SystemError", "kind": 7, "sortText": "z", "filterText": "SystemError", "insertText": "SystemError($0)", "insertTextFormat": 2}, {"label": "SystemExit", "kind": 7, "sortText": "z", "filterText": "SystemExit", "insertText": "SystemExit($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 91, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 92, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 93, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 94, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 95, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 31, "character": 0}, "end": {"line": 31, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 96, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 97, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 98, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement contains_directory\n```\n---\n```python\ncontains_directory = True\n```\n**Full name:** `fixer.get_songs.contains_directory`"}, "range": {"start": {"line": 14, "character": 12}, "end": {"line": 14, "character": 30}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 99, "result": [{"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 22}}}, {"range": {"start": {"line": 14, "character": 12}, "end": {"line": 14, "character": 30}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 100, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 101, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 102, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 103, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 104, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 105, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 19, "character": 22}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 106, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 107, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement filename\n```\n---\n```python\nfor filename in os.scandir(directory): if filename.endswith(\".flac\" or \".jpg\" or \".png\"): set.add(filename) if filename.is_dir: dirs.add(filename) contains_directory = True\n```\n**Full name:** `fixer.get_songs.filename`"}, "range": {"start": {"line": 12, "character": 11}, "end": {"line": 12, "character": 19}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 108, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement dir\n```\n---\n```python\nfor dir in dirs: get_songs(dir,\n```\n**Full name:** `fixer.get_songs.dir`"}, "range": {"start": {"line": 19, "character": 18}, "end": {"line": 19, "character": 21}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 109, "result": {"contents": {"kind": "markdown", "value": "```python\nparam albums\n```"}, "range": {"start": {"line": 16, "character": 4}, "end": {"line": 16, "character": 10}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 110, "result": [{"range": {"start": {"line": 4, "character": 25}, "end": {"line": 4, "character": 31}}}, {"range": {"start": {"line": 16, "character": 4}, "end": {"line": 16, "character": 10}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 111, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 112, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement contains_directory\n```\n---\n```python\ncontains_directory = True\n```\n**Full name:** `fixer.get_songs.contains_directory`"}, "range": {"start": {"line": 14, "character": 12}, "end": {"line": 14, "character": 30}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 113, "result": [{"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 22}}}, {"range": {"start": {"line": 14, "character": 12}, "end": {"line": 14, "character": 30}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 114, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 115, "result": {"contents": {"kind": "markdown", "value": "```python\nparam albums\n```"}, "range": {"start": {"line": 16, "character": 4}, "end": {"line": 16, "character": 10}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 116, "result": [{"range": {"start": {"line": 4, "character": 25}, "end": {"line": 4, "character": 31}}}, {"range": {"start": {"line": 16, "character": 4}, "end": {"line": 16, "character": 10}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 117, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 118, "result": {"contents": {"kind": "markdown", "value": "```python\nkeyword .\n```\n---\n```text\nAttribute references\n********************\n\nAn attribute reference is a primary followed by a period and a name:\n\n   attributeref ::= primary \".\" identifier\n\nThe primary must evaluate to an object of a type that supports\nattribute references, which most objects do.  This object is then\nasked to produce the attribute whose name is the identifier.  This\nproduction can be customized by overriding the \"__getattr__()\" method.\nIf this attribute is not available, the exception \"AttributeError\" is\nraised.  Otherwise, the type and value of the object produced is\ndetermined by the object.  Multiple evaluations of the same attribute\nreference may yield different objects.\n```"}, "range": {"start": {"line": 16, "character": 11}, "end": {"line": 16, "character": 14}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 119, "result": [{"range": {"start": {"line": 16, "character": 11}, "end": {"line": 16, "character": 14}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 120, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 121, "result": [{"range": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 9}}}, {"range": {"start": {"line": 16, "character": 15}, "end": {"line": 16, "character": 20}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 122, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 123, "result": {"contents": {"kind": "markdown", "value": "```python\nsongs: set\n```\n---\n```python\nsongs = set()\n```\n**Full name:** `fixer.get_songs.songs`"}, "range": {"start": {"line": 16, "character": 15}, "end": {"line": 16, "character": 20}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 31, "character": 0}, "end": {"line": 31, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 124, "result": {"isIncomplete": false, "items": [{"label": "set", "kind": 7, "sortText": "z", "filterText": "set", "insertText": "set($0)", "insertTextFormat": 2}, {"label": "setattr", "kind": 3, "sortText": "z", "filterText": "setattr", "insertText": "setattr(${1:object}, ${2:name}, ${3:value})$0", "insertTextFormat": 2}, {"label": "slice", "kind": 7, "sortText": "z", "filterText": "slice", "insertText": "slice(${1:stop})$0", "insertTextFormat": 2}, {"label": "songs", "kind": 6, "sortText": "z", "filterText": "songs", "insertText": "songs", "insertTextFormat": 1}, {"label": "sorted", "kind": 3, "sortText": "z", "filterText": "sorted", "insertText": "sorted(${1:iterable})$0", "insertTextFormat": 2}, {"label": "staticmethod", "kind": 7, "sortText": "z", "filterText": "staticmethod", "insertText": "staticmethod(${1:f})$0", "insertTextFormat": 2}, {"label": "StopAsyncIteration", "kind": 7, "sortText": "z", "filterText": "StopAsyncIteration", "insertText": "StopAsyncIteration($0)", "insertTextFormat": 2}, {"label": "StopIteration", "kind": 7, "sortText": "z", "filterText": "StopIteration", "insertText": "StopIteration($0)", "insertTextFormat": 2}, {"label": "str", "kind": 7, "sortText": "z", "filterText": "str", "insertText": "str($0)", "insertTextFormat": 2}, {"label": "sum", "kind": 3, "sortText": "z", "filterText": "sum", "insertText": "sum(${1:iterable})$0", "insertTextFormat": 2}, {"label": "super", "kind": 7, "sortText": "z", "filterText": "super", "insertText": "super(${1:t}, ${2:obj})$0", "insertTextFormat": 2}, {"label": "SyntaxError", "kind": 7, "sortText": "z", "filterText": "SyntaxError", "insertText": "SyntaxError($0)", "insertTextFormat": 2}, {"label": "SyntaxWarning", "kind": 7, "sortText": "z", "filterText": "SyntaxWarning", "insertText": "SyntaxWarning($0)", "insertTextFormat": 2}, {"label": "SystemError", "kind": 7, "sortText": "z", "filterText": "SystemError", "insertText": "SystemError($0)", "insertTextFormat": 2}, {"label": "SystemExit", "kind": 7, "sortText": "z", "filterText": "SystemExit", "insertText": "SystemExit($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 31, "character": 0}, "end": {"line": 31, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 125, "result": {"label": "songs", "kind": 6, "detail": "songs = set()", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "songs", "insertText": "songs", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 126, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 31, "character": 0}, "end": {"line": 31, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 127, "result": {"label": "set", "kind": 7, "detail": "class set", "documentation": {"kind": "markdown", "value": "```text\nset(iterable: Iterable[_T]=...)\n\nset() -> new empty set object\nset(iterable) -> new set object\n\nBuild an unordered collection of unique elements.\n```"}, "sortText": "z", "filterText": "set", "insertText": "set($0)", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 31, "character": 0}, "end": {"line": 31, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 31, "character": 0}, "end": {"line": 31, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 128, "result": {"isIncomplete": false, "items": [{"label": "abs", "kind": 3, "sortText": "z", "filterText": "abs", "insertText": "abs(${1:n})$0", "insertTextFormat": 2}, {"label": "albums", "kind": 6, "sortText": "z", "filterText": "albums", "insertText": "albums", "insertTextFormat": 1}, {"label": "albums=", "kind": 6, "sortText": "a", "filterText": "albums=", "insertText": "albums=", "insertTextFormat": 1}, {"label": "all", "kind": 3, "sortText": "z", "filterText": "all", "insertText": "all(${1:i})$0", "insertTextFormat": 2}, {"label": "any", "kind": 3, "sortText": "z", "filterText": "any", "insertText": "any(${1:i})$0", "insertTextFormat": 2}, {"label": "ArithmeticError", "kind": 7, "sortText": "z", "filterText": "ArithmeticError", "insertText": "ArithmeticError($0)", "insertTextFormat": 2}, {"label": "ascii", "kind": 3, "sortText": "z", "filterText": "ascii", "insertText": "ascii(${1:o})$0", "insertTextFormat": 2}, {"label": "AssertionError", "kind": 7, "sortText": "z", "filterText": "AssertionError", "insertText": "AssertionError($0)", "insertTextFormat": 2}, {"label": "AttributeError", "kind": 7, "sortText": "z", "filterText": "AttributeError", "insertText": "AttributeError($0)", "insertTextFormat": 2}, {"label": "await", "kind": 14, "sortText": "z", "filterText": "await", "insertText": "await", "insertTextFormat": 1}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 31, "character": 0}, "end": {"line": 31, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 129, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 130, "result": {"label": "albums=", "kind": 6, "detail": "param albums", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "a", "filterText": "albums=", "insertText": "albums=", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 131, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 31, "character": 0}, "end": {"line": 31, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 31, "character": 0}, "end": {"line": 31, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 31, "character": 0}, "end": {"line": 31, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 31, "character": 0}, "end": {"line": 31, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 132, "result": {"label": "albums", "kind": 6, "detail": "param albums", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "albums", "insertText": "albums", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 133, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 134, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 135, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 19, "character": 30}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 136, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 19, "character": 30}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 137, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 138, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 139, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 19, "character": 30}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 140, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 141, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 142, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 9, "character": 57}, "end": {"line": 9, "character": 58}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 10, "character": 0}, "end": {"line": 10, "character": 12}}, "message": "IndentationError: unexpected indent", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 143, "result": {"isIncomplete": false, "items": [{"label": "object", "kind": 7, "sortText": "z", "filterText": "object", "insertText": "object()$0", "insertTextFormat": 2}, {"label": "oct", "kind": 3, "sortText": "z", "filterText": "oct", "insertText": "oct(${1:i})$0", "insertTextFormat": 2}, {"label": "open", "kind": 3, "sortText": "z", "filterText": "open", "insertText": "open(${1:file})$0", "insertTextFormat": 2}, {"label": "ord", "kind": 3, "sortText": "z", "filterText": "ord", "insertText": "ord(${1:c})$0", "insertTextFormat": 2}, {"label": "os", "kind": 9, "sortText": "z", "filterText": "os", "insertText": "os", "insertTextFormat": 1}, {"label": "OSError", "kind": 7, "sortText": "z", "filterText": "OSError", "insertText": "OSError($0)", "insertTextFormat": 2}, {"label": "OverflowError", "kind": 7, "sortText": "z", "filterText": "OverflowError", "insertText": "OverflowError($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 144, "result": {"label": "object", "kind": 7, "detail": "class object", "documentation": {"kind": "markdown", "value": "```text\nobject()\n\nThe base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.\n```"}, "sortText": "z", "filterText": "object", "insertText": "object()$0", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 9, "character": 59}, "end": {"line": 9, "character": 60}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 10, "character": 0}, "end": {"line": 10, "character": 12}}, "message": "IndentationError: unexpected indent", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 145, "result": {"label": "ord", "kind": 3, "detail": "def ord", "documentation": {"kind": "markdown", "value": "```text\nord(c: Union[Text, bytes], /) -> int\n\nReturn the Unicode code point for a one-character string.\n```"}, "sortText": "z", "filterText": "ord", "insertText": "ord(${1:c})$0", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 9, "character": 60}, "end": {"line": 9, "character": 61}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 10, "character": 0}, "end": {"line": 10, "character": 12}}, "message": "IndentationError: unexpected indent", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 146, "result": {"isIncomplete": false, "items": [{"label": "callable", "kind": 3, "sortText": "z", "filterText": "callable", "insertText": "callable(${1:o})$0", "insertTextFormat": 2}, {"label": "ChildProcessError", "kind": 7, "sortText": "z", "filterText": "ChildProcessError", "insertText": "ChildProcessError($0)", "insertTextFormat": 2}, {"label": "chr", "kind": 3, "sortText": "z", "filterText": "chr", "insertText": "chr(${1:code})$0", "insertTextFormat": 2}, {"label": "classmethod", "kind": 7, "sortText": "z", "filterText": "classmethod", "insertText": "classmethod(${1:f})$0", "insertTextFormat": 2}, {"label": "compile", "kind": 3, "sortText": "z", "filterText": "compile", "insertText": "compile(${1:source}, ${2:filename}, ${3:mode})$0", "insertTextFormat": 2}, {"label": "complex", "kind": 7, "sortText": "z", "filterText": "complex", "insertText": "complex($0)", "insertTextFormat": 2}, {"label": "ConnectionAbortedError", "kind": 7, "sortText": "z", "filterText": "ConnectionAbortedError", "insertText": "ConnectionAbortedError($0)", "insertTextFormat": 2}, {"label": "ConnectionError", "kind": 7, "sortText": "z", "filterText": "ConnectionError", "insertText": "ConnectionError($0)", "insertTextFormat": 2}, {"label": "ConnectionRefusedError", "kind": 7, "sortText": "z", "filterText": "ConnectionRefusedError", "insertText": "ConnectionRefusedError($0)", "insertTextFormat": 2}, {"label": "ConnectionResetError", "kind": 7, "sortText": "z", "filterText": "ConnectionResetError", "insertText": "ConnectionResetError($0)", "insertTextFormat": 2}, {"label": "contains_directory", "kind": 6, "sortText": "z", "filterText": "contains_directory", "insertText": "contains_directory", "insertTextFormat": 1}, {"label": "copyright", "kind": 3, "sortText": "z", "filterText": "copyright", "insertText": "copyright()$0", "insertTextFormat": 2}, {"label": "credits", "kind": 3, "sortText": "z", "filterText": "credits", "insertText": "credits()$0", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 147, "result": {"label": "contains_directory", "kind": 6, "detail": "contains_directory = False", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "contains_directory", "insertText": "contains_directory", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 148, "result": {"label": "ConnectionRefusedError", "kind": 7, "detail": "class ConnectionRefusedError", "documentation": {"kind": "markdown", "value": "```text\nConnectionRefusedError(*args: object)\n\nConnection refused.\n```"}, "sortText": "z", "filterText": "ConnectionRefusedError", "insertText": "ConnectionRefusedError($0)", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 149, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 150, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 151, "result": {"label": "callable", "kind": 3, "detail": "def callable", "documentation": {"kind": "markdown", "value": "```text\ncallable(o: object, /) -> bool\n\nReturn whether the object is callable (i.e., some kind of function).\n\nNote that classes are callable, as are instances of classes with a\n__call__() method.\n```"}, "sortText": "z", "filterText": "callable", "insertText": "callable(${1:o})$0", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 9, "character": 60}, "end": {"line": 9, "character": 61}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 10, "character": 0}, "end": {"line": 10, "character": 12}}, "message": "IndentationError: unexpected indent", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 152, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 9, "character": 59}, "end": {"line": 9, "character": 60}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 10, "character": 0}, "end": {"line": 10, "character": 12}}, "message": "IndentationError: unexpected indent", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 153, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 9, "character": 57}, "end": {"line": 9, "character": 58}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 10, "character": 0}, "end": {"line": 10, "character": 12}}, "message": "IndentationError: unexpected indent", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 154, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 155, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 156, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 19, "character": 30}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 157, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 158, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 159, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 19, "character": 30}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 160, "result": {"isIncomplete": false, "items": [{"label": "abs", "kind": 3, "sortText": "z", "filterText": "abs", "insertText": "abs(${1:n})$0", "insertTextFormat": 2}, {"label": "albums", "kind": 6, "sortText": "z", "filterText": "albums", "insertText": "albums", "insertTextFormat": 1}, {"label": "all", "kind": 3, "sortText": "z", "filterText": "all", "insertText": "all(${1:i})$0", "insertTextFormat": 2}, {"label": "any", "kind": 3, "sortText": "z", "filterText": "any", "insertText": "any(${1:i})$0", "insertTextFormat": 2}, {"label": "ArithmeticError", "kind": 7, "sortText": "z", "filterText": "ArithmeticError", "insertText": "ArithmeticError($0)", "insertTextFormat": 2}, {"label": "ascii", "kind": 3, "sortText": "z", "filterText": "ascii", "insertText": "ascii(${1:o})$0", "insertTextFormat": 2}, {"label": "assert", "kind": 14, "sortText": "z", "filterText": "assert", "insertText": "assert", "insertTextFormat": 1}, {"label": "AssertionError", "kind": 7, "sortText": "z", "filterText": "AssertionError", "insertText": "AssertionError($0)", "insertTextFormat": 2}, {"label": "async", "kind": 14, "sortText": "z", "filterText": "async", "insertText": "async", "insertTextFormat": 1}, {"label": "AttributeError", "kind": 7, "sortText": "z", "filterText": "AttributeError", "insertText": "AttributeError($0)", "insertTextFormat": 2}, {"label": "await", "kind": 14, "sortText": "z", "filterText": "await", "insertText": "await", "insertTextFormat": 1}, {"label": "BaseException", "kind": 7, "sortText": "z", "filterText": "BaseException", "insertText": "BaseException($0)", "insertTextFormat": 2}, {"label": "bin", "kind": 3, "sortText": "z", "filterText": "bin", "insertText": "bin(${1:number})$0", "insertTextFormat": 2}, {"label": "BlockingIOError", "kind": 7, "sortText": "z", "filterText": "BlockingIOError", "insertText": "BlockingIOError($0)", "insertTextFormat": 2}, {"label": "bool", "kind": 7, "sortText": "z", "filterText": "bool", "insertText": "bool($0)", "insertTextFormat": 2}, {"label": "break", "kind": 14, "sortText": "z", "filterText": "break", "insertText": "break", "insertTextFormat": 1}, {"label": "breakpoint", "kind": 3, "sortText": "z", "filterText": "breakpoint", "insertText": "breakpoint($0)", "insertTextFormat": 2}, {"label": "BrokenPipeError", "kind": 7, "sortText": "z", "filterText": "BrokenPipeError", "insertText": "BrokenPipeError($0)", "insertTextFormat": 2}, {"label": "BufferError", "kind": 7, "sortText": "z", "filterText": "BufferError", "insertText": "BufferError($0)", "insertTextFormat": 2}, {"label": "bytearray", "kind": 7, "sortText": "z", "filterText": "bytearray", "insertText": "bytearray()$0", "insertTextFormat": 2}, {"label": "bytes", "kind": 7, "sortText": "z", "filterText": "bytes", "insertText": "bytes(${1:ints})$0", "insertTextFormat": 2}, {"label": "BytesWarning", "kind": 7, "sortText": "z", "filterText": "BytesWarning", "insertText": "BytesWarning($0)", "insertTextFormat": 2}, {"label": "callable", "kind": 3, "sortText": "z", "filterText": "callable", "insertText": "callable(${1:o})$0", "insertTextFormat": 2}, {"label": "ChildProcessError", "kind": 7, "sortText": "z", "filterText": "ChildProcessError", "insertText": "ChildProcessError($0)", "insertTextFormat": 2}, {"label": "chr", "kind": 3, "sortText": "z", "filterText": "chr", "insertText": "chr(${1:code})$0", "insertTextFormat": 2}, {"label": "class", "kind": 14, "sortText": "z", "filterText": "class", "insertText": "class", "insertTextFormat": 1}, {"label": "classmethod", "kind": 7, "sortText": "z", "filterText": "classmethod", "insertText": "classmethod(${1:f})$0", "insertTextFormat": 2}, {"label": "compile", "kind": 3, "sortText": "z", "filterText": "compile", "insertText": "compile(${1:source}, ${2:filename}, ${3:mode})$0", "insertTextFormat": 2}, {"label": "complex", "kind": 7, "sortText": "z", "filterText": "complex", "insertText": "complex($0)", "insertTextFormat": 2}, {"label": "ConnectionAbortedError", "kind": 7, "sortText": "z", "filterText": "ConnectionAbortedError", "insertText": "ConnectionAbortedError($0)", "insertTextFormat": 2}, {"label": "ConnectionError", "kind": 7, "sortText": "z", "filterText": "ConnectionError", "insertText": "ConnectionError($0)", "insertTextFormat": 2}, {"label": "ConnectionRefusedError", "kind": 7, "sortText": "z", "filterText": "ConnectionRefusedError", "insertText": "ConnectionRefusedError($0)", "insertTextFormat": 2}, {"label": "ConnectionResetError", "kind": 7, "sortText": "z", "filterText": "ConnectionResetError", "insertText": "ConnectionResetError($0)", "insertTextFormat": 2}, {"label": "contains_directory", "kind": 6, "sortText": "z", "filterText": "contains_directory", "insertText": "contains_directory", "insertTextFormat": 1}, {"label": "continue", "kind": 14, "sortText": "z", "filterText": "continue", "insertText": "continue", "insertTextFormat": 1}, {"label": "copyright", "kind": 3, "sortText": "z", "filterText": "copyright", "insertText": "copyright()$0", "insertTextFormat": 2}, {"label": "credits", "kind": 3, "sortText": "z", "filterText": "credits", "insertText": "credits()$0", "insertTextFormat": 2}, {"label": "def", "kind": 14, "sortText": "z", "filterText": "def", "insertText": "def", "insertTextFormat": 1}, {"label": "del", "kind": 14, "sortText": "z", "filterText": "del", "insertText": "del", "insertTextFormat": 1}, {"label": "delattr", "kind": 3, "sortText": "z", "filterText": "delattr", "insertText": "delattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "DeprecationWarning", "kind": 7, "sortText": "z", "filterText": "DeprecationWarning", "insertText": "DeprecationWarning($0)", "insertTextFormat": 2}, {"label": "dict", "kind": 7, "sortText": "z", "filterText": "dict", "insertText": "dict($0)", "insertTextFormat": 2}, {"label": "dir", "kind": 6, "sortText": "z", "filterText": "dir", "insertText": "dir", "insertTextFormat": 1}, {"label": "directory", "kind": 6, "sortText": "z", "filterText": "directory", "insertText": "directory", "insertTextFormat": 1}, {"label": "dirs", "kind": 6, "sortText": "z", "filterText": "dirs", "insertText": "dirs", "insertTextFormat": 1}, {"label": "divmod", "kind": 3, "sortText": "z", "filterText": "divmod", "insertText": "divmod(${1:a}, ${2:b})$0", "insertTextFormat": 2}, {"label": "ellipsis", "kind": 7, "sortText": "z", "filterText": "ellipsis", "insertText": "ellipsis()$0", "insertTextFormat": 2}, {"label": "Ellipsis", "kind": 6, "sortText": "z", "filterText": "Ellipsis", "insertText": "Ellipsis", "insertTextFormat": 1}, {"label": "else", "kind": 14, "sortText": "z", "filterText": "else", "insertText": "else", "insertTextFormat": 1}, {"label": "enumerate", "kind": 7, "sortText": "z", "filterText": "enumerate", "insertText": "enumerate(${1:iterable})$0", "insertTextFormat": 2}, {"label": "EnvironmentError", "kind": 6, "sortText": "z", "filterText": "EnvironmentError", "insertText": "EnvironmentError", "insertTextFormat": 1}, {"label": "EOFError", "kind": 7, "sortText": "z", "filterText": "EOFError", "insertText": "EOFError($0)", "insertTextFormat": 2}, {"label": "eval", "kind": 3, "sortText": "z", "filterText": "eval", "insertText": "eval(${1:source})$0", "insertTextFormat": 2}, {"label": "Exception", "kind": 7, "sortText": "z", "filterText": "Exception", "insertText": "Exception($0)", "insertTextFormat": 2}, {"label": "exec", "kind": 3, "sortText": "z", "filterText": "exec", "insertText": "exec(${1:object})$0", "insertTextFormat": 2}, {"label": "exit", "kind": 3, "sortText": "z", "filterText": "exit", "insertText": "exit($0)", "insertTextFormat": 2}, {"label": "False", "kind": 14, "sortText": "z", "filterText": "False", "insertText": "False", "insertTextFormat": 1}, {"label": "FileExistsError", "kind": 7, "sortText": "z", "filterText": "FileExistsError", "insertText": "FileExistsError($0)", "insertTextFormat": 2}, {"label": "filename", "kind": 6, "sortText": "z", "filterText": "filename", "insertText": "filename", "insertTextFormat": 1}, {"label": "FileNotFoundError", "kind": 7, "sortText": "z", "filterText": "FileNotFoundError", "insertText": "FileNotFoundError($0)", "insertTextFormat": 2}, {"label": "filter", "kind": 3, "sortText": "z", "filterText": "filter", "insertText": "filter(${1:function}, ${2:iterable})$0", "insertTextFormat": 2}, {"label": "FLAC", "kind": 9, "sortText": "z", "filterText": "FLAC", "insertText": "FLAC", "insertTextFormat": 1}, {"label": "float", "kind": 7, "sortText": "z", "filterText": "float", "insertText": "float($0)", "insertTextFormat": 2}, {"label": "FloatingPointError", "kind": 7, "sortText": "z", "filterText": "FloatingPointError", "insertText": "FloatingPointError($0)", "insertTextFormat": 2}, {"label": "for", "kind": 14, "sortText": "z", "filterText": "for", "insertText": "for", "insertTextFormat": 1}, {"label": "format", "kind": 3, "sortText": "z", "filterText": "format", "insertText": "format(${1:o})$0", "insertTextFormat": 2}, {"label": "from", "kind": 14, "sortText": "z", "filterText": "from", "insertText": "from", "insertTextFormat": 1}, {"label": "frozenset", "kind": 7, "sortText": "z", "filterText": "frozenset", "insertText": "frozenset($0)", "insertTextFormat": 2}, {"label": "FutureWarning", "kind": 7, "sortText": "z", "filterText": "FutureWarning", "insertText": "FutureWarning($0)", "insertTextFormat": 2}, {"label": "GeneratorExit", "kind": 7, "sortText": "z", "filterText": "GeneratorExit", "insertText": "GeneratorExit($0)", "insertTextFormat": 2}, {"label": "get_songs", "kind": 3, "sortText": "z", "filterText": "get_songs", "insertText": "get_songs(${1:directory}, ${2:albums})$0", "insertTextFormat": 2}, {"label": "getattr", "kind": 3, "sortText": "z", "filterText": "getattr", "insertText": "getattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "global", "kind": 14, "sortText": "z", "filterText": "global", "insertText": "global", "insertTextFormat": 1}, {"label": "globals", "kind": 3, "sortText": "z", "filterText": "globals", "insertText": "globals()$0", "insertTextFormat": 2}, {"label": "hasattr", "kind": 3, "sortText": "z", "filterText": "hasattr", "insertText": "hasattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "hash", "kind": 3, "sortText": "z", "filterText": "hash", "insertText": "hash(${1:o})$0", "insertTextFormat": 2}, {"label": "help", "kind": 3, "sortText": "z", "filterText": "help", "insertText": "help($0)", "insertTextFormat": 2}, {"label": "hex", "kind": 3, "sortText": "z", "filterText": "hex", "insertText": "hex(${1:i})$0", "insertTextFormat": 2}, {"label": "id", "kind": 3, "sortText": "z", "filterText": "id", "insertText": "id(${1:o})$0", "insertTextFormat": 2}, {"label": "if", "kind": 14, "sortText": "z", "filterText": "if", "insertText": "if", "insertTextFormat": 1}, {"label": "import", "kind": 14, "sortText": "z", "filterText": "import", "insertText": "import", "insertTextFormat": 1}, {"label": "ImportError", "kind": 7, "sortText": "z", "filterText": "ImportError", "insertText": "ImportError($0)", "insertTextFormat": 2}, {"label": "ImportWarning", "kind": 7, "sortText": "z", "filterText": "ImportWarning", "insertText": "ImportWarning($0)", "insertTextFormat": 2}, {"label": "IndentationError", "kind": 7, "sortText": "z", "filterText": "IndentationError", "insertText": "IndentationError($0)", "insertTextFormat": 2}, {"label": "IndexError", "kind": 7, "sortText": "z", "filterText": "IndexError", "insertText": "IndexError($0)", "insertTextFormat": 2}, {"label": "input", "kind": 3, "sortText": "z", "filterText": "input", "insertText": "input($0)", "insertTextFormat": 2}, {"label": "int", "kind": 7, "sortText": "z", "filterText": "int", "insertText": "int($0)", "insertTextFormat": 2}, {"label": "InterruptedError", "kind": 7, "sortText": "z", "filterText": "InterruptedError", "insertText": "InterruptedError($0)", "insertTextFormat": 2}, {"label": "IOError", "kind": 6, "sortText": "z", "filterText": "IOError", "insertText": "IOError", "insertTextFormat": 1}, {"label": "IsADirectoryError", "kind": 7, "sortText": "z", "filterText": "IsADirectoryError", "insertText": "IsADirectoryError($0)", "insertTextFormat": 2}, {"label": "isinstance", "kind": 3, "sortText": "z", "filterText": "isinstance", "insertText": "isinstance(${1:o}, ${2:t})$0", "insertTextFormat": 2}, {"label": "issubclass", "kind": 3, "sortText": "z", "filterText": "issubclass", "insertText": "issubclass(${1:cls}, ${2:classinfo})$0", "insertTextFormat": 2}, {"label": "iter", "kind": 3, "sortText": "z", "filterText": "iter", "insertText": "iter(${1:iterable})$0", "insertTextFormat": 2}, {"label": "KeyboardInterrupt", "kind": 7, "sortText": "z", "filterText": "KeyboardInterrupt", "insertText": "KeyboardInterrupt($0)", "insertTextFormat": 2}, {"label": "KeyError", "kind": 7, "sortText": "z", "filterText": "KeyError", "insertText": "KeyError($0)", "insertTextFormat": 2}, {"label": "lambda", "kind": 14, "sortText": "z", "filterText": "lambda", "insertText": "lambda", "insertTextFormat": 1}, {"label": "len", "kind": 3, "sortText": "z", "filterText": "len", "insertText": "len(${1:o})$0", "insertTextFormat": 2}, {"label": "license", "kind": 3, "sortText": "z", "filterText": "license", "insertText": "license()$0", "insertTextFormat": 2}, {"label": "list", "kind": 7, "sortText": "z", "filterText": "list", "insertText": "list()$0", "insertTextFormat": 2}, {"label": "locals", "kind": 3, "sortText": "z", "filterText": "locals", "insertText": "locals()$0", "insertTextFormat": 2}, {"label": "LookupError", "kind": 7, "sortText": "z", "filterText": "LookupError", "insertText": "LookupError($0)", "insertTextFormat": 2}, {"label": "map", "kind": 3, "sortText": "z", "filterText": "map", "insertText": "map(${1:func}, ${2:iter1})$0", "insertTextFormat": 2}, {"label": "max", "kind": 3, "sortText": "z", "filterText": "max", "insertText": "max(${1:arg1}, ${2:arg2})$0", "insertTextFormat": 2}, {"label": "MemoryError", "kind": 7, "sortText": "z", "filterText": "MemoryError", "insertText": "MemoryError($0)", "insertTextFormat": 2}, {"label": "memoryview", "kind": 7, "sortText": "z", "filterText": "memoryview", "insertText": "memoryview(${1:obj})$0", "insertTextFormat": 2}, {"label": "min", "kind": 3, "sortText": "z", "filterText": "min", "insertText": "min(${1:arg1}, ${2:arg2})$0", "insertTextFormat": 2}, {"label": "ModuleNotFoundError", "kind": 7, "sortText": "z", "filterText": "ModuleNotFoundError", "insertText": "ModuleNotFoundError($0)", "insertTextFormat": 2}, {"label": "NameError", "kind": 7, "sortText": "z", "filterText": "NameError", "insertText": "NameError($0)", "insertTextFormat": 2}, {"label": "next", "kind": 3, "sortText": "z", "filterText": "next", "insertText": "next(${1:i})$0", "insertTextFormat": 2}, {"label": "None", "kind": 14, "sortText": "z", "filterText": "None", "insertText": "None", "insertTextFormat": 1}, {"label": "nonlocal", "kind": 14, "sortText": "z", "filterText": "nonlocal", "insertText": "nonlocal", "insertTextFormat": 1}, {"label": "not", "kind": 14, "sortText": "z", "filterText": "not", "insertText": "not", "insertTextFormat": 1}, {"label": "NotADirectoryError", "kind": 7, "sortText": "z", "filterText": "NotADirectoryError", "insertText": "NotADirectoryError($0)", "insertTextFormat": 2}, {"label": "NotImplemented", "kind": 6, "sortText": "z", "filterText": "NotImplemented", "insertText": "NotImplemented", "insertTextFormat": 1}, {"label": "NotImplementedError", "kind": 7, "sortText": "z", "filterText": "NotImplementedError", "insertText": "NotImplementedError($0)", "insertTextFormat": 2}, {"label": "object", "kind": 7, "sortText": "z", "filterText": "object", "insertText": "object()$0", "insertTextFormat": 2}, {"label": "oct", "kind": 3, "sortText": "z", "filterText": "oct", "insertText": "oct(${1:i})$0", "insertTextFormat": 2}, {"label": "open", "kind": 3, "sortText": "z", "filterText": "open", "insertText": "open(${1:file})$0", "insertTextFormat": 2}, {"label": "ord", "kind": 3, "sortText": "z", "filterText": "ord", "insertText": "ord(${1:c})$0", "insertTextFormat": 2}, {"label": "os", "kind": 9, "sortText": "z", "filterText": "os", "insertText": "os", "insertTextFormat": 1}, {"label": "OSError", "kind": 7, "sortText": "z", "filterText": "OSError", "insertText": "OSError($0)", "insertTextFormat": 2}, {"label": "OverflowError", "kind": 7, "sortText": "z", "filterText": "OverflowError", "insertText": "OverflowError($0)", "insertTextFormat": 2}, {"label": "pass", "kind": 14, "sortText": "z", "filterText": "pass", "insertText": "pass", "insertTextFormat": 1}, {"label": "PendingDeprecationWarning", "kind": 7, "sortText": "z", "filterText": "PendingDeprecationWarning", "insertText": "PendingDeprecationWarning($0)", "insertTextFormat": 2}, {"label": "PermissionError", "kind": 7, "sortText": "z", "filterText": "PermissionError", "insertText": "PermissionError($0)", "insertTextFormat": 2}, {"label": "pow", "kind": 3, "sortText": "z", "filterText": "pow", "insertText": "pow(${1:x}, ${2:y})$0", "insertTextFormat": 2}, {"label": "print", "kind": 3, "sortText": "z", "filterText": "print", "insertText": "print($0)", "insertTextFormat": 2}, {"label": "ProcessLookupError", "kind": 7, "sortText": "z", "filterText": "ProcessLookupError", "insertText": "ProcessLookupError($0)", "insertTextFormat": 2}, {"label": "property", "kind": 7, "sortText": "z", "filterText": "property", "insertText": "property($0)", "insertTextFormat": 2}, {"label": "quit", "kind": 3, "sortText": "z", "filterText": "quit", "insertText": "quit($0)", "insertTextFormat": 2}, {"label": "raise", "kind": 14, "sortText": "z", "filterText": "raise", "insertText": "raise", "insertTextFormat": 1}, {"label": "range", "kind": 7, "sortText": "z", "filterText": "range", "insertText": "range(${1:stop})$0", "insertTextFormat": 2}, {"label": "RecursionError", "kind": 7, "sortText": "z", "filterText": "RecursionError", "insertText": "RecursionError($0)", "insertTextFormat": 2}, {"label": "ReferenceError", "kind": 7, "sortText": "z", "filterText": "ReferenceError", "insertText": "ReferenceError($0)", "insertTextFormat": 2}, {"label": "repr", "kind": 3, "sortText": "z", "filterText": "repr", "insertText": "repr(${1:o})$0", "insertTextFormat": 2}, {"label": "ResourceWarning", "kind": 7, "sortText": "z", "filterText": "ResourceWarning", "insertText": "ResourceWarning($0)", "insertTextFormat": 2}, {"label": "return", "kind": 14, "sortText": "z", "filterText": "return", "insertText": "return", "insertTextFormat": 1}, {"label": "reversed", "kind": 3, "sortText": "z", "filterText": "reversed", "insertText": "reversed(${1:object})$0", "insertTextFormat": 2}, {"label": "round", "kind": 3, "sortText": "z", "filterText": "round", "insertText": "round(${1:number})$0", "insertTextFormat": 2}, {"label": "RuntimeError", "kind": 7, "sortText": "z", "filterText": "RuntimeError", "insertText": "RuntimeError($0)", "insertTextFormat": 2}, {"label": "RuntimeWarning", "kind": 7, "sortText": "z", "filterText": "RuntimeWarning", "insertText": "RuntimeWarning($0)", "insertTextFormat": 2}, {"label": "set", "kind": 7, "sortText": "z", "filterText": "set", "insertText": "set($0)", "insertTextFormat": 2}, {"label": "setattr", "kind": 3, "sortText": "z", "filterText": "setattr", "insertText": "setattr(${1:object}, ${2:name}, ${3:value})$0", "insertTextFormat": 2}, {"label": "slice", "kind": 7, "sortText": "z", "filterText": "slice", "insertText": "slice(${1:stop})$0", "insertTextFormat": 2}, {"label": "songs", "kind": 6, "sortText": "z", "filterText": "songs", "insertText": "songs", "insertTextFormat": 1}, {"label": "sorted", "kind": 3, "sortText": "z", "filterText": "sorted", "insertText": "sorted(${1:iterable})$0", "insertTextFormat": 2}, {"label": "staticmethod", "kind": 7, "sortText": "z", "filterText": "staticmethod", "insertText": "staticmethod(${1:f})$0", "insertTextFormat": 2}, {"label": "StopAsyncIteration", "kind": 7, "sortText": "z", "filterText": "StopAsyncIteration", "insertText": "StopAsyncIteration($0)", "insertTextFormat": 2}, {"label": "StopIteration", "kind": 7, "sortText": "z", "filterText": "StopIteration", "insertText": "StopIteration($0)", "insertTextFormat": 2}, {"label": "str", "kind": 7, "sortText": "z", "filterText": "str", "insertText": "str($0)", "insertTextFormat": 2}, {"label": "sum", "kind": 3, "sortText": "z", "filterText": "sum", "insertText": "sum(${1:iterable})$0", "insertTextFormat": 2}, {"label": "super", "kind": 7, "sortText": "z", "filterText": "super", "insertText": "super(${1:t}, ${2:obj})$0", "insertTextFormat": 2}, {"label": "SyntaxError", "kind": 7, "sortText": "z", "filterText": "SyntaxError", "insertText": "SyntaxError($0)", "insertTextFormat": 2}, {"label": "SyntaxWarning", "kind": 7, "sortText": "z", "filterText": "SyntaxWarning", "insertText": "SyntaxWarning($0)", "insertTextFormat": 2}, {"label": "SystemError", "kind": 7, "sortText": "z", "filterText": "SystemError", "insertText": "SystemError($0)", "insertTextFormat": 2}, {"label": "SystemExit", "kind": 7, "sortText": "z", "filterText": "SystemExit", "insertText": "SystemExit($0)", "insertTextFormat": 2}, {"label": "TabError", "kind": 7, "sortText": "z", "filterText": "TabError", "insertText": "TabError($0)", "insertTextFormat": 2}, {"label": "TimeoutError", "kind": 7, "sortText": "z", "filterText": "TimeoutError", "insertText": "TimeoutError($0)", "insertTextFormat": 2}, {"label": "True", "kind": 14, "sortText": "z", "filterText": "True", "insertText": "True", "insertTextFormat": 1}, {"label": "try", "kind": 14, "sortText": "z", "filterText": "try", "insertText": "try", "insertTextFormat": 1}, {"label": "tuple", "kind": 7, "sortText": "z", "filterText": "tuple", "insertText": "tuple($0)", "insertTextFormat": 2}, {"label": "type", "kind": 7, "sortText": "z", "filterText": "type", "insertText": "type(${1:o})$0", "insertTextFormat": 2}, {"label": "TypeError", "kind": 7, "sortText": "z", "filterText": "TypeError", "insertText": "TypeError($0)", "insertTextFormat": 2}, {"label": "UnboundLocalError", "kind": 7, "sortText": "z", "filterText": "UnboundLocalError", "insertText": "UnboundLocalError($0)", "insertTextFormat": 2}, {"label": "UnicodeDecodeError", "kind": 7, "sortText": "z", "filterText": "UnicodeDecodeError", "insertText": "UnicodeDecodeError(${1:encoding}, ${2:object}, ${3:start}, ${4:end}, ${5:reason})$0", "insertTextFormat": 2}, {"label": "UnicodeEncodeError", "kind": 7, "sortText": "z", "filterText": "UnicodeEncodeError", "insertText": "UnicodeEncodeError(${1:encoding}, ${2:object}, ${3:start}, ${4:end}, ${5:reason})$0", "insertTextFormat": 2}, {"label": "UnicodeError", "kind": 7, "sortText": "z", "filterText": "UnicodeError", "insertText": "UnicodeError($0)", "insertTextFormat": 2}, {"label": "UnicodeTranslateError", "kind": 7, "sortText": "z", "filterText": "UnicodeTranslateError", "insertText": "UnicodeTranslateError($0)", "insertTextFormat": 2}, {"label": "UnicodeWarning", "kind": 7, "sortText": "z", "filterText": "UnicodeWarning", "insertText": "UnicodeWarning($0)", "insertTextFormat": 2}, {"label": "UserWarning", "kind": 7, "sortText": "z", "filterText": "UserWarning", "insertText": "UserWarning($0)", "insertTextFormat": 2}, {"label": "ValueError", "kind": 7, "sortText": "z", "filterText": "ValueError", "insertText": "ValueError($0)", "insertTextFormat": 2}, {"label": "vars", "kind": 3, "sortText": "z", "filterText": "vars", "insertText": "vars($0)", "insertTextFormat": 2}, {"label": "Warning", "kind": 7, "sortText": "z", "filterText": "Warning", "insertText": "Warning($0)", "insertTextFormat": 2}, {"label": "while", "kind": 14, "sortText": "z", "filterText": "while", "insertText": "while", "insertTextFormat": 1}, {"label": "WindowsError", "kind": 7, "sortText": "z", "filterText": "WindowsError", "insertText": "WindowsError($0)", "insertTextFormat": 2}, {"label": "with", "kind": 14, "sortText": "z", "filterText": "with", "insertText": "with", "insertTextFormat": 1}, {"label": "yield", "kind": 14, "sortText": "z", "filterText": "yield", "insertText": "yield", "insertTextFormat": 1}, {"label": "ZeroDivisionError", "kind": 7, "sortText": "z", "filterText": "ZeroDivisionError", "insertText": "ZeroDivisionError($0)", "insertTextFormat": 2}, {"label": "zip", "kind": 3, "sortText": "z", "filterText": "zip", "insertText": "zip(${1:iter1})$0", "insertTextFormat": 2}, {"label": "__doc__", "kind": 6, "sortText": "z", "filterText": "__doc__", "insertText": "__doc__", "insertTextFormat": 1}, {"label": "__file__", "kind": 6, "sortText": "z", "filterText": "__file__", "insertText": "__file__", "insertTextFormat": 1}, {"label": "__import__", "kind": 3, "sortText": "z", "filterText": "__import__", "insertText": "__import__(${1:name})$0", "insertTextFormat": 2}, {"label": "__name__", "kind": 6, "sortText": "z", "filterText": "__name__", "insertText": "__name__", "insertTextFormat": 1}, {"label": "__package__", "kind": 6, "sortText": "z", "filterText": "__package__", "insertText": "__package__", "insertTextFormat": 1}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 161, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 162, "result": {"label": "KeyError", "kind": 7, "detail": "class KeyError", "documentation": {"kind": "markdown", "value": "```text\nKeyError(*args: object)\n\nMapping key not found.\n```"}, "sortText": "z", "filterText": "KeyError", "insertText": "KeyError($0)", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 163, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 19, "character": 30}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 164, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 165, "result": {"isIncomplete": false, "items": [{"label": "abs", "kind": 3, "sortText": "z", "filterText": "abs", "insertText": "abs(${1:n})$0", "insertTextFormat": 2}, {"label": "albums", "kind": 6, "sortText": "z", "filterText": "albums", "insertText": "albums", "insertTextFormat": 1}, {"label": "all", "kind": 3, "sortText": "z", "filterText": "all", "insertText": "all(${1:i})$0", "insertTextFormat": 2}, {"label": "any", "kind": 3, "sortText": "z", "filterText": "any", "insertText": "any(${1:i})$0", "insertTextFormat": 2}, {"label": "ArithmeticError", "kind": 7, "sortText": "z", "filterText": "ArithmeticError", "insertText": "ArithmeticError($0)", "insertTextFormat": 2}, {"label": "ascii", "kind": 3, "sortText": "z", "filterText": "ascii", "insertText": "ascii(${1:o})$0", "insertTextFormat": 2}, {"label": "assert", "kind": 14, "sortText": "z", "filterText": "assert", "insertText": "assert", "insertTextFormat": 1}, {"label": "AssertionError", "kind": 7, "sortText": "z", "filterText": "AssertionError", "insertText": "AssertionError($0)", "insertTextFormat": 2}, {"label": "async", "kind": 14, "sortText": "z", "filterText": "async", "insertText": "async", "insertTextFormat": 1}, {"label": "AttributeError", "kind": 7, "sortText": "z", "filterText": "AttributeError", "insertText": "AttributeError($0)", "insertTextFormat": 2}, {"label": "await", "kind": 14, "sortText": "z", "filterText": "await", "insertText": "await", "insertTextFormat": 1}, {"label": "BaseException", "kind": 7, "sortText": "z", "filterText": "BaseException", "insertText": "BaseException($0)", "insertTextFormat": 2}, {"label": "bin", "kind": 3, "sortText": "z", "filterText": "bin", "insertText": "bin(${1:number})$0", "insertTextFormat": 2}, {"label": "BlockingIOError", "kind": 7, "sortText": "z", "filterText": "BlockingIOError", "insertText": "BlockingIOError($0)", "insertTextFormat": 2}, {"label": "bool", "kind": 7, "sortText": "z", "filterText": "bool", "insertText": "bool($0)", "insertTextFormat": 2}, {"label": "break", "kind": 14, "sortText": "z", "filterText": "break", "insertText": "break", "insertTextFormat": 1}, {"label": "breakpoint", "kind": 3, "sortText": "z", "filterText": "breakpoint", "insertText": "breakpoint($0)", "insertTextFormat": 2}, {"label": "BrokenPipeError", "kind": 7, "sortText": "z", "filterText": "BrokenPipeError", "insertText": "BrokenPipeError($0)", "insertTextFormat": 2}, {"label": "BufferError", "kind": 7, "sortText": "z", "filterText": "BufferError", "insertText": "BufferError($0)", "insertTextFormat": 2}, {"label": "bytearray", "kind": 7, "sortText": "z", "filterText": "bytearray", "insertText": "bytearray()$0", "insertTextFormat": 2}, {"label": "bytes", "kind": 7, "sortText": "z", "filterText": "bytes", "insertText": "bytes(${1:ints})$0", "insertTextFormat": 2}, {"label": "BytesWarning", "kind": 7, "sortText": "z", "filterText": "BytesWarning", "insertText": "BytesWarning($0)", "insertTextFormat": 2}, {"label": "callable", "kind": 3, "sortText": "z", "filterText": "callable", "insertText": "callable(${1:o})$0", "insertTextFormat": 2}, {"label": "ChildProcessError", "kind": 7, "sortText": "z", "filterText": "ChildProcessError", "insertText": "ChildProcessError($0)", "insertTextFormat": 2}, {"label": "chr", "kind": 3, "sortText": "z", "filterText": "chr", "insertText": "chr(${1:code})$0", "insertTextFormat": 2}, {"label": "class", "kind": 14, "sortText": "z", "filterText": "class", "insertText": "class", "insertTextFormat": 1}, {"label": "classmethod", "kind": 7, "sortText": "z", "filterText": "classmethod", "insertText": "classmethod(${1:f})$0", "insertTextFormat": 2}, {"label": "compile", "kind": 3, "sortText": "z", "filterText": "compile", "insertText": "compile(${1:source}, ${2:filename}, ${3:mode})$0", "insertTextFormat": 2}, {"label": "complex", "kind": 7, "sortText": "z", "filterText": "complex", "insertText": "complex($0)", "insertTextFormat": 2}, {"label": "ConnectionAbortedError", "kind": 7, "sortText": "z", "filterText": "ConnectionAbortedError", "insertText": "ConnectionAbortedError($0)", "insertTextFormat": 2}, {"label": "ConnectionError", "kind": 7, "sortText": "z", "filterText": "ConnectionError", "insertText": "ConnectionError($0)", "insertTextFormat": 2}, {"label": "ConnectionRefusedError", "kind": 7, "sortText": "z", "filterText": "ConnectionRefusedError", "insertText": "ConnectionRefusedError($0)", "insertTextFormat": 2}, {"label": "ConnectionResetError", "kind": 7, "sortText": "z", "filterText": "ConnectionResetError", "insertText": "ConnectionResetError($0)", "insertTextFormat": 2}, {"label": "contains_directory", "kind": 6, "sortText": "z", "filterText": "contains_directory", "insertText": "contains_directory", "insertTextFormat": 1}, {"label": "continue", "kind": 14, "sortText": "z", "filterText": "continue", "insertText": "continue", "insertTextFormat": 1}, {"label": "copyright", "kind": 3, "sortText": "z", "filterText": "copyright", "insertText": "copyright()$0", "insertTextFormat": 2}, {"label": "credits", "kind": 3, "sortText": "z", "filterText": "credits", "insertText": "credits()$0", "insertTextFormat": 2}, {"label": "def", "kind": 14, "sortText": "z", "filterText": "def", "insertText": "def", "insertTextFormat": 1}, {"label": "del", "kind": 14, "sortText": "z", "filterText": "del", "insertText": "del", "insertTextFormat": 1}, {"label": "delattr", "kind": 3, "sortText": "z", "filterText": "delattr", "insertText": "delattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "DeprecationWarning", "kind": 7, "sortText": "z", "filterText": "DeprecationWarning", "insertText": "DeprecationWarning($0)", "insertTextFormat": 2}, {"label": "dict", "kind": 7, "sortText": "z", "filterText": "dict", "insertText": "dict($0)", "insertTextFormat": 2}, {"label": "dir", "kind": 6, "sortText": "z", "filterText": "dir", "insertText": "dir", "insertTextFormat": 1}, {"label": "directory", "kind": 6, "sortText": "z", "filterText": "directory", "insertText": "directory", "insertTextFormat": 1}, {"label": "dirs", "kind": 6, "sortText": "z", "filterText": "dirs", "insertText": "dirs", "insertTextFormat": 1}, {"label": "divmod", "kind": 3, "sortText": "z", "filterText": "divmod", "insertText": "divmod(${1:a}, ${2:b})$0", "insertTextFormat": 2}, {"label": "ellipsis", "kind": 7, "sortText": "z", "filterText": "ellipsis", "insertText": "ellipsis()$0", "insertTextFormat": 2}, {"label": "Ellipsis", "kind": 6, "sortText": "z", "filterText": "Ellipsis", "insertText": "Ellipsis", "insertTextFormat": 1}, {"label": "else", "kind": 14, "sortText": "z", "filterText": "else", "insertText": "else", "insertTextFormat": 1}, {"label": "enumerate", "kind": 7, "sortText": "z", "filterText": "enumerate", "insertText": "enumerate(${1:iterable})$0", "insertTextFormat": 2}, {"label": "EnvironmentError", "kind": 6, "sortText": "z", "filterText": "EnvironmentError", "insertText": "EnvironmentError", "insertTextFormat": 1}, {"label": "EOFError", "kind": 7, "sortText": "z", "filterText": "EOFError", "insertText": "EOFError($0)", "insertTextFormat": 2}, {"label": "eval", "kind": 3, "sortText": "z", "filterText": "eval", "insertText": "eval(${1:source})$0", "insertTextFormat": 2}, {"label": "Exception", "kind": 7, "sortText": "z", "filterText": "Exception", "insertText": "Exception($0)", "insertTextFormat": 2}, {"label": "exec", "kind": 3, "sortText": "z", "filterText": "exec", "insertText": "exec(${1:object})$0", "insertTextFormat": 2}, {"label": "exit", "kind": 3, "sortText": "z", "filterText": "exit", "insertText": "exit($0)", "insertTextFormat": 2}, {"label": "False", "kind": 14, "sortText": "z", "filterText": "False", "insertText": "False", "insertTextFormat": 1}, {"label": "FileExistsError", "kind": 7, "sortText": "z", "filterText": "FileExistsError", "insertText": "FileExistsError($0)", "insertTextFormat": 2}, {"label": "filename", "kind": 6, "sortText": "z", "filterText": "filename", "insertText": "filename", "insertTextFormat": 1}, {"label": "FileNotFoundError", "kind": 7, "sortText": "z", "filterText": "FileNotFoundError", "insertText": "FileNotFoundError($0)", "insertTextFormat": 2}, {"label": "filter", "kind": 3, "sortText": "z", "filterText": "filter", "insertText": "filter(${1:function}, ${2:iterable})$0", "insertTextFormat": 2}, {"label": "FLAC", "kind": 9, "sortText": "z", "filterText": "FLAC", "insertText": "FLAC", "insertTextFormat": 1}, {"label": "float", "kind": 7, "sortText": "z", "filterText": "float", "insertText": "float($0)", "insertTextFormat": 2}, {"label": "FloatingPointError", "kind": 7, "sortText": "z", "filterText": "FloatingPointError", "insertText": "FloatingPointError($0)", "insertTextFormat": 2}, {"label": "for", "kind": 14, "sortText": "z", "filterText": "for", "insertText": "for", "insertTextFormat": 1}, {"label": "format", "kind": 3, "sortText": "z", "filterText": "format", "insertText": "format(${1:o})$0", "insertTextFormat": 2}, {"label": "from", "kind": 14, "sortText": "z", "filterText": "from", "insertText": "from", "insertTextFormat": 1}, {"label": "frozenset", "kind": 7, "sortText": "z", "filterText": "frozenset", "insertText": "frozenset($0)", "insertTextFormat": 2}, {"label": "FutureWarning", "kind": 7, "sortText": "z", "filterText": "FutureWarning", "insertText": "FutureWarning($0)", "insertTextFormat": 2}, {"label": "GeneratorExit", "kind": 7, "sortText": "z", "filterText": "GeneratorExit", "insertText": "GeneratorExit($0)", "insertTextFormat": 2}, {"label": "get_songs", "kind": 3, "sortText": "z", "filterText": "get_songs", "insertText": "get_songs(${1:directory}, ${2:albums})$0", "insertTextFormat": 2}, {"label": "getattr", "kind": 3, "sortText": "z", "filterText": "getattr", "insertText": "getattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "global", "kind": 14, "sortText": "z", "filterText": "global", "insertText": "global", "insertTextFormat": 1}, {"label": "globals", "kind": 3, "sortText": "z", "filterText": "globals", "insertText": "globals()$0", "insertTextFormat": 2}, {"label": "hasattr", "kind": 3, "sortText": "z", "filterText": "hasattr", "insertText": "hasattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "hash", "kind": 3, "sortText": "z", "filterText": "hash", "insertText": "hash(${1:o})$0", "insertTextFormat": 2}, {"label": "help", "kind": 3, "sortText": "z", "filterText": "help", "insertText": "help($0)", "insertTextFormat": 2}, {"label": "hex", "kind": 3, "sortText": "z", "filterText": "hex", "insertText": "hex(${1:i})$0", "insertTextFormat": 2}, {"label": "id", "kind": 3, "sortText": "z", "filterText": "id", "insertText": "id(${1:o})$0", "insertTextFormat": 2}, {"label": "if", "kind": 14, "sortText": "z", "filterText": "if", "insertText": "if", "insertTextFormat": 1}, {"label": "import", "kind": 14, "sortText": "z", "filterText": "import", "insertText": "import", "insertTextFormat": 1}, {"label": "ImportError", "kind": 7, "sortText": "z", "filterText": "ImportError", "insertText": "ImportError($0)", "insertTextFormat": 2}, {"label": "ImportWarning", "kind": 7, "sortText": "z", "filterText": "ImportWarning", "insertText": "ImportWarning($0)", "insertTextFormat": 2}, {"label": "IndentationError", "kind": 7, "sortText": "z", "filterText": "IndentationError", "insertText": "IndentationError($0)", "insertTextFormat": 2}, {"label": "IndexError", "kind": 7, "sortText": "z", "filterText": "IndexError", "insertText": "IndexError($0)", "insertTextFormat": 2}, {"label": "input", "kind": 3, "sortText": "z", "filterText": "input", "insertText": "input($0)", "insertTextFormat": 2}, {"label": "int", "kind": 7, "sortText": "z", "filterText": "int", "insertText": "int($0)", "insertTextFormat": 2}, {"label": "InterruptedError", "kind": 7, "sortText": "z", "filterText": "InterruptedError", "insertText": "InterruptedError($0)", "insertTextFormat": 2}, {"label": "IOError", "kind": 6, "sortText": "z", "filterText": "IOError", "insertText": "IOError", "insertTextFormat": 1}, {"label": "IsADirectoryError", "kind": 7, "sortText": "z", "filterText": "IsADirectoryError", "insertText": "IsADirectoryError($0)", "insertTextFormat": 2}, {"label": "isinstance", "kind": 3, "sortText": "z", "filterText": "isinstance", "insertText": "isinstance(${1:o}, ${2:t})$0", "insertTextFormat": 2}, {"label": "issubclass", "kind": 3, "sortText": "z", "filterText": "issubclass", "insertText": "issubclass(${1:cls}, ${2:classinfo})$0", "insertTextFormat": 2}, {"label": "iter", "kind": 3, "sortText": "z", "filterText": "iter", "insertText": "iter(${1:iterable})$0", "insertTextFormat": 2}, {"label": "KeyboardInterrupt", "kind": 7, "sortText": "z", "filterText": "KeyboardInterrupt", "insertText": "KeyboardInterrupt($0)", "insertTextFormat": 2}, {"label": "KeyError", "kind": 7, "sortText": "z", "filterText": "KeyError", "insertText": "KeyError($0)", "insertTextFormat": 2}, {"label": "lambda", "kind": 14, "sortText": "z", "filterText": "lambda", "insertText": "lambda", "insertTextFormat": 1}, {"label": "len", "kind": 3, "sortText": "z", "filterText": "len", "insertText": "len(${1:o})$0", "insertTextFormat": 2}, {"label": "license", "kind": 3, "sortText": "z", "filterText": "license", "insertText": "license()$0", "insertTextFormat": 2}, {"label": "list", "kind": 7, "sortText": "z", "filterText": "list", "insertText": "list()$0", "insertTextFormat": 2}, {"label": "locals", "kind": 3, "sortText": "z", "filterText": "locals", "insertText": "locals()$0", "insertTextFormat": 2}, {"label": "LookupError", "kind": 7, "sortText": "z", "filterText": "LookupError", "insertText": "LookupError($0)", "insertTextFormat": 2}, {"label": "map", "kind": 3, "sortText": "z", "filterText": "map", "insertText": "map(${1:func}, ${2:iter1})$0", "insertTextFormat": 2}, {"label": "max", "kind": 3, "sortText": "z", "filterText": "max", "insertText": "max(${1:arg1}, ${2:arg2})$0", "insertTextFormat": 2}, {"label": "MemoryError", "kind": 7, "sortText": "z", "filterText": "MemoryError", "insertText": "MemoryError($0)", "insertTextFormat": 2}, {"label": "memoryview", "kind": 7, "sortText": "z", "filterText": "memoryview", "insertText": "memoryview(${1:obj})$0", "insertTextFormat": 2}, {"label": "min", "kind": 3, "sortText": "z", "filterText": "min", "insertText": "min(${1:arg1}, ${2:arg2})$0", "insertTextFormat": 2}, {"label": "ModuleNotFoundError", "kind": 7, "sortText": "z", "filterText": "ModuleNotFoundError", "insertText": "ModuleNotFoundError($0)", "insertTextFormat": 2}, {"label": "NameError", "kind": 7, "sortText": "z", "filterText": "NameError", "insertText": "NameError($0)", "insertTextFormat": 2}, {"label": "next", "kind": 3, "sortText": "z", "filterText": "next", "insertText": "next(${1:i})$0", "insertTextFormat": 2}, {"label": "None", "kind": 14, "sortText": "z", "filterText": "None", "insertText": "None", "insertTextFormat": 1}, {"label": "nonlocal", "kind": 14, "sortText": "z", "filterText": "nonlocal", "insertText": "nonlocal", "insertTextFormat": 1}, {"label": "not", "kind": 14, "sortText": "z", "filterText": "not", "insertText": "not", "insertTextFormat": 1}, {"label": "NotADirectoryError", "kind": 7, "sortText": "z", "filterText": "NotADirectoryError", "insertText": "NotADirectoryError($0)", "insertTextFormat": 2}, {"label": "NotImplemented", "kind": 6, "sortText": "z", "filterText": "NotImplemented", "insertText": "NotImplemented", "insertTextFormat": 1}, {"label": "NotImplementedError", "kind": 7, "sortText": "z", "filterText": "NotImplementedError", "insertText": "NotImplementedError($0)", "insertTextFormat": 2}, {"label": "object", "kind": 7, "sortText": "z", "filterText": "object", "insertText": "object()$0", "insertTextFormat": 2}, {"label": "oct", "kind": 3, "sortText": "z", "filterText": "oct", "insertText": "oct(${1:i})$0", "insertTextFormat": 2}, {"label": "open", "kind": 3, "sortText": "z", "filterText": "open", "insertText": "open(${1:file})$0", "insertTextFormat": 2}, {"label": "ord", "kind": 3, "sortText": "z", "filterText": "ord", "insertText": "ord(${1:c})$0", "insertTextFormat": 2}, {"label": "os", "kind": 9, "sortText": "z", "filterText": "os", "insertText": "os", "insertTextFormat": 1}, {"label": "OSError", "kind": 7, "sortText": "z", "filterText": "OSError", "insertText": "OSError($0)", "insertTextFormat": 2}, {"label": "OverflowError", "kind": 7, "sortText": "z", "filterText": "OverflowError", "insertText": "OverflowError($0)", "insertTextFormat": 2}, {"label": "pass", "kind": 14, "sortText": "z", "filterText": "pass", "insertText": "pass", "insertTextFormat": 1}, {"label": "PendingDeprecationWarning", "kind": 7, "sortText": "z", "filterText": "PendingDeprecationWarning", "insertText": "PendingDeprecationWarning($0)", "insertTextFormat": 2}, {"label": "PermissionError", "kind": 7, "sortText": "z", "filterText": "PermissionError", "insertText": "PermissionError($0)", "insertTextFormat": 2}, {"label": "pow", "kind": 3, "sortText": "z", "filterText": "pow", "insertText": "pow(${1:x}, ${2:y})$0", "insertTextFormat": 2}, {"label": "print", "kind": 3, "sortText": "z", "filterText": "print", "insertText": "print($0)", "insertTextFormat": 2}, {"label": "ProcessLookupError", "kind": 7, "sortText": "z", "filterText": "ProcessLookupError", "insertText": "ProcessLookupError($0)", "insertTextFormat": 2}, {"label": "property", "kind": 7, "sortText": "z", "filterText": "property", "insertText": "property($0)", "insertTextFormat": 2}, {"label": "quit", "kind": 3, "sortText": "z", "filterText": "quit", "insertText": "quit($0)", "insertTextFormat": 2}, {"label": "raise", "kind": 14, "sortText": "z", "filterText": "raise", "insertText": "raise", "insertTextFormat": 1}, {"label": "range", "kind": 7, "sortText": "z", "filterText": "range", "insertText": "range(${1:stop})$0", "insertTextFormat": 2}, {"label": "RecursionError", "kind": 7, "sortText": "z", "filterText": "RecursionError", "insertText": "RecursionError($0)", "insertTextFormat": 2}, {"label": "ReferenceError", "kind": 7, "sortText": "z", "filterText": "ReferenceError", "insertText": "ReferenceError($0)", "insertTextFormat": 2}, {"label": "repr", "kind": 3, "sortText": "z", "filterText": "repr", "insertText": "repr(${1:o})$0", "insertTextFormat": 2}, {"label": "ResourceWarning", "kind": 7, "sortText": "z", "filterText": "ResourceWarning", "insertText": "ResourceWarning($0)", "insertTextFormat": 2}, {"label": "return", "kind": 14, "sortText": "z", "filterText": "return", "insertText": "return", "insertTextFormat": 1}, {"label": "reversed", "kind": 3, "sortText": "z", "filterText": "reversed", "insertText": "reversed(${1:object})$0", "insertTextFormat": 2}, {"label": "round", "kind": 3, "sortText": "z", "filterText": "round", "insertText": "round(${1:number})$0", "insertTextFormat": 2}, {"label": "RuntimeError", "kind": 7, "sortText": "z", "filterText": "RuntimeError", "insertText": "RuntimeError($0)", "insertTextFormat": 2}, {"label": "RuntimeWarning", "kind": 7, "sortText": "z", "filterText": "RuntimeWarning", "insertText": "RuntimeWarning($0)", "insertTextFormat": 2}, {"label": "set", "kind": 7, "sortText": "z", "filterText": "set", "insertText": "set($0)", "insertTextFormat": 2}, {"label": "setattr", "kind": 3, "sortText": "z", "filterText": "setattr", "insertText": "setattr(${1:object}, ${2:name}, ${3:value})$0", "insertTextFormat": 2}, {"label": "slice", "kind": 7, "sortText": "z", "filterText": "slice", "insertText": "slice(${1:stop})$0", "insertTextFormat": 2}, {"label": "songs", "kind": 6, "sortText": "z", "filterText": "songs", "insertText": "songs", "insertTextFormat": 1}, {"label": "sorted", "kind": 3, "sortText": "z", "filterText": "sorted", "insertText": "sorted(${1:iterable})$0", "insertTextFormat": 2}, {"label": "staticmethod", "kind": 7, "sortText": "z", "filterText": "staticmethod", "insertText": "staticmethod(${1:f})$0", "insertTextFormat": 2}, {"label": "StopAsyncIteration", "kind": 7, "sortText": "z", "filterText": "StopAsyncIteration", "insertText": "StopAsyncIteration($0)", "insertTextFormat": 2}, {"label": "StopIteration", "kind": 7, "sortText": "z", "filterText": "StopIteration", "insertText": "StopIteration($0)", "insertTextFormat": 2}, {"label": "str", "kind": 7, "sortText": "z", "filterText": "str", "insertText": "str($0)", "insertTextFormat": 2}, {"label": "sum", "kind": 3, "sortText": "z", "filterText": "sum", "insertText": "sum(${1:iterable})$0", "insertTextFormat": 2}, {"label": "super", "kind": 7, "sortText": "z", "filterText": "super", "insertText": "super(${1:t}, ${2:obj})$0", "insertTextFormat": 2}, {"label": "SyntaxError", "kind": 7, "sortText": "z", "filterText": "SyntaxError", "insertText": "SyntaxError($0)", "insertTextFormat": 2}, {"label": "SyntaxWarning", "kind": 7, "sortText": "z", "filterText": "SyntaxWarning", "insertText": "SyntaxWarning($0)", "insertTextFormat": 2}, {"label": "SystemError", "kind": 7, "sortText": "z", "filterText": "SystemError", "insertText": "SystemError($0)", "insertTextFormat": 2}, {"label": "SystemExit", "kind": 7, "sortText": "z", "filterText": "SystemExit", "insertText": "SystemExit($0)", "insertTextFormat": 2}, {"label": "TabError", "kind": 7, "sortText": "z", "filterText": "TabError", "insertText": "TabError($0)", "insertTextFormat": 2}, {"label": "TimeoutError", "kind": 7, "sortText": "z", "filterText": "TimeoutError", "insertText": "TimeoutError($0)", "insertTextFormat": 2}, {"label": "True", "kind": 14, "sortText": "z", "filterText": "True", "insertText": "True", "insertTextFormat": 1}, {"label": "try", "kind": 14, "sortText": "z", "filterText": "try", "insertText": "try", "insertTextFormat": 1}, {"label": "tuple", "kind": 7, "sortText": "z", "filterText": "tuple", "insertText": "tuple($0)", "insertTextFormat": 2}, {"label": "type", "kind": 7, "sortText": "z", "filterText": "type", "insertText": "type(${1:o})$0", "insertTextFormat": 2}, {"label": "TypeError", "kind": 7, "sortText": "z", "filterText": "TypeError", "insertText": "TypeError($0)", "insertTextFormat": 2}, {"label": "UnboundLocalError", "kind": 7, "sortText": "z", "filterText": "UnboundLocalError", "insertText": "UnboundLocalError($0)", "insertTextFormat": 2}, {"label": "UnicodeDecodeError", "kind": 7, "sortText": "z", "filterText": "UnicodeDecodeError", "insertText": "UnicodeDecodeError(${1:encoding}, ${2:object}, ${3:start}, ${4:end}, ${5:reason})$0", "insertTextFormat": 2}, {"label": "UnicodeEncodeError", "kind": 7, "sortText": "z", "filterText": "UnicodeEncodeError", "insertText": "UnicodeEncodeError(${1:encoding}, ${2:object}, ${3:start}, ${4:end}, ${5:reason})$0", "insertTextFormat": 2}, {"label": "UnicodeError", "kind": 7, "sortText": "z", "filterText": "UnicodeError", "insertText": "UnicodeError($0)", "insertTextFormat": 2}, {"label": "UnicodeTranslateError", "kind": 7, "sortText": "z", "filterText": "UnicodeTranslateError", "insertText": "UnicodeTranslateError($0)", "insertTextFormat": 2}, {"label": "UnicodeWarning", "kind": 7, "sortText": "z", "filterText": "UnicodeWarning", "insertText": "UnicodeWarning($0)", "insertTextFormat": 2}, {"label": "UserWarning", "kind": 7, "sortText": "z", "filterText": "UserWarning", "insertText": "UserWarning($0)", "insertTextFormat": 2}, {"label": "ValueError", "kind": 7, "sortText": "z", "filterText": "ValueError", "insertText": "ValueError($0)", "insertTextFormat": 2}, {"label": "vars", "kind": 3, "sortText": "z", "filterText": "vars", "insertText": "vars($0)", "insertTextFormat": 2}, {"label": "Warning", "kind": 7, "sortText": "z", "filterText": "Warning", "insertText": "Warning($0)", "insertTextFormat": 2}, {"label": "while", "kind": 14, "sortText": "z", "filterText": "while", "insertText": "while", "insertTextFormat": 1}, {"label": "WindowsError", "kind": 7, "sortText": "z", "filterText": "WindowsError", "insertText": "WindowsError($0)", "insertTextFormat": 2}, {"label": "with", "kind": 14, "sortText": "z", "filterText": "with", "insertText": "with", "insertTextFormat": 1}, {"label": "yield", "kind": 14, "sortText": "z", "filterText": "yield", "insertText": "yield", "insertTextFormat": 1}, {"label": "ZeroDivisionError", "kind": 7, "sortText": "z", "filterText": "ZeroDivisionError", "insertText": "ZeroDivisionError($0)", "insertTextFormat": 2}, {"label": "zip", "kind": 3, "sortText": "z", "filterText": "zip", "insertText": "zip(${1:iter1})$0", "insertTextFormat": 2}, {"label": "__doc__", "kind": 6, "sortText": "z", "filterText": "__doc__", "insertText": "__doc__", "insertTextFormat": 1}, {"label": "__file__", "kind": 6, "sortText": "z", "filterText": "__file__", "insertText": "__file__", "insertTextFormat": 1}, {"label": "__import__", "kind": 3, "sortText": "z", "filterText": "__import__", "insertText": "__import__(${1:name})$0", "insertTextFormat": 2}, {"label": "__name__", "kind": 6, "sortText": "z", "filterText": "__name__", "insertText": "__name__", "insertTextFormat": 1}, {"label": "__package__", "kind": 6, "sortText": "z", "filterText": "__package__", "insertText": "__package__", "insertTextFormat": 1}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 166, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 167, "result": {"label": "KeyError", "kind": 7, "detail": "class KeyError", "documentation": {"kind": "markdown", "value": "```text\nKeyError(*args: object)\n\nMapping key not found.\n```"}, "sortText": "z", "filterText": "KeyError", "insertText": "KeyError($0)", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 168, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 19, "character": 30}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 169, "result": {"isIncomplete": false, "items": [{"label": "abs", "kind": 3, "sortText": "z", "filterText": "abs", "insertText": "abs(${1:n})$0", "insertTextFormat": 2}, {"label": "albums", "kind": 6, "sortText": "z", "filterText": "albums", "insertText": "albums", "insertTextFormat": 1}, {"label": "all", "kind": 3, "sortText": "z", "filterText": "all", "insertText": "all(${1:i})$0", "insertTextFormat": 2}, {"label": "any", "kind": 3, "sortText": "z", "filterText": "any", "insertText": "any(${1:i})$0", "insertTextFormat": 2}, {"label": "ArithmeticError", "kind": 7, "sortText": "z", "filterText": "ArithmeticError", "insertText": "ArithmeticError($0)", "insertTextFormat": 2}, {"label": "ascii", "kind": 3, "sortText": "z", "filterText": "ascii", "insertText": "ascii(${1:o})$0", "insertTextFormat": 2}, {"label": "assert", "kind": 14, "sortText": "z", "filterText": "assert", "insertText": "assert", "insertTextFormat": 1}, {"label": "AssertionError", "kind": 7, "sortText": "z", "filterText": "AssertionError", "insertText": "AssertionError($0)", "insertTextFormat": 2}, {"label": "async", "kind": 14, "sortText": "z", "filterText": "async", "insertText": "async", "insertTextFormat": 1}, {"label": "AttributeError", "kind": 7, "sortText": "z", "filterText": "AttributeError", "insertText": "AttributeError($0)", "insertTextFormat": 2}, {"label": "await", "kind": 14, "sortText": "z", "filterText": "await", "insertText": "await", "insertTextFormat": 1}, {"label": "BaseException", "kind": 7, "sortText": "z", "filterText": "BaseException", "insertText": "BaseException($0)", "insertTextFormat": 2}, {"label": "bin", "kind": 3, "sortText": "z", "filterText": "bin", "insertText": "bin(${1:number})$0", "insertTextFormat": 2}, {"label": "BlockingIOError", "kind": 7, "sortText": "z", "filterText": "BlockingIOError", "insertText": "BlockingIOError($0)", "insertTextFormat": 2}, {"label": "bool", "kind": 7, "sortText": "z", "filterText": "bool", "insertText": "bool($0)", "insertTextFormat": 2}, {"label": "break", "kind": 14, "sortText": "z", "filterText": "break", "insertText": "break", "insertTextFormat": 1}, {"label": "breakpoint", "kind": 3, "sortText": "z", "filterText": "breakpoint", "insertText": "breakpoint($0)", "insertTextFormat": 2}, {"label": "BrokenPipeError", "kind": 7, "sortText": "z", "filterText": "BrokenPipeError", "insertText": "BrokenPipeError($0)", "insertTextFormat": 2}, {"label": "BufferError", "kind": 7, "sortText": "z", "filterText": "BufferError", "insertText": "BufferError($0)", "insertTextFormat": 2}, {"label": "bytearray", "kind": 7, "sortText": "z", "filterText": "bytearray", "insertText": "bytearray()$0", "insertTextFormat": 2}, {"label": "bytes", "kind": 7, "sortText": "z", "filterText": "bytes", "insertText": "bytes(${1:ints})$0", "insertTextFormat": 2}, {"label": "BytesWarning", "kind": 7, "sortText": "z", "filterText": "BytesWarning", "insertText": "BytesWarning($0)", "insertTextFormat": 2}, {"label": "callable", "kind": 3, "sortText": "z", "filterText": "callable", "insertText": "callable(${1:o})$0", "insertTextFormat": 2}, {"label": "ChildProcessError", "kind": 7, "sortText": "z", "filterText": "ChildProcessError", "insertText": "ChildProcessError($0)", "insertTextFormat": 2}, {"label": "chr", "kind": 3, "sortText": "z", "filterText": "chr", "insertText": "chr(${1:code})$0", "insertTextFormat": 2}, {"label": "class", "kind": 14, "sortText": "z", "filterText": "class", "insertText": "class", "insertTextFormat": 1}, {"label": "classmethod", "kind": 7, "sortText": "z", "filterText": "classmethod", "insertText": "classmethod(${1:f})$0", "insertTextFormat": 2}, {"label": "compile", "kind": 3, "sortText": "z", "filterText": "compile", "insertText": "compile(${1:source}, ${2:filename}, ${3:mode})$0", "insertTextFormat": 2}, {"label": "complex", "kind": 7, "sortText": "z", "filterText": "complex", "insertText": "complex($0)", "insertTextFormat": 2}, {"label": "ConnectionAbortedError", "kind": 7, "sortText": "z", "filterText": "ConnectionAbortedError", "insertText": "ConnectionAbortedError($0)", "insertTextFormat": 2}, {"label": "ConnectionError", "kind": 7, "sortText": "z", "filterText": "ConnectionError", "insertText": "ConnectionError($0)", "insertTextFormat": 2}, {"label": "ConnectionRefusedError", "kind": 7, "sortText": "z", "filterText": "ConnectionRefusedError", "insertText": "ConnectionRefusedError($0)", "insertTextFormat": 2}, {"label": "ConnectionResetError", "kind": 7, "sortText": "z", "filterText": "ConnectionResetError", "insertText": "ConnectionResetError($0)", "insertTextFormat": 2}, {"label": "contains_directory", "kind": 6, "sortText": "z", "filterText": "contains_directory", "insertText": "contains_directory", "insertTextFormat": 1}, {"label": "continue", "kind": 14, "sortText": "z", "filterText": "continue", "insertText": "continue", "insertTextFormat": 1}, {"label": "copyright", "kind": 3, "sortText": "z", "filterText": "copyright", "insertText": "copyright()$0", "insertTextFormat": 2}, {"label": "credits", "kind": 3, "sortText": "z", "filterText": "credits", "insertText": "credits()$0", "insertTextFormat": 2}, {"label": "def", "kind": 14, "sortText": "z", "filterText": "def", "insertText": "def", "insertTextFormat": 1}, {"label": "del", "kind": 14, "sortText": "z", "filterText": "del", "insertText": "del", "insertTextFormat": 1}, {"label": "delattr", "kind": 3, "sortText": "z", "filterText": "delattr", "insertText": "delattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "DeprecationWarning", "kind": 7, "sortText": "z", "filterText": "DeprecationWarning", "insertText": "DeprecationWarning($0)", "insertTextFormat": 2}, {"label": "dict", "kind": 7, "sortText": "z", "filterText": "dict", "insertText": "dict($0)", "insertTextFormat": 2}, {"label": "dir", "kind": 6, "sortText": "z", "filterText": "dir", "insertText": "dir", "insertTextFormat": 1}, {"label": "directory", "kind": 6, "sortText": "z", "filterText": "directory", "insertText": "directory", "insertTextFormat": 1}, {"label": "dirs", "kind": 6, "sortText": "z", "filterText": "dirs", "insertText": "dirs", "insertTextFormat": 1}, {"label": "divmod", "kind": 3, "sortText": "z", "filterText": "divmod", "insertText": "divmod(${1:a}, ${2:b})$0", "insertTextFormat": 2}, {"label": "ellipsis", "kind": 7, "sortText": "z", "filterText": "ellipsis", "insertText": "ellipsis()$0", "insertTextFormat": 2}, {"label": "Ellipsis", "kind": 6, "sortText": "z", "filterText": "Ellipsis", "insertText": "Ellipsis", "insertTextFormat": 1}, {"label": "else", "kind": 14, "sortText": "z", "filterText": "else", "insertText": "else", "insertTextFormat": 1}, {"label": "enumerate", "kind": 7, "sortText": "z", "filterText": "enumerate", "insertText": "enumerate(${1:iterable})$0", "insertTextFormat": 2}, {"label": "EnvironmentError", "kind": 6, "sortText": "z", "filterText": "EnvironmentError", "insertText": "EnvironmentError", "insertTextFormat": 1}, {"label": "EOFError", "kind": 7, "sortText": "z", "filterText": "EOFError", "insertText": "EOFError($0)", "insertTextFormat": 2}, {"label": "eval", "kind": 3, "sortText": "z", "filterText": "eval", "insertText": "eval(${1:source})$0", "insertTextFormat": 2}, {"label": "Exception", "kind": 7, "sortText": "z", "filterText": "Exception", "insertText": "Exception($0)", "insertTextFormat": 2}, {"label": "exec", "kind": 3, "sortText": "z", "filterText": "exec", "insertText": "exec(${1:object})$0", "insertTextFormat": 2}, {"label": "exit", "kind": 3, "sortText": "z", "filterText": "exit", "insertText": "exit($0)", "insertTextFormat": 2}, {"label": "False", "kind": 14, "sortText": "z", "filterText": "False", "insertText": "False", "insertTextFormat": 1}, {"label": "FileExistsError", "kind": 7, "sortText": "z", "filterText": "FileExistsError", "insertText": "FileExistsError($0)", "insertTextFormat": 2}, {"label": "filename", "kind": 6, "sortText": "z", "filterText": "filename", "insertText": "filename", "insertTextFormat": 1}, {"label": "FileNotFoundError", "kind": 7, "sortText": "z", "filterText": "FileNotFoundError", "insertText": "FileNotFoundError($0)", "insertTextFormat": 2}, {"label": "filter", "kind": 3, "sortText": "z", "filterText": "filter", "insertText": "filter(${1:function}, ${2:iterable})$0", "insertTextFormat": 2}, {"label": "FLAC", "kind": 9, "sortText": "z", "filterText": "FLAC", "insertText": "FLAC", "insertTextFormat": 1}, {"label": "float", "kind": 7, "sortText": "z", "filterText": "float", "insertText": "float($0)", "insertTextFormat": 2}, {"label": "FloatingPointError", "kind": 7, "sortText": "z", "filterText": "FloatingPointError", "insertText": "FloatingPointError($0)", "insertTextFormat": 2}, {"label": "for", "kind": 14, "sortText": "z", "filterText": "for", "insertText": "for", "insertTextFormat": 1}, {"label": "format", "kind": 3, "sortText": "z", "filterText": "format", "insertText": "format(${1:o})$0", "insertTextFormat": 2}, {"label": "from", "kind": 14, "sortText": "z", "filterText": "from", "insertText": "from", "insertTextFormat": 1}, {"label": "frozenset", "kind": 7, "sortText": "z", "filterText": "frozenset", "insertText": "frozenset($0)", "insertTextFormat": 2}, {"label": "FutureWarning", "kind": 7, "sortText": "z", "filterText": "FutureWarning", "insertText": "FutureWarning($0)", "insertTextFormat": 2}, {"label": "GeneratorExit", "kind": 7, "sortText": "z", "filterText": "GeneratorExit", "insertText": "GeneratorExit($0)", "insertTextFormat": 2}, {"label": "get_songs", "kind": 3, "sortText": "z", "filterText": "get_songs", "insertText": "get_songs(${1:directory}, ${2:albums})$0", "insertTextFormat": 2}, {"label": "getattr", "kind": 3, "sortText": "z", "filterText": "getattr", "insertText": "getattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "global", "kind": 14, "sortText": "z", "filterText": "global", "insertText": "global", "insertTextFormat": 1}, {"label": "globals", "kind": 3, "sortText": "z", "filterText": "globals", "insertText": "globals()$0", "insertTextFormat": 2}, {"label": "hasattr", "kind": 3, "sortText": "z", "filterText": "hasattr", "insertText": "hasattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "hash", "kind": 3, "sortText": "z", "filterText": "hash", "insertText": "hash(${1:o})$0", "insertTextFormat": 2}, {"label": "help", "kind": 3, "sortText": "z", "filterText": "help", "insertText": "help($0)", "insertTextFormat": 2}, {"label": "hex", "kind": 3, "sortText": "z", "filterText": "hex", "insertText": "hex(${1:i})$0", "insertTextFormat": 2}, {"label": "id", "kind": 3, "sortText": "z", "filterText": "id", "insertText": "id(${1:o})$0", "insertTextFormat": 2}, {"label": "if", "kind": 14, "sortText": "z", "filterText": "if", "insertText": "if", "insertTextFormat": 1}, {"label": "import", "kind": 14, "sortText": "z", "filterText": "import", "insertText": "import", "insertTextFormat": 1}, {"label": "ImportError", "kind": 7, "sortText": "z", "filterText": "ImportError", "insertText": "ImportError($0)", "insertTextFormat": 2}, {"label": "ImportWarning", "kind": 7, "sortText": "z", "filterText": "ImportWarning", "insertText": "ImportWarning($0)", "insertTextFormat": 2}, {"label": "IndentationError", "kind": 7, "sortText": "z", "filterText": "IndentationError", "insertText": "IndentationError($0)", "insertTextFormat": 2}, {"label": "IndexError", "kind": 7, "sortText": "z", "filterText": "IndexError", "insertText": "IndexError($0)", "insertTextFormat": 2}, {"label": "input", "kind": 3, "sortText": "z", "filterText": "input", "insertText": "input($0)", "insertTextFormat": 2}, {"label": "int", "kind": 7, "sortText": "z", "filterText": "int", "insertText": "int($0)", "insertTextFormat": 2}, {"label": "InterruptedError", "kind": 7, "sortText": "z", "filterText": "InterruptedError", "insertText": "InterruptedError($0)", "insertTextFormat": 2}, {"label": "IOError", "kind": 6, "sortText": "z", "filterText": "IOError", "insertText": "IOError", "insertTextFormat": 1}, {"label": "IsADirectoryError", "kind": 7, "sortText": "z", "filterText": "IsADirectoryError", "insertText": "IsADirectoryError($0)", "insertTextFormat": 2}, {"label": "isinstance", "kind": 3, "sortText": "z", "filterText": "isinstance", "insertText": "isinstance(${1:o}, ${2:t})$0", "insertTextFormat": 2}, {"label": "issubclass", "kind": 3, "sortText": "z", "filterText": "issubclass", "insertText": "issubclass(${1:cls}, ${2:classinfo})$0", "insertTextFormat": 2}, {"label": "iter", "kind": 3, "sortText": "z", "filterText": "iter", "insertText": "iter(${1:iterable})$0", "insertTextFormat": 2}, {"label": "KeyboardInterrupt", "kind": 7, "sortText": "z", "filterText": "KeyboardInterrupt", "insertText": "KeyboardInterrupt($0)", "insertTextFormat": 2}, {"label": "KeyError", "kind": 7, "sortText": "z", "filterText": "KeyError", "insertText": "KeyError($0)", "insertTextFormat": 2}, {"label": "lambda", "kind": 14, "sortText": "z", "filterText": "lambda", "insertText": "lambda", "insertTextFormat": 1}, {"label": "len", "kind": 3, "sortText": "z", "filterText": "len", "insertText": "len(${1:o})$0", "insertTextFormat": 2}, {"label": "license", "kind": 3, "sortText": "z", "filterText": "license", "insertText": "license()$0", "insertTextFormat": 2}, {"label": "list", "kind": 7, "sortText": "z", "filterText": "list", "insertText": "list()$0", "insertTextFormat": 2}, {"label": "locals", "kind": 3, "sortText": "z", "filterText": "locals", "insertText": "locals()$0", "insertTextFormat": 2}, {"label": "LookupError", "kind": 7, "sortText": "z", "filterText": "LookupError", "insertText": "LookupError($0)", "insertTextFormat": 2}, {"label": "map", "kind": 3, "sortText": "z", "filterText": "map", "insertText": "map(${1:func}, ${2:iter1})$0", "insertTextFormat": 2}, {"label": "max", "kind": 3, "sortText": "z", "filterText": "max", "insertText": "max(${1:arg1}, ${2:arg2})$0", "insertTextFormat": 2}, {"label": "MemoryError", "kind": 7, "sortText": "z", "filterText": "MemoryError", "insertText": "MemoryError($0)", "insertTextFormat": 2}, {"label": "memoryview", "kind": 7, "sortText": "z", "filterText": "memoryview", "insertText": "memoryview(${1:obj})$0", "insertTextFormat": 2}, {"label": "min", "kind": 3, "sortText": "z", "filterText": "min", "insertText": "min(${1:arg1}, ${2:arg2})$0", "insertTextFormat": 2}, {"label": "ModuleNotFoundError", "kind": 7, "sortText": "z", "filterText": "ModuleNotFoundError", "insertText": "ModuleNotFoundError($0)", "insertTextFormat": 2}, {"label": "NameError", "kind": 7, "sortText": "z", "filterText": "NameError", "insertText": "NameError($0)", "insertTextFormat": 2}, {"label": "next", "kind": 3, "sortText": "z", "filterText": "next", "insertText": "next(${1:i})$0", "insertTextFormat": 2}, {"label": "None", "kind": 14, "sortText": "z", "filterText": "None", "insertText": "None", "insertTextFormat": 1}, {"label": "nonlocal", "kind": 14, "sortText": "z", "filterText": "nonlocal", "insertText": "nonlocal", "insertTextFormat": 1}, {"label": "not", "kind": 14, "sortText": "z", "filterText": "not", "insertText": "not", "insertTextFormat": 1}, {"label": "NotADirectoryError", "kind": 7, "sortText": "z", "filterText": "NotADirectoryError", "insertText": "NotADirectoryError($0)", "insertTextFormat": 2}, {"label": "NotImplemented", "kind": 6, "sortText": "z", "filterText": "NotImplemented", "insertText": "NotImplemented", "insertTextFormat": 1}, {"label": "NotImplementedError", "kind": 7, "sortText": "z", "filterText": "NotImplementedError", "insertText": "NotImplementedError($0)", "insertTextFormat": 2}, {"label": "object", "kind": 7, "sortText": "z", "filterText": "object", "insertText": "object()$0", "insertTextFormat": 2}, {"label": "oct", "kind": 3, "sortText": "z", "filterText": "oct", "insertText": "oct(${1:i})$0", "insertTextFormat": 2}, {"label": "open", "kind": 3, "sortText": "z", "filterText": "open", "insertText": "open(${1:file})$0", "insertTextFormat": 2}, {"label": "ord", "kind": 3, "sortText": "z", "filterText": "ord", "insertText": "ord(${1:c})$0", "insertTextFormat": 2}, {"label": "os", "kind": 9, "sortText": "z", "filterText": "os", "insertText": "os", "insertTextFormat": 1}, {"label": "OSError", "kind": 7, "sortText": "z", "filterText": "OSError", "insertText": "OSError($0)", "insertTextFormat": 2}, {"label": "OverflowError", "kind": 7, "sortText": "z", "filterText": "OverflowError", "insertText": "OverflowError($0)", "insertTextFormat": 2}, {"label": "pass", "kind": 14, "sortText": "z", "filterText": "pass", "insertText": "pass", "insertTextFormat": 1}, {"label": "PendingDeprecationWarning", "kind": 7, "sortText": "z", "filterText": "PendingDeprecationWarning", "insertText": "PendingDeprecationWarning($0)", "insertTextFormat": 2}, {"label": "PermissionError", "kind": 7, "sortText": "z", "filterText": "PermissionError", "insertText": "PermissionError($0)", "insertTextFormat": 2}, {"label": "pow", "kind": 3, "sortText": "z", "filterText": "pow", "insertText": "pow(${1:x}, ${2:y})$0", "insertTextFormat": 2}, {"label": "print", "kind": 3, "sortText": "z", "filterText": "print", "insertText": "print($0)", "insertTextFormat": 2}, {"label": "ProcessLookupError", "kind": 7, "sortText": "z", "filterText": "ProcessLookupError", "insertText": "ProcessLookupError($0)", "insertTextFormat": 2}, {"label": "property", "kind": 7, "sortText": "z", "filterText": "property", "insertText": "property($0)", "insertTextFormat": 2}, {"label": "quit", "kind": 3, "sortText": "z", "filterText": "quit", "insertText": "quit($0)", "insertTextFormat": 2}, {"label": "raise", "kind": 14, "sortText": "z", "filterText": "raise", "insertText": "raise", "insertTextFormat": 1}, {"label": "range", "kind": 7, "sortText": "z", "filterText": "range", "insertText": "range(${1:stop})$0", "insertTextFormat": 2}, {"label": "RecursionError", "kind": 7, "sortText": "z", "filterText": "RecursionError", "insertText": "RecursionError($0)", "insertTextFormat": 2}, {"label": "ReferenceError", "kind": 7, "sortText": "z", "filterText": "ReferenceError", "insertText": "ReferenceError($0)", "insertTextFormat": 2}, {"label": "repr", "kind": 3, "sortText": "z", "filterText": "repr", "insertText": "repr(${1:o})$0", "insertTextFormat": 2}, {"label": "ResourceWarning", "kind": 7, "sortText": "z", "filterText": "ResourceWarning", "insertText": "ResourceWarning($0)", "insertTextFormat": 2}, {"label": "return", "kind": 14, "sortText": "z", "filterText": "return", "insertText": "return", "insertTextFormat": 1}, {"label": "reversed", "kind": 3, "sortText": "z", "filterText": "reversed", "insertText": "reversed(${1:object})$0", "insertTextFormat": 2}, {"label": "round", "kind": 3, "sortText": "z", "filterText": "round", "insertText": "round(${1:number})$0", "insertTextFormat": 2}, {"label": "RuntimeError", "kind": 7, "sortText": "z", "filterText": "RuntimeError", "insertText": "RuntimeError($0)", "insertTextFormat": 2}, {"label": "RuntimeWarning", "kind": 7, "sortText": "z", "filterText": "RuntimeWarning", "insertText": "RuntimeWarning($0)", "insertTextFormat": 2}, {"label": "set", "kind": 7, "sortText": "z", "filterText": "set", "insertText": "set($0)", "insertTextFormat": 2}, {"label": "setattr", "kind": 3, "sortText": "z", "filterText": "setattr", "insertText": "setattr(${1:object}, ${2:name}, ${3:value})$0", "insertTextFormat": 2}, {"label": "slice", "kind": 7, "sortText": "z", "filterText": "slice", "insertText": "slice(${1:stop})$0", "insertTextFormat": 2}, {"label": "songs", "kind": 6, "sortText": "z", "filterText": "songs", "insertText": "songs", "insertTextFormat": 1}, {"label": "sorted", "kind": 3, "sortText": "z", "filterText": "sorted", "insertText": "sorted(${1:iterable})$0", "insertTextFormat": 2}, {"label": "staticmethod", "kind": 7, "sortText": "z", "filterText": "staticmethod", "insertText": "staticmethod(${1:f})$0", "insertTextFormat": 2}, {"label": "StopAsyncIteration", "kind": 7, "sortText": "z", "filterText": "StopAsyncIteration", "insertText": "StopAsyncIteration($0)", "insertTextFormat": 2}, {"label": "StopIteration", "kind": 7, "sortText": "z", "filterText": "StopIteration", "insertText": "StopIteration($0)", "insertTextFormat": 2}, {"label": "str", "kind": 7, "sortText": "z", "filterText": "str", "insertText": "str($0)", "insertTextFormat": 2}, {"label": "sum", "kind": 3, "sortText": "z", "filterText": "sum", "insertText": "sum(${1:iterable})$0", "insertTextFormat": 2}, {"label": "super", "kind": 7, "sortText": "z", "filterText": "super", "insertText": "super(${1:t}, ${2:obj})$0", "insertTextFormat": 2}, {"label": "SyntaxError", "kind": 7, "sortText": "z", "filterText": "SyntaxError", "insertText": "SyntaxError($0)", "insertTextFormat": 2}, {"label": "SyntaxWarning", "kind": 7, "sortText": "z", "filterText": "SyntaxWarning", "insertText": "SyntaxWarning($0)", "insertTextFormat": 2}, {"label": "SystemError", "kind": 7, "sortText": "z", "filterText": "SystemError", "insertText": "SystemError($0)", "insertTextFormat": 2}, {"label": "SystemExit", "kind": 7, "sortText": "z", "filterText": "SystemExit", "insertText": "SystemExit($0)", "insertTextFormat": 2}, {"label": "TabError", "kind": 7, "sortText": "z", "filterText": "TabError", "insertText": "TabError($0)", "insertTextFormat": 2}, {"label": "TimeoutError", "kind": 7, "sortText": "z", "filterText": "TimeoutError", "insertText": "TimeoutError($0)", "insertTextFormat": 2}, {"label": "True", "kind": 14, "sortText": "z", "filterText": "True", "insertText": "True", "insertTextFormat": 1}, {"label": "try", "kind": 14, "sortText": "z", "filterText": "try", "insertText": "try", "insertTextFormat": 1}, {"label": "tuple", "kind": 7, "sortText": "z", "filterText": "tuple", "insertText": "tuple($0)", "insertTextFormat": 2}, {"label": "type", "kind": 7, "sortText": "z", "filterText": "type", "insertText": "type(${1:o})$0", "insertTextFormat": 2}, {"label": "TypeError", "kind": 7, "sortText": "z", "filterText": "TypeError", "insertText": "TypeError($0)", "insertTextFormat": 2}, {"label": "UnboundLocalError", "kind": 7, "sortText": "z", "filterText": "UnboundLocalError", "insertText": "UnboundLocalError($0)", "insertTextFormat": 2}, {"label": "UnicodeDecodeError", "kind": 7, "sortText": "z", "filterText": "UnicodeDecodeError", "insertText": "UnicodeDecodeError(${1:encoding}, ${2:object}, ${3:start}, ${4:end}, ${5:reason})$0", "insertTextFormat": 2}, {"label": "UnicodeEncodeError", "kind": 7, "sortText": "z", "filterText": "UnicodeEncodeError", "insertText": "UnicodeEncodeError(${1:encoding}, ${2:object}, ${3:start}, ${4:end}, ${5:reason})$0", "insertTextFormat": 2}, {"label": "UnicodeError", "kind": 7, "sortText": "z", "filterText": "UnicodeError", "insertText": "UnicodeError($0)", "insertTextFormat": 2}, {"label": "UnicodeTranslateError", "kind": 7, "sortText": "z", "filterText": "UnicodeTranslateError", "insertText": "UnicodeTranslateError($0)", "insertTextFormat": 2}, {"label": "UnicodeWarning", "kind": 7, "sortText": "z", "filterText": "UnicodeWarning", "insertText": "UnicodeWarning($0)", "insertTextFormat": 2}, {"label": "UserWarning", "kind": 7, "sortText": "z", "filterText": "UserWarning", "insertText": "UserWarning($0)", "insertTextFormat": 2}, {"label": "ValueError", "kind": 7, "sortText": "z", "filterText": "ValueError", "insertText": "ValueError($0)", "insertTextFormat": 2}, {"label": "vars", "kind": 3, "sortText": "z", "filterText": "vars", "insertText": "vars($0)", "insertTextFormat": 2}, {"label": "Warning", "kind": 7, "sortText": "z", "filterText": "Warning", "insertText": "Warning($0)", "insertTextFormat": 2}, {"label": "while", "kind": 14, "sortText": "z", "filterText": "while", "insertText": "while", "insertTextFormat": 1}, {"label": "WindowsError", "kind": 7, "sortText": "z", "filterText": "WindowsError", "insertText": "WindowsError($0)", "insertTextFormat": 2}, {"label": "with", "kind": 14, "sortText": "z", "filterText": "with", "insertText": "with", "insertTextFormat": 1}, {"label": "yield", "kind": 14, "sortText": "z", "filterText": "yield", "insertText": "yield", "insertTextFormat": 1}, {"label": "ZeroDivisionError", "kind": 7, "sortText": "z", "filterText": "ZeroDivisionError", "insertText": "ZeroDivisionError($0)", "insertTextFormat": 2}, {"label": "zip", "kind": 3, "sortText": "z", "filterText": "zip", "insertText": "zip(${1:iter1})$0", "insertTextFormat": 2}, {"label": "__doc__", "kind": 6, "sortText": "z", "filterText": "__doc__", "insertText": "__doc__", "insertTextFormat": 1}, {"label": "__file__", "kind": 6, "sortText": "z", "filterText": "__file__", "insertText": "__file__", "insertTextFormat": 1}, {"label": "__import__", "kind": 3, "sortText": "z", "filterText": "__import__", "insertText": "__import__(${1:name})$0", "insertTextFormat": 2}, {"label": "__name__", "kind": 6, "sortText": "z", "filterText": "__name__", "insertText": "__name__", "insertTextFormat": 1}, {"label": "__package__", "kind": 6, "sortText": "z", "filterText": "__package__", "insertText": "__package__", "insertTextFormat": 1}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 170, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 171, "result": {"label": "KeyError", "kind": 7, "detail": "class KeyError", "documentation": {"kind": "markdown", "value": "```text\nKeyError(*args: object)\n\nMapping key not found.\n```"}, "sortText": "z", "filterText": "KeyError", "insertText": "KeyError($0)", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 172, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 19, "character": 30}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 173, "result": {"contents": {"kind": "markdown", "value": "```python\nparam albums\n```"}, "range": {"start": {"line": 19, "character": 23}, "end": {"line": 19, "character": 29}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 174, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement filename\n```\n---\n```python\nfor filename in os.scandir(directory): if filename.endswith(\".flac\" or \".jpg\" or \".png\"): set.add(filename) if filename.is_dir: dirs.add(filename) contains_directory = True\n```\n**Full name:** `fixer.get_songs.filename`"}, "range": {"start": {"line": 10, "character": 20}, "end": {"line": 10, "character": 28}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 175, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement contains_directory\n```\n---\n```python\ncontains_directory = False\n```\n**Full name:** `fixer.get_songs.contains_directory`"}, "range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 22}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 176, "result": [{"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 22}}}, {"range": {"start": {"line": 14, "character": 12}, "end": {"line": 14, "character": 30}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 177, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 145}, "edits": [{"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 4}}, "newText": "jls_extract_def():\n    contains_directory = False\n    return contains_directory\n\n\ndef "}, {"range": {"start": {"line": 7, "character": 25}, "end": {"line": 7, "character": 30}}, "newText": "jls_extract_def()"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 178, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 19, "character": 30}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 179, "result": {"contents": {"kind": "markdown", "value": "```python\nsongs: set\n```\n---\n```python\nsongs = set()\n```\n**Full name:** `fixer.get_songs.songs`"}, "range": {"start": {"line": 16, "character": 15}, "end": {"line": 16, "character": 20}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 180, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 181, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 19, "character": 30}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 182, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 183, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 153}, "edits": [{"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 4}}, "newText": "jls_extract_def():\n    contains_directory = False\n    return contains_directory\n\n\ndef "}, {"range": {"start": {"line": 7, "character": 25}, "end": {"line": 7, "character": 30}}, "newText": "jls_extract_def()"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 184, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 185, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 19, "character": 30}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 186, "result": {"isIncomplete": false, "items": [{"label": "id", "kind": 3, "sortText": "z", "filterText": "id", "insertText": "id(${1:o})$0", "insertTextFormat": 2}, {"label": "if", "kind": 14, "sortText": "z", "filterText": "if", "insertText": "if", "insertTextFormat": 1}, {"label": "import", "kind": 14, "sortText": "z", "filterText": "import", "insertText": "import", "insertTextFormat": 1}, {"label": "ImportError", "kind": 7, "sortText": "z", "filterText": "ImportError", "insertText": "ImportError($0)", "insertTextFormat": 2}, {"label": "ImportWarning", "kind": 7, "sortText": "z", "filterText": "ImportWarning", "insertText": "ImportWarning($0)", "insertTextFormat": 2}, {"label": "IndentationError", "kind": 7, "sortText": "z", "filterText": "IndentationError", "insertText": "IndentationError($0)", "insertTextFormat": 2}, {"label": "IndexError", "kind": 7, "sortText": "z", "filterText": "IndexError", "insertText": "IndexError($0)", "insertTextFormat": 2}, {"label": "input", "kind": 3, "sortText": "z", "filterText": "input", "insertText": "input($0)", "insertTextFormat": 2}, {"label": "int", "kind": 7, "sortText": "z", "filterText": "int", "insertText": "int($0)", "insertTextFormat": 2}, {"label": "InterruptedError", "kind": 7, "sortText": "z", "filterText": "InterruptedError", "insertText": "InterruptedError($0)", "insertTextFormat": 2}, {"label": "IOError", "kind": 6, "sortText": "z", "filterText": "IOError", "insertText": "IOError", "insertTextFormat": 1}, {"label": "IsADirectoryError", "kind": 7, "sortText": "z", "filterText": "IsADirectoryError", "insertText": "IsADirectoryError($0)", "insertTextFormat": 2}, {"label": "isinstance", "kind": 3, "sortText": "z", "filterText": "isinstance", "insertText": "isinstance(${1:o}, ${2:t})$0", "insertTextFormat": 2}, {"label": "issubclass", "kind": 3, "sortText": "z", "filterText": "issubclass", "insertText": "issubclass(${1:cls}, ${2:classinfo})$0", "insertTextFormat": 2}, {"label": "iter", "kind": 3, "sortText": "z", "filterText": "iter", "insertText": "iter(${1:iterable})$0", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 187, "result": {"label": "id", "kind": 3, "detail": "def id", "documentation": {"kind": "markdown", "value": "```text\nid(o: object, /) -> int\n\nReturn the identity of an object.\n\nThis is guaranteed to be unique among simultaneously existing objects.\n(CPython uses the object's memory address.)\n```"}, "sortText": "z", "filterText": "id", "insertText": "id(${1:o})$0", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 188, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 157}, "edits": [{"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef "}, {"range": {"start": {"line": 21, "character": 5}, "end": {"line": 23, "character": 4}}, "newText": " = jls_extract_def()\n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 21, "character": 6}, "end": {"line": 22, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 189, "result": {"label": "if", "kind": 14, "detail": "keyword if", "documentation": {"kind": "markdown", "value": "```text\nThe \"if\" statement\n******************\n\nThe \"if\" statement is used for conditional execution:\n\n   if_stmt ::= \"if\" assignment_expression \":\" suite\n               (\"elif\" assignment_expression \":\" suite)*\n               [\"else\" \":\" suite]\n\nIt selects exactly one of the suites by evaluating the expressions one\nby one until one is found to be true (see section Boolean operations\nfor the definition of true and false); then that suite is executed\n(and no other part of the \"if\" statement is executed or evaluated).\nIf all expressions are false, the suite of the \"else\" clause, if\npresent, is executed.\n```"}, "sortText": "z", "filterText": "if", "insertText": "if", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 190, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 21, "character": 7}, "end": {"line": 22, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 21, "character": 8}, "end": {"line": 22, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 191, "result": {"isIncomplete": false, "items": [{"label": "callable", "kind": 3, "sortText": "z", "filterText": "callable", "insertText": "callable(${1:o})$0", "insertTextFormat": 2}, {"label": "ChildProcessError", "kind": 7, "sortText": "z", "filterText": "ChildProcessError", "insertText": "ChildProcessError($0)", "insertTextFormat": 2}, {"label": "chr", "kind": 3, "sortText": "z", "filterText": "chr", "insertText": "chr(${1:code})$0", "insertTextFormat": 2}, {"label": "classmethod", "kind": 7, "sortText": "z", "filterText": "classmethod", "insertText": "classmethod(${1:f})$0", "insertTextFormat": 2}, {"label": "compile", "kind": 3, "sortText": "z", "filterText": "compile", "insertText": "compile(${1:source}, ${2:filename}, ${3:mode})$0", "insertTextFormat": 2}, {"label": "complex", "kind": 7, "sortText": "z", "filterText": "complex", "insertText": "complex($0)", "insertTextFormat": 2}, {"label": "ConnectionAbortedError", "kind": 7, "sortText": "z", "filterText": "ConnectionAbortedError", "insertText": "ConnectionAbortedError($0)", "insertTextFormat": 2}, {"label": "ConnectionError", "kind": 7, "sortText": "z", "filterText": "ConnectionError", "insertText": "ConnectionError($0)", "insertTextFormat": 2}, {"label": "ConnectionRefusedError", "kind": 7, "sortText": "z", "filterText": "ConnectionRefusedError", "insertText": "ConnectionRefusedError($0)", "insertTextFormat": 2}, {"label": "ConnectionResetError", "kind": 7, "sortText": "z", "filterText": "ConnectionResetError", "insertText": "ConnectionResetError($0)", "insertTextFormat": 2}, {"label": "contains_directory", "kind": 6, "sortText": "z", "filterText": "contains_directory", "insertText": "contains_directory", "insertTextFormat": 1}, {"label": "copyright", "kind": 3, "sortText": "z", "filterText": "copyright", "insertText": "copyright()$0", "insertTextFormat": 2}, {"label": "credits", "kind": 3, "sortText": "z", "filterText": "credits", "insertText": "credits()$0", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 21, "character": 9}, "end": {"line": 22, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 21, "character": 10}, "end": {"line": 22, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 192, "result": {"label": "contains_directory", "kind": 6, "detail": "contains_directory = True", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "contains_directory", "insertText": "contains_directory", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 21, "character": 11}, "end": {"line": 22, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 21, "character": 12}, "end": {"line": 22, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 21, "character": 13}, "end": {"line": 22, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 21, "character": 14}, "end": {"line": 22, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 193, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 21, "character": 15}, "end": {"line": 22, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 194, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 21, "character": 25}, "end": {"line": 22, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 195, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 21, "character": 26}, "end": {"line": 22, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 196, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 197, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 198, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 199, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 21, "character": 25}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 21, "character": 25}, "end": {"line": 22, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 200, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 201, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement dir\n```\n---\n```python\nfor dir in dirs: get_songs(dir, albums)\n```\n**Full name:** `fixer.get_songs.dir`"}, "range": {"start": {"line": 19, "character": 18}, "end": {"line": 19, "character": 21}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 202, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement contains_directory\n```\n---\n```python\ncontains_directory = True\n```\n**Full name:** `fixer.get_songs.contains_directory`"}, "range": {"start": {"line": 21, "character": 7}, "end": {"line": 21, "character": 25}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 203, "result": [{"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 22}}}, {"range": {"start": {"line": 14, "character": 12}, "end": {"line": 14, "character": 30}}}, {"range": {"start": {"line": 21, "character": 7}, "end": {"line": 21, "character": 25}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 204, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 21, "character": 7}, "end": {"line": 21, "character": 8}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 205, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 206, "result": [{"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 22}}}, {"range": {"start": {"line": 14, "character": 12}, "end": {"line": 14, "character": 30}}}, {"range": {"start": {"line": 21, "character": 8}, "end": {"line": 21, "character": 26}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 207, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 21, "character": 7}, "end": {"line": 21, "character": 8}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 208, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 21, "character": 7}, "end": {"line": 21, "character": 8}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 209, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement contains_directory\n```\n---\n```python\ncontains_directory = True\n```\n**Full name:** `fixer.get_songs.contains_directory`"}, "range": {"start": {"line": 21, "character": 8}, "end": {"line": 21, "character": 26}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 210, "result": {"contents": {"kind": "markdown", "value": "```python\nkeyword !\n```"}, "range": null}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 211, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 21, "character": 27}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 212, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 213, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement contains_directory\n```\n---\n```python\ncontains_directory = True\n```\n**Full name:** `fixer.get_songs.contains_directory`"}, "range": {"start": {"line": 21, "character": 8}, "end": {"line": 21, "character": 26}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 214, "result": [{"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 22}}}, {"range": {"start": {"line": 14, "character": 12}, "end": {"line": 14, "character": 30}}}, {"range": {"start": {"line": 21, "character": 8}, "end": {"line": 21, "character": 26}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 215, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 216, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement contains_directory\n```\n---\n```python\ncontains_directory = True\n```\n**Full name:** `fixer.get_songs.contains_directory`"}, "range": {"start": {"line": 21, "character": 8}, "end": {"line": 21, "character": 26}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 217, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 218, "result": {"contents": {"kind": "markdown", "value": "```python\nkeyword !\n```"}, "range": null}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 219, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 220, "result": [{"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 22}}}, {"range": {"start": {"line": 14, "character": 12}, "end": {"line": 14, "character": 30}}}, {"range": {"start": {"line": 21, "character": 8}, "end": {"line": 21, "character": 26}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 221, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 222, "result": {"contents": {"kind": "markdown", "value": "```python\nkeyword !\n```"}, "range": null}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 0}, "end": {"line": 24, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 223, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 224, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 0}, "end": {"line": 24, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 0}, "end": {"line": 24, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 225, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 0}, "end": {"line": 24, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 226, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 0}, "end": {"line": 24, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 227, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 228, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 229, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 21, "character": 30}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 230, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 25, "character": 0}, "end": {"line": 25, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 231, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 21, "character": 30}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 232, "result": {"isIncomplete": false, "items": [{"label": "raise", "kind": 14, "sortText": "z", "filterText": "raise", "insertText": "raise", "insertTextFormat": 1}, {"label": "range", "kind": 7, "sortText": "z", "filterText": "range", "insertText": "range(${1:stop})$0", "insertTextFormat": 2}, {"label": "RecursionError", "kind": 7, "sortText": "z", "filterText": "RecursionError", "insertText": "RecursionError($0)", "insertTextFormat": 2}, {"label": "ReferenceError", "kind": 7, "sortText": "z", "filterText": "ReferenceError", "insertText": "ReferenceError($0)", "insertTextFormat": 2}, {"label": "repr", "kind": 3, "sortText": "z", "filterText": "repr", "insertText": "repr(${1:o})$0", "insertTextFormat": 2}, {"label": "ResourceWarning", "kind": 7, "sortText": "z", "filterText": "ResourceWarning", "insertText": "ResourceWarning($0)", "insertTextFormat": 2}, {"label": "return", "kind": 14, "sortText": "z", "filterText": "return", "insertText": "return", "insertTextFormat": 1}, {"label": "reversed", "kind": 3, "sortText": "z", "filterText": "reversed", "insertText": "reversed(${1:object})$0", "insertTextFormat": 2}, {"label": "round", "kind": 3, "sortText": "z", "filterText": "round", "insertText": "round(${1:number})$0", "insertTextFormat": 2}, {"label": "RuntimeError", "kind": 7, "sortText": "z", "filterText": "RuntimeError", "insertText": "RuntimeError($0)", "insertTextFormat": 2}, {"label": "RuntimeWarning", "kind": 7, "sortText": "z", "filterText": "RuntimeWarning", "insertText": "RuntimeWarning($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 233, "result": {"label": "repr", "kind": 3, "detail": "def repr", "documentation": {"kind": "markdown", "value": "```text\nrepr(o: object, /) -> str\n\nReturn the canonical string representation of the object.\n\nFor many object types, including most builtins, eval(repr(obj)) == obj.\n```"}, "sortText": "z", "filterText": "repr", "insertText": "repr(${1:o})$0", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 234, "result": {"label": "return", "kind": 14, "detail": "keyword return", "documentation": {"kind": "markdown", "value": "```text\nThe \"return\" statement\n**********************\n\n   return_stmt ::= \"return\" [expression_list]\n\n\"return\" may only occur syntactically nested in a function definition,\nnot within a nested class definition.\n\nIf an expression list is present, it is evaluated, else \"None\" is\nsubstituted.\n\n\"return\" leaves the current function call with the expression list (or\n\"None\") as return value.\n\nWhen \"return\" passes control out of a \"try\" statement with a \"finally\"\nclause, that \"finally\" clause is executed before really leaving the\nfunction.\n\nIn a generator function, the \"return\" statement indicates that the\ngenerator is done and will cause \"StopIteration\" to be raised. The\nreturned value (if any) is used as an argument to construct\n\"StopIteration\" and becomes the \"StopIteration.value\" attribute.\n\nIn an asynchronous generator function, an empty \"return\" statement\nindicates that the asynchronous generator is done and will cause\n\"StopAsyncIteration\" to be raised.  A non-empty \"return\" statement is\na syntax error in an asynchronous generator function.\n```"}, "sortText": "z", "filterText": "return", "insertText": "return", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 235, "result": {"isIncomplete": false, "items": [{"label": "abs", "kind": 3, "sortText": "z", "filterText": "abs", "insertText": "abs(${1:n})$0", "insertTextFormat": 2}, {"label": "albums", "kind": 6, "sortText": "z", "filterText": "albums", "insertText": "albums", "insertTextFormat": 1}, {"label": "all", "kind": 3, "sortText": "z", "filterText": "all", "insertText": "all(${1:i})$0", "insertTextFormat": 2}, {"label": "any", "kind": 3, "sortText": "z", "filterText": "any", "insertText": "any(${1:i})$0", "insertTextFormat": 2}, {"label": "ArithmeticError", "kind": 7, "sortText": "z", "filterText": "ArithmeticError", "insertText": "ArithmeticError($0)", "insertTextFormat": 2}, {"label": "ascii", "kind": 3, "sortText": "z", "filterText": "ascii", "insertText": "ascii(${1:o})$0", "insertTextFormat": 2}, {"label": "AssertionError", "kind": 7, "sortText": "z", "filterText": "AssertionError", "insertText": "AssertionError($0)", "insertTextFormat": 2}, {"label": "AttributeError", "kind": 7, "sortText": "z", "filterText": "AttributeError", "insertText": "AttributeError($0)", "insertTextFormat": 2}, {"label": "await", "kind": 14, "sortText": "z", "filterText": "await", "insertText": "await", "insertTextFormat": 1}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 236, "result": {"label": "albums", "kind": 6, "detail": "param albums", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "albums", "insertText": "albums", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 237, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 238, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 239, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement contains_directory\n```\n---\n```python\ncontains_directory = True\n```\n**Full name:** `fixer.get_songs.contains_directory`"}, "range": {"start": {"line": 21, "character": 11}, "end": {"line": 21, "character": 29}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 240, "result": [{"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 22}}}, {"range": {"start": {"line": 14, "character": 12}, "end": {"line": 14, "character": 30}}}, {"range": {"start": {"line": 21, "character": 11}, "end": {"line": 21, "character": 29}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 241, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 242, "result": [{"range": {"start": {"line": 4, "character": 25}, "end": {"line": 4, "character": 31}}}, {"range": {"start": {"line": 16, "character": 4}, "end": {"line": 16, "character": 10}}}, {"range": {"start": {"line": 19, "character": 23}, "end": {"line": 19, "character": 29}}}, {"range": {"start": {"line": 22, "character": 15}, "end": {"line": 22, "character": 21}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 243, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 244, "result": {"contents": {"kind": "markdown", "value": "```python\nparam albums\n```"}, "range": {"start": {"line": 19, "character": 23}, "end": {"line": 19, "character": 29}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 245, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement contains_directory\n```\n---\n```python\ncontains_directory = True\n```\n**Full name:** `fixer.get_songs.contains_directory`"}, "range": {"start": {"line": 21, "character": 11}, "end": {"line": 21, "character": 29}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 246, "result": {"contents": {"kind": "markdown", "value": "```python\nkeyword :\n```\n---\n```text\nSlicings\n********\n\nA slicing selects a range of items in a sequence object (e.g., a\nstring, tuple or list).  Slicings may be used as expressions or as\ntargets in assignment or \"del\" statements.  The syntax for a slicing:\n\n   slicing      ::= primary \"[\" slice_list \"]\"\n   slice_list   ::= slice_item (\",\" slice_item)* [\",\"]\n   slice_item   ::= expression | proper_slice\n   proper_slice ::= [lower_bound] \":\" [upper_bound] [ \":\" [stride] ]\n   lower_bound  ::= expression\n   upper_bound  ::= expression\n   stride       ::= expression\n\nThere is ambiguity in the formal syntax here: anything that looks like\nan expression list also looks like a slice list, so any subscription\ncan be interpreted as a slicing.  Rather than further complicating the\nsyntax, this is disambiguated by defining that in this case the\ninterpretation as a subscription takes priority over the\ninterpretation as a slicing (this is the case if the slice list\ncontains no proper slice).\n\nThe semantics for a slicing are as follows.  The primary is indexed\n(using the same \"__getitem__()\" method as normal subscription) with a\nkey that is constructed from the slice list, as follows.  If the slice\nlist contains at least one comma, the key is a tuple containing the\nconversion of the slice items; otherwise, the conversion of the lone\nslice item is the key.  The conversion of a slice item that is an\nexpression is that expression.  The conversion of a proper slice is a\nslice object (see section The standard type hierarchy) whose \"start\",\n\"stop\" and \"step\" attributes are the values of the expressions given\nas lower bound, upper bound and stride, respectively, substituting\n\"None\" for missing expressions.\n```"}, "range": null}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 247, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement contains_directory\n```\n---\n```python\ncontains_directory = True\n```\n**Full name:** `fixer.get_songs.contains_directory`"}, "range": {"start": {"line": 21, "character": 11}, "end": {"line": 21, "character": 29}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 248, "result": [{"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 22}}}, {"range": {"start": {"line": 14, "character": 12}, "end": {"line": 14, "character": 30}}}, {"range": {"start": {"line": 21, "character": 11}, "end": {"line": 21, "character": 29}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 249, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 250, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 21, "character": 30}, "end": {"line": 21, "character": 31}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 22, "character": 0}, "end": {"line": 22, "character": 8}}, "message": "IndentationError: unexpected indent", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 251, "result": {"isIncomplete": false, "items": [{"label": "and", "kind": 14, "sortText": "z", "filterText": "and", "insertText": "and", "insertTextFormat": 1}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 252, "result": {"label": "and", "kind": 14, "detail": "keyword and", "documentation": {"kind": "markdown", "value": "```text\nBoolean operations\n******************\n\n   or_test  ::= and_test | or_test \"or\" and_test\n   and_test ::= not_test | and_test \"and\" not_test\n   not_test ::= comparison | \"not\" not_test\n\nIn the context of Boolean operations, and also when expressions are\nused by control flow statements, the following values are interpreted\nas false: \"False\", \"None\", numeric zero of all types, and empty\nstrings and containers (including strings, tuples, lists,\ndictionaries, sets and frozensets).  All other values are interpreted\nas true.  User-defined objects can customize their truth value by\nproviding a \"__bool__()\" method.\n\nThe operator \"not\" yields \"True\" if its argument is false, \"False\"\notherwise.\n\nThe expression \"x and y\" first evaluates *x*; if *x* is false, its\nvalue is returned; otherwise, *y* is evaluated and the resulting value\nis returned.\n\nThe expression \"x or y\" first evaluates *x*; if *x* is true, its value\nis returned; otherwise, *y* is evaluated and the resulting value is\nreturned.\n\nNote that neither \"and\" nor \"or\" restrict the value and type they\nreturn to \"False\" and \"True\", but rather return the last evaluated\nargument.  This is sometimes useful, e.g., if \"s\" is a string that\nshould be replaced by a default value if it is empty, the expression\n\"s or 'foo'\" yields the desired value.  Because \"not\" has to create a\nnew value, it returns a boolean value regardless of the type of its\nargument (for example, \"not 'foo'\" produces \"False\" rather than \"''\".)\n```"}, "sortText": "z", "filterText": "and", "insertText": "and", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 21, "character": 30}, "end": {"line": 21, "character": 32}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 22, "character": 0}, "end": {"line": 22, "character": 8}}, "message": "IndentationError: unexpected indent", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 21, "character": 33}, "end": {"line": 21, "character": 34}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 22, "character": 0}, "end": {"line": 22, "character": 8}}, "message": "IndentationError: unexpected indent", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 21, "character": 34}, "end": {"line": 21, "character": 35}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 22, "character": 0}, "end": {"line": 22, "character": 8}}, "message": "IndentationError: unexpected indent", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 253, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 254, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 255, "result": {"isIncomplete": false, "items": [{"label": "KeyboardInterrupt", "kind": 7, "sortText": "z", "filterText": "KeyboardInterrupt", "insertText": "KeyboardInterrupt($0)", "insertTextFormat": 2}, {"label": "KeyError", "kind": 7, "sortText": "z", "filterText": "KeyError", "insertText": "KeyError($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 256, "result": {"label": "KeyError", "kind": 7, "detail": "class KeyError", "documentation": {"kind": "markdown", "value": "```text\nKeyError(*args: object)\n\nMapping key not found.\n```"}, "sortText": "z", "filterText": "KeyError", "insertText": "KeyError($0)", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 257, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 21, "character": 34}, "end": {"line": 21, "character": 35}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 22, "character": 0}, "end": {"line": 22, "character": 8}}, "message": "IndentationError: unexpected indent", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 258, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 259, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 260, "result": {"isIncomplete": false, "items": [{"label": "set", "kind": 7, "sortText": "z", "filterText": "set", "insertText": "set($0)", "insertTextFormat": 2}, {"label": "setattr", "kind": 3, "sortText": "z", "filterText": "setattr", "insertText": "setattr(${1:object}, ${2:name}, ${3:value})$0", "insertTextFormat": 2}, {"label": "slice", "kind": 7, "sortText": "z", "filterText": "slice", "insertText": "slice(${1:stop})$0", "insertTextFormat": 2}, {"label": "songs", "kind": 6, "sortText": "z", "filterText": "songs", "insertText": "songs", "insertTextFormat": 1}, {"label": "sorted", "kind": 3, "sortText": "z", "filterText": "sorted", "insertText": "sorted(${1:iterable})$0", "insertTextFormat": 2}, {"label": "staticmethod", "kind": 7, "sortText": "z", "filterText": "staticmethod", "insertText": "staticmethod(${1:f})$0", "insertTextFormat": 2}, {"label": "StopAsyncIteration", "kind": 7, "sortText": "z", "filterText": "StopAsyncIteration", "insertText": "StopAsyncIteration($0)", "insertTextFormat": 2}, {"label": "StopIteration", "kind": 7, "sortText": "z", "filterText": "StopIteration", "insertText": "StopIteration($0)", "insertTextFormat": 2}, {"label": "str", "kind": 7, "sortText": "z", "filterText": "str", "insertText": "str($0)", "insertTextFormat": 2}, {"label": "sum", "kind": 3, "sortText": "z", "filterText": "sum", "insertText": "sum(${1:iterable})$0", "insertTextFormat": 2}, {"label": "super", "kind": 7, "sortText": "z", "filterText": "super", "insertText": "super(${1:t}, ${2:obj})$0", "insertTextFormat": 2}, {"label": "SyntaxError", "kind": 7, "sortText": "z", "filterText": "SyntaxError", "insertText": "SyntaxError($0)", "insertTextFormat": 2}, {"label": "SyntaxWarning", "kind": 7, "sortText": "z", "filterText": "SyntaxWarning", "insertText": "SyntaxWarning($0)", "insertTextFormat": 2}, {"label": "SystemError", "kind": 7, "sortText": "z", "filterText": "SystemError", "insertText": "SystemError($0)", "insertTextFormat": 2}, {"label": "SystemExit", "kind": 7, "sortText": "z", "filterText": "SystemExit", "insertText": "SystemExit($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 261, "result": {"label": "songs", "kind": 6, "detail": "songs = set()", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "songs", "insertText": "songs", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 262, "result": [{"title": "Inline variable", "kind": "refactor.inline", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 204}, "edits": [{"range": {"start": {"line": 5, "character": 4}, "end": {"line": 6, "character": 4}}, "newText": ""}, {"range": {"start": {"line": 16, "character": 16}, "end": {"line": 16, "character": 20}}, "newText": "et()"}, {"range": {"start": {"line": 21, "character": 34}, "end": {"line": 21, "character": 39}}, "newText": "(set())"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 21, "character": 40}, "end": {"line": 21, "character": 41}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 22, "character": 0}, "end": {"line": 22, "character": 8}}, "message": "IndentationError: unexpected indent", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 263, "result": {"isIncomplete": false, "items": [{"label": "add", "kind": 3, "sortText": "z", "filterText": "add", "insertText": "add(${1:element})$0", "insertTextFormat": 2}, {"label": "clear", "kind": 3, "sortText": "z", "filterText": "clear", "insertText": "clear()$0", "insertTextFormat": 2}, {"label": "copy", "kind": 3, "sortText": "z", "filterText": "copy", "insertText": "copy()$0", "insertTextFormat": 2}, {"label": "difference", "kind": 3, "sortText": "z", "filterText": "difference", "insertText": "difference($0)", "insertTextFormat": 2}, {"label": "difference_update", "kind": 3, "sortText": "z", "filterText": "difference_update", "insertText": "difference_update($0)", "insertTextFormat": 2}, {"label": "discard", "kind": 3, "sortText": "z", "filterText": "discard", "insertText": "discard(${1:element})$0", "insertTextFormat": 2}, {"label": "intersection", "kind": 3, "sortText": "z", "filterText": "intersection", "insertText": "intersection($0)", "insertTextFormat": 2}, {"label": "intersection_update", "kind": 3, "sortText": "z", "filterText": "intersection_update", "insertText": "intersection_update($0)", "insertTextFormat": 2}, {"label": "isdisjoint", "kind": 3, "sortText": "z", "filterText": "isdisjoint", "insertText": "isdisjoint(${1:s})$0", "insertTextFormat": 2}, {"label": "issubset", "kind": 3, "sortText": "z", "filterText": "issubset", "insertText": "issubset(${1:s})$0", "insertTextFormat": 2}, {"label": "issuperset", "kind": 3, "sortText": "z", "filterText": "issuperset", "insertText": "issuperset(${1:s})$0", "insertTextFormat": 2}, {"label": "pop", "kind": 3, "sortText": "z", "filterText": "pop", "insertText": "pop()$0", "insertTextFormat": 2}, {"label": "remove", "kind": 3, "sortText": "z", "filterText": "remove", "insertText": "remove(${1:element})$0", "insertTextFormat": 2}, {"label": "symmetric_difference", "kind": 3, "sortText": "z", "filterText": "symmetric_difference", "insertText": "symmetric_difference(${1:s})$0", "insertTextFormat": 2}, {"label": "symmetric_difference_update", "kind": 3, "sortText": "z", "filterText": "symmetric_difference_update", "insertText": "symmetric_difference_update(${1:s})$0", "insertTextFormat": 2}, {"label": "union", "kind": 3, "sortText": "z", "filterText": "union", "insertText": "union($0)", "insertTextFormat": 2}, {"label": "update", "kind": 3, "sortText": "z", "filterText": "update", "insertText": "update($0)", "insertTextFormat": 2}, {"label": "__and__", "kind": 3, "sortText": "z", "filterText": "__and__", "insertText": "__and__(${1:s})$0", "insertTextFormat": 2}, {"label": "__annotations__", "kind": 6, "sortText": "z", "filterText": "__annotations__", "insertText": "__annotations__", "insertTextFormat": 1}, {"label": "__class__", "kind": 3, "sortText": "z", "filterText": "__class__", "insertText": "__class__($0)", "insertTextFormat": 2}, {"label": "__contains__", "kind": 3, "sortText": "z", "filterText": "__contains__", "insertText": "__contains__(${1:o})$0", "insertTextFormat": 2}, {"label": "__delattr__", "kind": 3, "sortText": "z", "filterText": "__delattr__", "insertText": "__delattr__(${1:name})$0", "insertTextFormat": 2}, {"label": "__dict__", "kind": 6, "sortText": "z", "filterText": "__dict__", "insertText": "__dict__", "insertTextFormat": 1}, {"label": "__dir__", "kind": 3, "sortText": "z", "filterText": "__dir__", "insertText": "__dir__()$0", "insertTextFormat": 2}, {"label": "__doc__", "kind": 6, "sortText": "z", "filterText": "__doc__", "insertText": "__doc__", "insertTextFormat": 1}, {"label": "__eq__", "kind": 3, "sortText": "z", "filterText": "__eq__", "insertText": "__eq__(${1:o})$0", "insertTextFormat": 2}, {"label": "__format__", "kind": 3, "sortText": "z", "filterText": "__format__", "insertText": "__format__(${1:format_spec})$0", "insertTextFormat": 2}, {"label": "__ge__", "kind": 3, "sortText": "z", "filterText": "__ge__", "insertText": "__ge__(${1:s})$0", "insertTextFormat": 2}, {"label": "__getattribute__", "kind": 3, "sortText": "z", "filterText": "__getattribute__", "insertText": "__getattribute__(${1:name})$0", "insertTextFormat": 2}, {"label": "__gt__", "kind": 3, "sortText": "z", "filterText": "__gt__", "insertText": "__gt__(${1:s})$0", "insertTextFormat": 2}, {"label": "__hash__", "kind": 6, "sortText": "z", "filterText": "__hash__", "insertText": "__hash__", "insertTextFormat": 1}, {"label": "__iand__", "kind": 3, "sortText": "z", "filterText": "__iand__", "insertText": "__iand__(${1:s})$0", "insertTextFormat": 2}, {"label": "__init__", "kind": 3, "sortText": "z", "filterText": "__init__", "insertText": "__init__($0)", "insertTextFormat": 2}, {"label": "__init_subclass__", "kind": 3, "sortText": "z", "filterText": "__init_subclass__", "insertText": "__init_subclass__()$0", "insertTextFormat": 2}, {"label": "__ior__", "kind": 3, "sortText": "z", "filterText": "__ior__", "insertText": "__ior__(${1:s})$0", "insertTextFormat": 2}, {"label": "__isub__", "kind": 3, "sortText": "z", "filterText": "__isub__", "insertText": "__isub__(${1:s})$0", "insertTextFormat": 2}, {"label": "__iter__", "kind": 3, "sortText": "z", "filterText": "__iter__", "insertText": "__iter__()$0", "insertTextFormat": 2}, {"label": "__ixor__", "kind": 3, "sortText": "z", "filterText": "__ixor__", "insertText": "__ixor__(${1:s})$0", "insertTextFormat": 2}, {"label": "__le__", "kind": 3, "sortText": "z", "filterText": "__le__", "insertText": "__le__(${1:s})$0", "insertTextFormat": 2}, {"label": "__len__", "kind": 3, "sortText": "z", "filterText": "__len__", "insertText": "__len__()$0", "insertTextFormat": 2}, {"label": "__lt__", "kind": 3, "sortText": "z", "filterText": "__lt__", "insertText": "__lt__(${1:s})$0", "insertTextFormat": 2}, {"label": "__module__", "kind": 6, "sortText": "z", "filterText": "__module__", "insertText": "__module__", "insertTextFormat": 1}, {"label": "__ne__", "kind": 3, "sortText": "z", "filterText": "__ne__", "insertText": "__ne__(${1:o})$0", "insertTextFormat": 2}, {"label": "__new__", "kind": 3, "sortText": "z", "filterText": "__new__", "insertText": "__new__()$0", "insertTextFormat": 2}, {"label": "__or__", "kind": 3, "sortText": "z", "filterText": "__or__", "insertText": "__or__(${1:s})$0", "insertTextFormat": 2}, {"label": "__reduce__", "kind": 3, "sortText": "z", "filterText": "__reduce__", "insertText": "__reduce__()$0", "insertTextFormat": 2}, {"label": "__reduce_ex__", "kind": 3, "sortText": "z", "filterText": "__reduce_ex__", "insertText": "__reduce_ex__(${1:protocol})$0", "insertTextFormat": 2}, {"label": "__repr__", "kind": 3, "sortText": "z", "filterText": "__repr__", "insertText": "__repr__()$0", "insertTextFormat": 2}, {"label": "__setattr__", "kind": 3, "sortText": "z", "filterText": "__setattr__", "insertText": "__setattr__(${1:name}, ${2:value})$0", "insertTextFormat": 2}, {"label": "__sizeof__", "kind": 3, "sortText": "z", "filterText": "__sizeof__", "insertText": "__sizeof__()$0", "insertTextFormat": 2}, {"label": "__slots__", "kind": 6, "sortText": "z", "filterText": "__slots__", "insertText": "__slots__", "insertTextFormat": 1}, {"label": "__str__", "kind": 3, "sortText": "z", "filterText": "__str__", "insertText": "__str__()$0", "insertTextFormat": 2}, {"label": "__sub__", "kind": 3, "sortText": "z", "filterText": "__sub__", "insertText": "__sub__(${1:s})$0", "insertTextFormat": 2}, {"label": "__xor__", "kind": 3, "sortText": "z", "filterText": "__xor__", "insertText": "__xor__(${1:s})$0", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 264, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 265, "result": {"label": "__and__", "kind": 3, "detail": "def __and__", "documentation": {"kind": "markdown", "value": "```text\n__and__(s: AbstractSet[object]) -> Set[_T]\n```"}, "sortText": "z", "filterText": "__and__", "insertText": "__and__(${1:s})$0", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 266, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 267, "result": {"label": "intersection", "kind": 3, "detail": "def intersection", "documentation": {"kind": "markdown", "value": "```text\nintersection(*s: Iterable[Any]) -> Set[_T]\n```"}, "sortText": "z", "filterText": "intersection", "insertText": "intersection($0)", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 268, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 21, "character": 40}, "end": {"line": 21, "character": 42}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 22, "character": 0}, "end": {"line": 22, "character": 8}}, "message": "IndentationError: unexpected indent", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 269, "result": {"label": "isdisjoint", "kind": 3, "detail": "def isdisjoint", "documentation": {"kind": "markdown", "value": "```text\nisdisjoint(s: Iterable[Any]) -> bool\n```"}, "sortText": "z", "filterText": "isdisjoint", "insertText": "isdisjoint(${1:s})$0", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 270, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 271, "result": {"label": "issuperset", "kind": 3, "detail": "def issuperset", "documentation": {"kind": "markdown", "value": "```text\nissuperset(s: Iterable[Any]) -> bool\n```"}, "sortText": "z", "filterText": "issuperset", "insertText": "issuperset(${1:s})$0", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 272, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 273, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 274, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 275, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 276, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 277, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 278, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 279, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 280, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 281, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 282, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 283, "result": {"contents": {"kind": "markdown", "value": "```python\nsongs: set\n```\n---\n```python\nsongs = set()\n```\n**Full name:** `fixer.get_songs.songs`"}, "range": {"start": {"line": 21, "character": 34}, "end": {"line": 21, "character": 39}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 284, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 285, "result": {"contents": {"kind": "markdown", "value": "```python\nsongs: set\n```\n---\n```python\nsongs = set()\n```\n**Full name:** `fixer.get_songs.songs`"}, "range": {"start": {"line": 21, "character": 34}, "end": {"line": 21, "character": 39}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 286, "result": [{"range": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 9}}}, {"range": {"start": {"line": 16, "character": 15}, "end": {"line": 16, "character": 20}}}, {"range": {"start": {"line": 21, "character": 34}, "end": {"line": 21, "character": 39}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 287, "result": [{"title": "Inline variable", "kind": "refactor.inline", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 216}, "edits": [{"range": {"start": {"line": 5, "character": 4}, "end": {"line": 6, "character": 4}}, "newText": ""}, {"range": {"start": {"line": 16, "character": 16}, "end": {"line": 16, "character": 20}}, "newText": "et()"}, {"range": {"start": {"line": 21, "character": 34}, "end": {"line": 21, "character": 39}}, "newText": "(set())"}]}]}}, {"title": "Extract expression into variable 'jls_extract_var'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 216}, "edits": [{"range": {"start": {"line": 21, "character": 4}, "end": {"line": 21, "character": 4}}, "newText": "jls_extract_var = songs\n    "}, {"range": {"start": {"line": 21, "character": 34}, "end": {"line": 21, "character": 39}}, "newText": "jls_extract_var"}]}]}}, {"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 216}, "edits": [{"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 4}}, "newText": "jls_extract_def(songs):\n    return songs\n\n\ndef "}, {"range": {"start": {"line": 21, "character": 34}, "end": {"line": 21, "character": 39}}, "newText": "jls_extract_def(songs)"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 288, "result": [{"title": "Inline variable", "kind": "refactor.inline", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 220}, "edits": [{"range": {"start": {"line": 5, "character": 4}, "end": {"line": 6, "character": 4}}, "newText": ""}, {"range": {"start": {"line": 16, "character": 16}, "end": {"line": 16, "character": 20}}, "newText": "et()"}, {"range": {"start": {"line": 21, "character": 38}, "end": {"line": 21, "character": 43}}, "newText": "(set())"}]}]}}, {"title": "Extract expression into variable 'jls_extract_var'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 220}, "edits": [{"range": {"start": {"line": 21, "character": 4}, "end": {"line": 21, "character": 4}}, "newText": "jls_extract_var = songs\n    "}, {"range": {"start": {"line": 21, "character": 38}, "end": {"line": 21, "character": 43}}, "newText": "jls_extract_var"}]}]}}, {"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 220}, "edits": [{"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 4}}, "newText": "jls_extract_def(songs):\n    return songs\n\n\ndef "}, {"range": {"start": {"line": 21, "character": 38}, "end": {"line": 21, "character": 43}}, "newText": "jls_extract_def(songs)"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 289, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 290, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 291, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 292, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement contains_directory\n```\n---\n```python\ncontains_directory = True\n```\n**Full name:** `fixer.get_songs.contains_directory`"}, "range": {"start": {"line": 21, "character": 11}, "end": {"line": 21, "character": 29}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 293, "result": {"contents": {"kind": "markdown", "value": "```python\nkeyword and\n```\n---\n```text\nBoolean operations\n******************\n\n   or_test  ::= and_test | or_test \"or\" and_test\n   and_test ::= not_test | and_test \"and\" not_test\n   not_test ::= comparison | \"not\" not_test\n\nIn the context of Boolean operations, and also when expressions are\nused by control flow statements, the following values are interpreted\nas false: \"False\", \"None\", numeric zero of all types, and empty\nstrings and containers (including strings, tuples, lists,\ndictionaries, sets and frozensets).  All other values are interpreted\nas true.  User-defined objects can customize their truth value by\nproviding a \"__bool__()\" method.\n\nThe operator \"not\" yields \"True\" if its argument is false, \"False\"\notherwise.\n\nThe expression \"x and y\" first evaluates *x*; if *x* is false, its\nvalue is returned; otherwise, *y* is evaluated and the resulting value\nis returned.\n\nThe expression \"x or y\" first evaluates *x*; if *x* is true, its value\nis returned; otherwise, *y* is evaluated and the resulting value is\nreturned.\n\nNote that neither \"and\" nor \"or\" restrict the value and type they\nreturn to \"False\" and \"True\", but rather return the last evaluated\nargument.  This is sometimes useful, e.g., if \"s\" is a string that\nshould be replaced by a default value if it is empty, the expression\n\"s or 'foo'\" yields the desired value.  Because \"not\" has to create a\nnew value, it returns a boolean value regardless of the type of its\nargument (for example, \"not 'foo'\" produces \"False\" rather than \"''\".)\n```"}, "range": {"start": {"line": 21, "character": 30}, "end": {"line": 21, "character": 33}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 294, "result": {"contents": {"kind": "markdown", "value": "```python\nkeyword not\n```\n---\n```text\nBoolean operations\n******************\n\n   or_test  ::= and_test | or_test \"or\" and_test\n   and_test ::= not_test | and_test \"and\" not_test\n   not_test ::= comparison | \"not\" not_test\n\nIn the context of Boolean operations, and also when expressions are\nused by control flow statements, the following values are interpreted\nas false: \"False\", \"None\", numeric zero of all types, and empty\nstrings and containers (including strings, tuples, lists,\ndictionaries, sets and frozensets).  All other values are interpreted\nas true.  User-defined objects can customize their truth value by\nproviding a \"__bool__()\" method.\n\nThe operator \"not\" yields \"True\" if its argument is false, \"False\"\notherwise.\n\nThe expression \"x and y\" first evaluates *x*; if *x* is false, its\nvalue is returned; otherwise, *y* is evaluated and the resulting value\nis returned.\n\nThe expression \"x or y\" first evaluates *x*; if *x* is true, its value\nis returned; otherwise, *y* is evaluated and the resulting value is\nreturned.\n\nNote that neither \"and\" nor \"or\" restrict the value and type they\nreturn to \"False\" and \"True\", but rather return the last evaluated\nargument.  This is sometimes useful, e.g., if \"s\" is a string that\nshould be replaced by a default value if it is empty, the expression\n\"s or 'foo'\" yields the desired value.  Because \"not\" has to create a\nnew value, it returns a boolean value regardless of the type of its\nargument (for example, \"not 'foo'\" produces \"False\" rather than \"''\".)\n```"}, "range": {"start": {"line": 21, "character": 34}, "end": {"line": 21, "character": 37}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 295, "result": null}
ERROR:pygls.protocol:Failed to handle request 296 textDocument/codeAction partial_result_token=None work_done_token=None text_document=TextDocumentIdentifier(uri='file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py') range=21:34-21:34 context=CodeActionContext(diagnostics=[], only=None)
Traceback (most recent call last):
  File "/home/neb/.vscode/extensions/ms-python.python-2021.8.1159798656/pythonFiles/lib/jedilsp/pygls/protocol.py", line 331, in _handle_request
    self._execute_request(msg_id, handler, params)
  File "/home/neb/.vscode/extensions/ms-python.python-2021.8.1159798656/pythonFiles/lib/jedilsp/pygls/protocol.py", line 260, in _execute_request
    method_name, method_type, msg_id, handler(params))
  File "/home/neb/.vscode/extensions/ms-python.python-2021.8.1159798656/pythonFiles/lib/jedilsp/jedi_language_server/server.py", line 508, in code_action
    extract_variable_refactoring = jedi_script.extract_variable(
  File "/home/neb/.vscode/extensions/ms-python.python-2021.8.1159798656/pythonFiles/lib/jedilsp/jedi/api/helpers.py", line 488, in wrapper
    return func(self, line, column, *args, **kwargs)
  File "/home/neb/.vscode/extensions/ms-python.python-2021.8.1159798656/pythonFiles/lib/jedilsp/jedi/api/__init__.py", line 614, in extract_variable
    return extract_variable(
  File "/home/neb/.vscode/extensions/ms-python.python-2021.8.1159798656/pythonFiles/lib/jedilsp/jedi/api/refactoring/extract.py", line 19, in extract_variable
    nodes = _find_nodes(module_node, pos, until_pos)
  File "/home/neb/.vscode/extensions/ms-python.python-2021.8.1159798656/pythonFiles/lib/jedilsp/jedi/api/refactoring/extract.py", line 87, in _find_nodes
    nodes = _remove_unwanted_expression_nodes(parent_node, pos, until_pos)
  File "/home/neb/.vscode/extensions/ms-python.python-2021.8.1159798656/pythonFiles/lib/jedilsp/jedi/api/refactoring/extract.py", line 196, in _remove_unwanted_expression_nodes
    nodes = nodes[start_index:end_index + 1]
UnboundLocalError: local variable 'end_index' referenced before assignment
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 296, "error": {"code": -32602, "message": "UnboundLocalError: local variable 'end_index' referenced before assignment", "data": "{'traceback': ['  File \"/home/neb/.vscode/extensions/ms-python.python-2021.8.1159798656/pythonFiles/lib/jedilsp/pygls/protocol.py\", line 331, in _handle_request\\n    self._execute_request(msg_id, handler, params)\\n', '  File \"/home/neb/.vscode/extensions/ms-python.python-2021.8.1159798656/pythonFiles/lib/jedilsp/pygls/protocol.py\", line 260, in _execute_request\\n    method_name, method_type, msg_id, handler(params))\\n', '  File \"/home/neb/.vscode/extensions/ms-python.python-2021.8.1159798656/pythonFiles/lib/jedilsp/jedi_language_server/server.py\", line 508, in code_action\\n    extract_variable_refactoring = jedi_script.extract_variable(\\n', '  File \"/home/neb/.vscode/extensions/ms-python.python-2021.8.1159798656/pythonFiles/lib/jedilsp/jedi/api/helpers.py\", line 488, in wrapper\\n    return func(self, line, column, *args, **kwargs)\\n', '  File \"/home/neb/.vscode/extensions/ms-python.python-2021.8.1159798656/pythonFiles/lib/jedilsp/jedi/api/__init__.py\", line 614, in extract_variable\\n    return extract_variable(\\n', '  File \"/home/neb/.vscode/extensions/ms-python.python-2021.8.1159798656/pythonFiles/lib/jedilsp/jedi/api/refactoring/extract.py\", line 19, in extract_variable\\n    nodes = _find_nodes(module_node, pos, until_pos)\\n', '  File \"/home/neb/.vscode/extensions/ms-python.python-2021.8.1159798656/pythonFiles/lib/jedilsp/jedi/api/refactoring/extract.py\", line 87, in _find_nodes\\n    nodes = _remove_unwanted_expression_nodes(parent_node, pos, until_pos)\\n', '  File \"/home/neb/.vscode/extensions/ms-python.python-2021.8.1159798656/pythonFiles/lib/jedilsp/jedi/api/refactoring/extract.py\", line 196, in _remove_unwanted_expression_nodes\\n    nodes = nodes[start_index:end_index + 1]\\n']}"}}
[Error - 9:05:58 p.m.] Request textDocument/codeAction failed.
  Message: UnboundLocalError: local variable 'end_index' referenced before assignment
  Code: -32602 
{'traceback': ['  File "/home/neb/.vscode/extensions/ms-python.python-2021.8.1159798656/pythonFiles/lib/jedilsp/pygls/protocol.py", line 331, in _handle_request\n    self._execute_request(msg_id, handler, params)\n', '  File "/home/neb/.vscode/extensions/ms-python.python-2021.8.1159798656/pythonFiles/lib/jedilsp/pygls/protocol.py", line 260, in _execute_request\n    method_name, method_type, msg_id, handler(params))\n', '  File "/home/neb/.vscode/extensions/ms-python.python-2021.8.1159798656/pythonFiles/lib/jedilsp/jedi_language_server/server.py", line 508, in code_action\n    extract_variable_refactoring = jedi_script.extract_variable(\n', '  File "/home/neb/.vscode/extensions/ms-python.python-2021.8.1159798656/pythonFiles/lib/jedilsp/jedi/api/helpers.py", line 488, in wrapper\n    return func(self, line, column, *args, **kwargs)\n', '  File "/home/neb/.vscode/extensions/ms-python.python-2021.8.1159798656/pythonFiles/lib/jedilsp/jedi/api/__init__.py", line 614, in extract_variable\n    return extract_variable(\n', '  File "/home/neb/.vscode/extensions/ms-python.python-2021.8.1159798656/pythonFiles/lib/jedilsp/jedi/api/refactoring/extract.py", line 19, in extract_variable\n    nodes = _find_nodes(module_node, pos, until_pos)\n', '  File "/home/neb/.vscode/extensions/ms-python.python-2021.8.1159798656/pythonFiles/lib/jedilsp/jedi/api/refactoring/extract.py", line 87, in _find_nodes\n    nodes = _remove_unwanted_expression_nodes(parent_node, pos, until_pos)\n', '  File "/home/neb/.vscode/extensions/ms-python.python-2021.8.1159798656/pythonFiles/lib/jedilsp/jedi/api/refactoring/extract.py", line 196, in _remove_unwanted_expression_nodes\n    nodes = nodes[start_index:end_index + 1]\n']}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 297, "result": [{"title": "Extract expression into variable 'jls_extract_var'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 220}, "edits": [{"range": {"start": {"line": 21, "character": 4}, "end": {"line": 21, "character": 28}}, "newText": "jls_extract_var = not songs.isempt"}, {"range": {"start": {"line": 21, "character": 29}, "end": {"line": 21, "character": 50}}, "newText": "\n    if not contains_director"}, {"range": {"start": {"line": 21, "character": 51}, "end": {"line": 21, "character": 51}}, "newText": " and jls_extract_var"}]}]}}, {"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 220}, "edits": [{"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 4}}, "newText": "jls_extract_def(songs):\n    return not songs.isempty\n\n\ndef "}, {"range": {"start": {"line": 21, "character": 34}, "end": {"line": 21, "character": 51}}, "newText": "jls_extract_def(songs)"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 21, "character": 34}, "end": {"line": 21, "character": 35}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 22, "character": 0}, "end": {"line": 22, "character": 8}}, "message": "IndentationError: unexpected indent", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 298, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 299, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 300, "result": {"isIncomplete": false, "items": [{"label": "set", "kind": 7, "sortText": "z", "filterText": "set", "insertText": "set($0)", "insertTextFormat": 2}, {"label": "setattr", "kind": 3, "sortText": "z", "filterText": "setattr", "insertText": "setattr(${1:object}, ${2:name}, ${3:value})$0", "insertTextFormat": 2}, {"label": "slice", "kind": 7, "sortText": "z", "filterText": "slice", "insertText": "slice(${1:stop})$0", "insertTextFormat": 2}, {"label": "songs", "kind": 6, "sortText": "z", "filterText": "songs", "insertText": "songs", "insertTextFormat": 1}, {"label": "sorted", "kind": 3, "sortText": "z", "filterText": "sorted", "insertText": "sorted(${1:iterable})$0", "insertTextFormat": 2}, {"label": "staticmethod", "kind": 7, "sortText": "z", "filterText": "staticmethod", "insertText": "staticmethod(${1:f})$0", "insertTextFormat": 2}, {"label": "StopAsyncIteration", "kind": 7, "sortText": "z", "filterText": "StopAsyncIteration", "insertText": "StopAsyncIteration($0)", "insertTextFormat": 2}, {"label": "StopIteration", "kind": 7, "sortText": "z", "filterText": "StopIteration", "insertText": "StopIteration($0)", "insertTextFormat": 2}, {"label": "str", "kind": 7, "sortText": "z", "filterText": "str", "insertText": "str($0)", "insertTextFormat": 2}, {"label": "sum", "kind": 3, "sortText": "z", "filterText": "sum", "insertText": "sum(${1:iterable})$0", "insertTextFormat": 2}, {"label": "super", "kind": 7, "sortText": "z", "filterText": "super", "insertText": "super(${1:t}, ${2:obj})$0", "insertTextFormat": 2}, {"label": "SyntaxError", "kind": 7, "sortText": "z", "filterText": "SyntaxError", "insertText": "SyntaxError($0)", "insertTextFormat": 2}, {"label": "SyntaxWarning", "kind": 7, "sortText": "z", "filterText": "SyntaxWarning", "insertText": "SyntaxWarning($0)", "insertTextFormat": 2}, {"label": "SystemError", "kind": 7, "sortText": "z", "filterText": "SystemError", "insertText": "SystemError($0)", "insertTextFormat": 2}, {"label": "SystemExit", "kind": 7, "sortText": "z", "filterText": "SystemExit", "insertText": "SystemExit($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 301, "result": {"label": "songs", "kind": 6, "detail": "songs = set()", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "songs", "insertText": "songs", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 302, "result": [{"title": "Inline variable", "kind": "refactor.inline", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 226}, "edits": [{"range": {"start": {"line": 5, "character": 4}, "end": {"line": 6, "character": 4}}, "newText": ""}, {"range": {"start": {"line": 16, "character": 16}, "end": {"line": 16, "character": 20}}, "newText": "et()"}, {"range": {"start": {"line": 21, "character": 34}, "end": {"line": 21, "character": 39}}, "newText": "(set())"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 303, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 304, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 305, "result": {"contents": {"kind": "markdown", "value": "```python\nsongs: set\n```\n---\n```python\nsongs = set()\n```\n**Full name:** `fixer.get_songs.songs`"}, "range": {"start": {"line": 21, "character": 34}, "end": {"line": 21, "character": 39}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 306, "result": [{"range": {"start": {"line": 4, "character": 25}, "end": {"line": 4, "character": 31}}}, {"range": {"start": {"line": 16, "character": 4}, "end": {"line": 16, "character": 10}}}, {"range": {"start": {"line": 19, "character": 23}, "end": {"line": 19, "character": 29}}}, {"range": {"start": {"line": 22, "character": 15}, "end": {"line": 22, "character": 21}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 307, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 308, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 309, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 310, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 311, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 312, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 313, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement contains_directory\n```\n---\n```python\ncontains_directory = True\n```\n**Full name:** `fixer.get_songs.contains_directory`"}, "range": {"start": {"line": 14, "character": 12}, "end": {"line": 14, "character": 30}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 314, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 315, "result": {"contents": {"kind": "markdown", "value": "```python\nkeyword False\n```"}, "range": {"start": {"line": 7, "character": 25}, "end": {"line": 7, "character": 30}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 316, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement filename\n```\n---\n```python\nfor filename in os.scandir(directory): if filename.endswith(\".flac\" or \".jpg\" or \".png\"): set.add(filename) if filename.is_dir: dirs.add(filename) contains_directory = True\n```\n**Full name:** `fixer.get_songs.filename`"}, "range": {"start": {"line": 10, "character": 20}, "end": {"line": 10, "character": 28}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 317, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 318, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 319, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 320, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 321, "result": {"contents": {"kind": "markdown", "value": "```python\ndef add(self, element: _T) -> None\n```\n---\n**Full name:** `builtins.set.add`"}, "range": {"start": {"line": 10, "character": 16}, "end": {"line": 10, "character": 19}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 322, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 323, "result": [{"range": {"start": {"line": 4, "character": 25}, "end": {"line": 4, "character": 31}}}, {"range": {"start": {"line": 16, "character": 4}, "end": {"line": 16, "character": 10}}}, {"range": {"start": {"line": 19, "character": 23}, "end": {"line": 19, "character": 29}}}, {"range": {"start": {"line": 22, "character": 15}, "end": {"line": 22, "character": 21}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 324, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 325, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement contains_directory\n```\n---\n```python\ncontains_directory = True\n```\n**Full name:** `fixer.get_songs.contains_directory`"}, "range": {"start": {"line": 21, "character": 11}, "end": {"line": 21, "character": 29}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 326, "result": {"contents": {"kind": "markdown", "value": "```python\nsongs: set\n```\n---\n```python\nsongs = set()\n```\n**Full name:** `fixer.get_songs.songs`"}, "range": {"start": {"line": 21, "character": 34}, "end": {"line": 21, "character": 39}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 327, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 328, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 329, "result": {"isIncomplete": false, "items": [{"label": "def", "kind": 14, "sortText": "z", "filterText": "def", "insertText": "def", "insertTextFormat": 1}, {"label": "del", "kind": 14, "sortText": "z", "filterText": "del", "insertText": "del", "insertTextFormat": 1}, {"label": "delattr", "kind": 3, "sortText": "z", "filterText": "delattr", "insertText": "delattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "DeprecationWarning", "kind": 7, "sortText": "z", "filterText": "DeprecationWarning", "insertText": "DeprecationWarning($0)", "insertTextFormat": 2}, {"label": "dict", "kind": 7, "sortText": "z", "filterText": "dict", "insertText": "dict($0)", "insertTextFormat": 2}, {"label": "dir", "kind": 3, "sortText": "z", "filterText": "dir", "insertText": "dir($0)", "insertTextFormat": 2}, {"label": "divmod", "kind": 3, "sortText": "z", "filterText": "divmod", "insertText": "divmod(${1:a}, ${2:b})$0", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 330, "result": {"label": "def", "kind": 14, "detail": "keyword def", "documentation": {"kind": "markdown", "value": "```text\nFunction definitions\n********************\n\nA function definition defines a user-defined function object (see\nsection The standard type hierarchy):\n\n   funcdef                   ::= [decorators] \"def\" funcname \"(\" [parameter_list] \")\"\n               [\"->\" expression] \":\" suite\n   decorators                ::= decorator+\n   decorator                 ::= \"@\" assignment_expression NEWLINE\n   parameter_list            ::= defparameter (\",\" defparameter)* \",\" \"/\" [\",\" [parameter_list_no_posonly]]\n                        | parameter_list_no_posonly\n   parameter_list_no_posonly ::= defparameter (\",\" defparameter)* [\",\" [parameter_list_starargs]]\n                                 | parameter_list_starargs\n   parameter_list_starargs   ::= \"*\" [parameter] (\",\" defparameter)* [\",\" [\"**\" parameter [\",\"]]]\n                               | \"**\" parameter [\",\"]\n   parameter                 ::= identifier [\":\" expression]\n   defparameter              ::= parameter [\"=\" expression]\n   funcname                  ::= identifier\n\nA function definition is an executable statement.  Its execution binds\nthe function name in the current local namespace to a function object\n(a wrapper around the executable code for the function).  This\nfunction object contains a reference to the current global namespace\nas the global namespace to be used when the function is called.\n\nThe function definition does not execute the function body; this gets\nexecuted only when the function is called. [2]\n\nA function definition may be wrapped by one or more *decorator*\nexpressions. Decorator expressions are evaluated when the function is\ndefined, in the scope that contains the function definition.  The\nresult must be a callable, which is invoked with the function object\nas the only argument. The returned value is bound to the function name\ninstead of the function object.  Multiple decorators are applied in\nnested fashion. For example, the following code\n\n   @f1(arg)\n   @f2\n   def func(): pass\n\nis roughly equivalent to\n\n   def func(): pass\n   func = f1(arg)(f2(func))\n\nexcept that the original function is not temporarily bound to the name\n\"func\".\n\nChanged in version 3.9: Functions may be decorated with any valid\n\"assignment_expression\". Previously, the grammar was much more\nrestrictive; see **PEP 614** for details.\n\nWhen one or more *parameters* have the form *parameter* \"=\"\n*expression*, the function is said to have \u201cdefault parameter values.\u201d\nFor a parameter with a default value, the corresponding *argument* may\nbe omitted from a call, in which case the parameter\u2019s default value is\nsubstituted.  If a parameter has a default value, all following\nparameters up until the \u201c\"*\"\u201d must also have a default value \u2014 this is\na syntactic restriction that is not expressed by the grammar.\n\n**Default parameter values are evaluated from left to right when the\nfunction definition is executed.** This means that the expression is\nevaluated once, when the function is defined, and that the same \u201cpre-\ncomputed\u201d value is used for each call.  This is especially important\nto understand when a default parameter is a mutable object, such as a\nlist or a dictionary: if the function modifies the object (e.g. by\nappending an item to a list), the default value is in effect modified.\nThis is generally not what was intended.  A way around this is to use\n\"None\" as the default, and explicitly test for it in the body of the\nfunction, e.g.:\n\n   def whats_on_the_telly(penguin=None):\n       if penguin is None:\n           penguin = []\n       penguin.append(\"property of the zoo\")\n       return penguin\n\nFunction call semantics are described in more detail in section Calls.\nA function call always assigns values to all parameters mentioned in\nthe parameter list, either from positional arguments, from keyword\narguments, or from default values.  If the form \u201c\"*identifier\"\u201d is\npresent, it is initialized to a tuple receiving any excess positional\nparameters, defaulting to the empty tuple. If the form\n\u201c\"**identifier\"\u201d is present, it is initialized to a new ordered\nmapping receiving any excess keyword arguments, defaulting to a new\nempty mapping of the same type.  Parameters after \u201c\"*\"\u201d or\n\u201c\"*identifier\"\u201d are keyword-only parameters and may only be passed by\nkeyword arguments.  Parameters before \u201c\"/\"\u201d are positional-only\nparameters and may only be passed by positional arguments.\n\nChanged in version 3.8: The \"/\" function parameter syntax may be used\nto indicate positional-only parameters. See **PEP 570** for details.\n\nParameters may have an *annotation* of the form \u201c\": expression\"\u201d\nfollowing the parameter name.  Any parameter may have an annotation,\neven those of the form \"*identifier\" or \"**identifier\".  Functions may\nhave \u201creturn\u201d annotation of the form \u201c\"-> expression\"\u201d after the\nparameter list.  These annotations can be any valid Python expression.\nThe presence of annotations does not change the semantics of a\nfunction.  The annotation values are available as values of a\ndictionary keyed by the parameters\u2019 names in the \"__annotations__\"\nattribute of the function object.  If the \"annotations\" import from\n\"__future__\" is used, annotations are preserved as strings at runtime\nwhich enables postponed evaluation.  Otherwise, they are evaluated\nwhen the function definition is executed.  In this case annotations\nmay be evaluated in a different order than they appear in the source\ncode.\n\nIt is also possible to create anonymous functions (functions not bound\nto a name), for immediate use in expressions.  This uses lambda\nexpressions, described in section Lambdas.  Note that the lambda\nexpression is merely a shorthand for a simplified function definition;\na function defined in a \u201c\"def\"\u201d statement can be passed around or\nassigned to another name just like a function defined by a lambda\nexpression.  The \u201c\"def\"\u201d form is actually more powerful since it\nallows the execution of multiple statements and annotations.\n\n**Programmer\u2019s note:** Functions are first-class objects.  A \u201c\"def\"\u201d\nstatement executed inside a function definition defines a local\nfunction that can be returned or passed around.  Free variables used\nin the nested function can access the local variables of the function\ncontaining the def.  See section Naming and binding for details.\n\nSee also:\n\n  **PEP 3107** - Function Annotations\n     The original specification for function annotations.\n\n  **PEP 484** - Type Hints\n     Definition of a standard meaning for annotations: type hints.\n\n  **PEP 526** - Syntax for Variable Annotations\n     Ability to type hint variable declarations, including class\n     variables and instance variables\n\n  **PEP 563** - Postponed Evaluation of Annotations\n     Support for forward references within annotations by preserving\n     annotations in a string form at runtime instead of eager\n     evaluation.\n```"}, "sortText": "z", "filterText": "def", "insertText": "def", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 3}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 331, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 332, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 5}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 333, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 6}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 7}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 8}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 334, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 9}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 8}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 335, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 9}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 336, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 337, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 10}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 11}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 12}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 13}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 338, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 14}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 15}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 16}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 17}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 339, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 340, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 341, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 342, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 343, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 19}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 344, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 345, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 19}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 346, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 347, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 348, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 20}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 349, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 21}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 22}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 23}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 350, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 24}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 351, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 25}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 352, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 26}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 27}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 28}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 353, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 354, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 27}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 26}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 25}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 24}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 355, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 25}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 356, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 26}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 27}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 357, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 28}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 358, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 359, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 360, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 361, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 26, "character": 0}, "end": {"line": 26, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 362, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 24, "character": 28}, "end": {"line": 25, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 363, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 26, "character": 0}, "end": {"line": 26, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 364, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 27, "character": 0}, "end": {"line": 27, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 365, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 366, "result": {"isIncomplete": false, "items": [{"label": "KeyboardInterrupt", "kind": 7, "sortText": "z", "filterText": "KeyboardInterrupt", "insertText": "KeyboardInterrupt($0)", "insertTextFormat": 2}, {"label": "KeyError", "kind": 7, "sortText": "z", "filterText": "KeyError", "insertText": "KeyError($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 367, "result": {"label": "KeyError", "kind": 7, "detail": "class KeyError", "documentation": {"kind": "markdown", "value": "```text\nKeyError(*args: object)\n\nMapping key not found.\n```"}, "sortText": "z", "filterText": "KeyError", "insertText": "KeyError($0)", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 368, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 276}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef "}, {"range": {"start": {"line": 25, "character": 5}, "end": {"line": 27, "character": 4}}, "newText": " = jls_extract_def()\n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 27, "character": 0}, "end": {"line": 27, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 369, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 370, "result": {"isIncomplete": false, "items": [{"label": "False", "kind": 14, "sortText": "z", "filterText": "False", "insertText": "False", "insertTextFormat": 1}, {"label": "FileExistsError", "kind": 7, "sortText": "z", "filterText": "FileExistsError", "insertText": "FileExistsError($0)", "insertTextFormat": 2}, {"label": "FileNotFoundError", "kind": 7, "sortText": "z", "filterText": "FileNotFoundError", "insertText": "FileNotFoundError($0)", "insertTextFormat": 2}, {"label": "filter", "kind": 3, "sortText": "z", "filterText": "filter", "insertText": "filter(${1:function}, ${2:iterable})$0", "insertTextFormat": 2}, {"label": "FLAC", "kind": 9, "sortText": "z", "filterText": "FLAC", "insertText": "FLAC", "insertTextFormat": 1}, {"label": "flac_song", "kind": 6, "sortText": "z", "filterText": "flac_song", "insertText": "flac_song", "insertTextFormat": 1}, {"label": "float", "kind": 7, "sortText": "z", "filterText": "float", "insertText": "float($0)", "insertTextFormat": 2}, {"label": "FloatingPointError", "kind": 7, "sortText": "z", "filterText": "FloatingPointError", "insertText": "FloatingPointError($0)", "insertTextFormat": 2}, {"label": "for", "kind": 14, "sortText": "z", "filterText": "for", "insertText": "for", "insertTextFormat": 1}, {"label": "format", "kind": 3, "sortText": "z", "filterText": "format", "insertText": "format(${1:o})$0", "insertTextFormat": 2}, {"label": "from", "kind": 14, "sortText": "z", "filterText": "from", "insertText": "from", "insertTextFormat": 1}, {"label": "frozenset", "kind": 7, "sortText": "z", "filterText": "frozenset", "insertText": "frozenset($0)", "insertTextFormat": 2}, {"label": "FutureWarning", "kind": 7, "sortText": "z", "filterText": "FutureWarning", "insertText": "FutureWarning($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 371, "result": {"label": "filter", "kind": 3, "detail": "def filter", "documentation": {"kind": "markdown", "value": "```text\nfilter(function: None, iterable: Iterable[Optional[_T]], /) -> Iterator[_T]\nfilter(function: Callable[[_T], Any], iterable: Iterable[_T], /) -> Iterator[_T]\n\nfilter(function or None, iterable) --> filter object\n\nReturn an iterator yielding those items of iterable for which function(item)\nis true. If function is None, return the items that are true.\n```"}, "sortText": "z", "filterText": "filter", "insertText": "filter(${1:function}, ${2:iterable})$0", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 372, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 278}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 27, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef read_metadata(flac_song):\n    f = jls_extract_def()\n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 373, "result": {"label": "flac_song", "kind": 6, "detail": "param flac_song", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "flac_song", "insertText": "flac_song", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 374, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 279}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 27, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef read_metadata(flac_song):\n    fl = jls_extract_def()\n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 375, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 280}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 27, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef read_metadata(flac_song):\n    fla = jls_extract_def()\n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 376, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 281}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 27, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef read_metadata(flac_song):\n    flac = jls_extract_def()\n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 377, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 24, "character": 0}, "end": {"line": 25, "character": 8}}, "selectionRange": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 378, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 282}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 27, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef read_metadata(flac_song):\n    fla = jls_extract_def()\n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 27, "character": 0}, "end": {"line": 27, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 379, "result": {"isIncomplete": false, "items": [{"label": "False", "kind": 14, "sortText": "z", "filterText": "False", "insertText": "False", "insertTextFormat": 1}, {"label": "FileExistsError", "kind": 7, "sortText": "z", "filterText": "FileExistsError", "insertText": "FileExistsError($0)", "insertTextFormat": 2}, {"label": "FileNotFoundError", "kind": 7, "sortText": "z", "filterText": "FileNotFoundError", "insertText": "FileNotFoundError($0)", "insertTextFormat": 2}, {"label": "filter", "kind": 3, "sortText": "z", "filterText": "filter", "insertText": "filter(${1:function}, ${2:iterable})$0", "insertTextFormat": 2}, {"label": "FLAC", "kind": 9, "sortText": "z", "filterText": "FLAC", "insertText": "FLAC", "insertTextFormat": 1}, {"label": "flac_song", "kind": 6, "sortText": "z", "filterText": "flac_song", "insertText": "flac_song", "insertTextFormat": 1}, {"label": "float", "kind": 7, "sortText": "z", "filterText": "float", "insertText": "float($0)", "insertTextFormat": 2}, {"label": "FloatingPointError", "kind": 7, "sortText": "z", "filterText": "FloatingPointError", "insertText": "FloatingPointError($0)", "insertTextFormat": 2}, {"label": "for", "kind": 14, "sortText": "z", "filterText": "for", "insertText": "for", "insertTextFormat": 1}, {"label": "format", "kind": 3, "sortText": "z", "filterText": "format", "insertText": "format(${1:o})$0", "insertTextFormat": 2}, {"label": "from", "kind": 14, "sortText": "z", "filterText": "from", "insertText": "from", "insertTextFormat": 1}, {"label": "frozenset", "kind": 7, "sortText": "z", "filterText": "frozenset", "insertText": "frozenset($0)", "insertTextFormat": 2}, {"label": "FutureWarning", "kind": 7, "sortText": "z", "filterText": "FutureWarning", "insertText": "FutureWarning($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 380, "result": {"label": "FLAC", "kind": 9, "detail": "module FLAC", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "FLAC", "insertText": "FLAC", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 381, "result": {"label": "FLAC", "kind": 9, "detail": "module FLAC", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "FLAC", "insertText": "FLAC", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 382, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 287}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef "}, {"range": {"start": {"line": 25, "character": 6}, "end": {"line": 27, "character": 4}}, "newText": " = jls_extract_def()\n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 383, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 288}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef "}, {"range": {"start": {"line": 25, "character": 5}, "end": {"line": 27, "character": 4}}, "newText": " = jls_extract_def()\n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 384, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 290}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef "}, {"range": {"start": {"line": 25, "character": 7}, "end": {"line": 27, "character": 4}}, "newText": " = jls_extract_def()\n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 385, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 291}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef "}, {"range": {"start": {"line": 25, "character": 8}, "end": {"line": 27, "character": 4}}, "newText": " = jls_extract_def()\n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 386, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 24, "character": 0}, "end": {"line": 25, "character": 8}}, "selectionRange": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 387, "result": [{"range": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}}, {"range": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 8}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 388, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 291}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef "}, {"range": {"start": {"line": 25, "character": 8}, "end": {"line": 27, "character": 4}}, "newText": " = jls_extract_def()\n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 389, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 390, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 391, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 24, "character": 0}, "end": {"line": 25, "character": 10}}, "selectionRange": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 392, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 393, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 394, "result": {"isIncomplete": false, "items": [{"label": "False", "kind": 14, "sortText": "z", "filterText": "False", "insertText": "False", "insertTextFormat": 1}, {"label": "FileExistsError", "kind": 7, "sortText": "z", "filterText": "FileExistsError", "insertText": "FileExistsError($0)", "insertTextFormat": 2}, {"label": "FileNotFoundError", "kind": 7, "sortText": "z", "filterText": "FileNotFoundError", "insertText": "FileNotFoundError($0)", "insertTextFormat": 2}, {"label": "filter", "kind": 3, "sortText": "z", "filterText": "filter", "insertText": "filter(${1:function}, ${2:iterable})$0", "insertTextFormat": 2}, {"label": "FLAC", "kind": 9, "sortText": "z", "filterText": "FLAC", "insertText": "FLAC", "insertTextFormat": 1}, {"label": "flac_song", "kind": 6, "sortText": "z", "filterText": "flac_song", "insertText": "flac_song", "insertTextFormat": 1}, {"label": "float", "kind": 7, "sortText": "z", "filterText": "float", "insertText": "float($0)", "insertTextFormat": 2}, {"label": "FloatingPointError", "kind": 7, "sortText": "z", "filterText": "FloatingPointError", "insertText": "FloatingPointError($0)", "insertTextFormat": 2}, {"label": "format", "kind": 3, "sortText": "z", "filterText": "format", "insertText": "format(${1:o})$0", "insertTextFormat": 2}, {"label": "frozenset", "kind": 7, "sortText": "z", "filterText": "frozenset", "insertText": "frozenset($0)", "insertTextFormat": 2}, {"label": "FutureWarning", "kind": 7, "sortText": "z", "filterText": "FutureWarning", "insertText": "FutureWarning($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 395, "result": {"label": "filter", "kind": 3, "detail": "def filter", "documentation": {"kind": "markdown", "value": "```text\nfilter(function: None, iterable: Iterable[Optional[_T]], /) -> Iterator[_T]\nfilter(function: Callable[[_T], Any], iterable: Iterable[_T], /) -> Iterator[_T]\n\nfilter(function or None, iterable) --> filter object\n\nReturn an iterator yielding those items of iterable for which function(item)\nis true. If function is None, return the items that are true.\n```"}, "sortText": "z", "filterText": "filter", "insertText": "filter(${1:function}, ${2:iterable})$0", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 396, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 397, "result": [{"range": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}}, {"range": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 8}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 398, "result": [{"title": "Extract expression into variable 'jls_extract_var'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 293}, "edits": [{"range": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 4}}, "newText": "jls_extract_var = "}, {"range": {"start": {"line": 25, "character": 8}, "end": {"line": 27, "character": 4}}, "newText": "\n    jls_extract_var(f)\n\n    "}]}]}}, {"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 293}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 25, "character": 3}}, "newText": "jls_extract_def():\n    return"}, {"range": {"start": {"line": 25, "character": 8}, "end": {"line": 27, "character": 4}}, "newText": "\n\n\ndef read_metadata(flac_song):\n    jls_extract_def()(f)\n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 25, "character": 0}, "end": {"line": 25, "character": 0}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 399, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 400, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 401, "result": [{"title": "Extract expression into variable 'jls_extract_var'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 295}, "edits": [{"range": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 4}}, "newText": "jls_extract_var = "}, {"range": {"start": {"line": 25, "character": 8}, "end": {"line": 27, "character": 4}}, "newText": "\n    jls_extract_var(f)\n\n    "}]}]}}, {"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 295}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 25, "character": 3}}, "newText": "jls_extract_def():\n    return"}, {"range": {"start": {"line": 25, "character": 8}, "end": {"line": 27, "character": 4}}, "newText": "\n\n\ndef read_metadata(flac_song):\n    jls_extract_def()(f)\n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 402, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 403, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 24, "character": 0}, "end": {"line": 25, "character": 11}}, "selectionRange": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 404, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 405, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 406, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 407, "result": [{"range": {"start": {"line": 25, "character": 9}, "end": {"line": 25, "character": 10}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 408, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 409, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 410, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 411, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 412, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 24, "character": 0}, "end": {"line": 25, "character": 10}}, "selectionRange": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 413, "result": [{"range": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}}, {"range": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 8}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 414, "result": [{"title": "Extract expression into variable 'jls_extract_var'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 296}, "edits": [{"range": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 4}}, "newText": "jls_extract_var = "}, {"range": {"start": {"line": 25, "character": 8}, "end": {"line": 27, "character": 4}}, "newText": "\n    jls_extract_var()\n\n    "}]}]}}, {"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 296}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 25, "character": 3}}, "newText": "jls_extract_def():\n    return"}, {"range": {"start": {"line": 25, "character": 8}, "end": {"line": 27, "character": 4}}, "newText": "\n\n\ndef read_metadata(flac_song):\n    jls_extract_def()()\n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 415, "result": [{"title": "Extract expression into variable 'jls_extract_var'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 297}, "edits": [{"range": {"start": {"line": 25, "character": 5}, "end": {"line": 25, "character": 5}}, "newText": "jls_extract_var = "}, {"range": {"start": {"line": 25, "character": 9}, "end": {"line": 27, "character": 4}}, "newText": "\n     jls_extract_var()\n\n    "}]}]}}, {"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 297}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 25, "character": 4}}, "newText": "jls_extract_def():\n    return"}, {"range": {"start": {"line": 25, "character": 9}, "end": {"line": 27, "character": 4}}, "newText": "\n\n\ndef read_metadata(flac_song):\n     jls_extract_def()()\n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 416, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 24, "character": 0}, "end": {"line": 25, "character": 11}}, "selectionRange": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 417, "result": {"contents": {"kind": "markdown", "value": "```python\nparam flac_song\n```"}, "range": {"start": {"line": 24, "character": 18}, "end": {"line": 24, "character": 27}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 418, "result": {"contents": {"kind": "markdown", "value": "```python\nparam flac_song\n```"}, "range": {"start": {"line": 24, "character": 18}, "end": {"line": 24, "character": 27}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 419, "result": {"contents": {"kind": "markdown", "value": "```python\nkeyword )\n```\n---\nSequence Types \u2014 \"list\", \"tuple\", \"range\"\n*****************************************\n\nThere are three basic sequence types: lists, tuples, and range\nobjects. Additional sequence types tailored for processing of binary\ndata and text strings are described in dedicated sections.\n\n\nCommon Sequence Operations\n==========================\n\nThe operations in the following table are supported by most sequence\ntypes, both mutable and immutable. The \"collections.abc.Sequence\" ABC\nis provided to make it easier to correctly implement these operations\non custom sequence types.\n\nThis table lists the sequence operations sorted in ascending priority.\nIn the table, *s* and *t* are sequences of the same type, *n*, *i*,\n*j* and *k* are integers and *x* is an arbitrary object that meets any\ntype and value restrictions imposed by *s*.\n\nThe \"in\" and \"not in\" operations have the same priorities as the\ncomparison operations. The \"+\" (concatenation) and \"*\" (repetition)\noperations have the same priority as the corresponding numeric\noperations. [3]\n\n| Operation |            Result           | Notes |\n| --------- | --------------------------- | ----- |\n| \"x in s\"  | \"True\" if an item of *s* is | (1)   |\n|                            | equal to *x*, else \"False\"       |            |\n| \"x not in s\" | \"False\" if an item of *s* is | (1) |\n| ------------ | ---------------------------- | --- |\n|      \"s + t\"       | the concatenation of *s* and *t* | (6)(7) |\n| ------------------ | -------------------------------- | ------ |\n| \"s * n\" or \"n * s\" | equivalent to adding *s* to      | (2)(7) |\n|                            | itself *n* times                 |            |\n|   \"s[i]\"   | *i*th item of *s*, origin 0  |  (3)   |\n| ---------- | ---------------------------- | ------ |\n| \"s[i:j]\"   | slice of *s* from *i* to *j* | (3)(4) |\n| \"s[i:j:k]\" | slice of *s* from *i* to *j* | (3)(5) |\n|                            | with step *k*                    |            |\n|        \"len(s)\"        |          length of *s*           |     |\n| ---------------------- | -------------------------------- | --- |\n| \"min(s)\"               | smallest item of *s*             |     |\n| \"max(s)\"               | largest item of *s*              |     |\n| \"s.index(x[, i[, j]])\" | index of the first occurrence of | (8) |\n|                            | *x* in *s* (at or after index    |            |\n|                            | *i* and before index *j*)        |            |\n| \"s.count(x)\" | total number of occurrences of |  |\n| ------------ | ------------------------------ |  |\n|  |  |  |\n|  |  |  |\ntuples and lists are compared lexicographically by comparing\ncorresponding elements. This means that to compare equal, every\nelement must compare equal and the two sequences must be of the same\ntype and have the same length.  (For full details see Comparisons in\nthe language reference.)\n\nNotes:\n\n1. While the \"in\" and \"not in\" operations are used only for simple\n   containment testing in the general case, some specialised sequences\n   (such as \"str\", \"bytes\" and \"bytearray\") also use them for\n   subsequence testing:\n\n      >>> \"gg\" in \"eggs\"\n      True\n\n2. Values of *n* less than \"0\" are treated as \"0\" (which yields an\n   empty sequence of the same type as *s*).  Note that items in the\n   sequence *s* are not copied; they are referenced multiple times.\n   This often haunts new Python programmers; consider:\n\n      >>> lists = [[]] * 3\n      >>> lists\n      [[], [], []]\n      >>> lists[0].append(3)\n      >>> lists\n      [[3], [3], [3]]\n\n   What has happened is that \"[[]]\" is a one-element list containing\n   an empty list, so all three elements of \"[[]] * 3\" are references\n   to this single empty list.  Modifying any of the elements of\n   \"lists\" modifies this single list. You can create a list of\n   different lists this way:\n\n      >>> lists = [[] for i in range(3)]\n      >>> lists[0].append(3)\n      >>> lists[1].append(5)\n      >>> lists[2].append(7)\n      >>> lists\n      [[3], [5], [7]]\n\n   Further explanation is available in the FAQ entry How do I create a\n   multidimensional list?.\n\n3. If *i* or *j* is negative, the index is relative to the end of\n   sequence *s*: \"len(s) + i\" or \"len(s) + j\" is substituted.  But\n   note that \"-0\" is still \"0\".\n\n4. The slice of *s* from *i* to *j* is defined as the sequence of\n   items with index *k* such that \"i <= k < j\".  If *i* or *j* is\n   greater than \"len(s)\", use \"len(s)\".  If *i* is omitted or \"None\",\n   use \"0\".  If *j* is omitted or \"None\", use \"len(s)\".  If *i* is\n   greater than or equal to *j*, the slice is empty.\n\n5. The slice of *s* from *i* to *j* with step *k* is defined as the\n   sequence of items with index  \"x = i + n*k\" such that \"0 <= n <\n   (j-i)/k\".  In other words, the indices are \"i\", \"i+k\", \"i+2*k\",\n   \"i+3*k\" and so on, stopping when *j* is reached (but never\n   including *j*).  When *k* is positive, *i* and *j* are reduced to\n   \"len(s)\" if they are greater. When *k* is negative, *i* and *j* are\n   reduced to \"len(s) - 1\" if they are greater.  If *i* or *j* are\n   omitted or \"None\", they become \u201cend\u201d values (which end depends on\n   the sign of *k*).  Note, *k* cannot be zero. If *k* is \"None\", it\n   is treated like \"1\".\n\n6. Concatenating immutable sequences always results in a new object.\n   This means that building up a sequence by repeated concatenation\n   will have a quadratic runtime cost in the total sequence length.\n   To get a linear runtime cost, you must switch to one of the\n   alternatives below:\n\n   * if concatenating \"str\" objects, you can build a list and use\n     \"str.join()\" at the end or else write to an \"io.StringIO\"\n     instance and retrieve its value when complete\n\n   * if concatenating \"bytes\" objects, you can similarly use\n     \"bytes.join()\" or \"io.BytesIO\", or you can do in-place\n     concatenation with a \"bytearray\" object.  \"bytearray\" objects are\n     mutable and have an efficient overallocation mechanism\n\n   * if concatenating \"tuple\" objects, extend a \"list\" instead\n\n   * for other types, investigate the relevant class documentation\n\n7. Some sequence types (such as \"range\") only support item sequences\n   that follow specific patterns, and hence don\u2019t support sequence\n   concatenation or repetition.\n\n8. \"index\" raises \"ValueError\" when *x* is not found in *s*. Not all\n   implementations support passing the additional arguments *i* and\n   *j*. These arguments allow efficient searching of subsections of\n   the sequence. Passing the extra arguments is roughly equivalent to\n   using \"s[i:j].index(x)\", only without copying any data and with the\n   returned index being relative to the start of the sequence rather\n   than the start of the slice.\n\n\nImmutable Sequence Types\n========================\n\nThe only operation that immutable sequence types generally implement\nthat is not also implemented by mutable sequence types is support for\nthe \"hash()\" built-in.\n\nThis support allows immutable sequences, such as \"tuple\" instances, to\nbe used as \"dict\" keys and stored in \"set\" and \"frozenset\" instances.\n\nAttempting to hash an immutable sequence that contains unhashable\nvalues will result in \"TypeError\".\n\n\nMutable Sequence Types\n======================\n\nThe operations in the following table are defined on mutable sequence\ntypes. The \"collections.abc.MutableSequence\" ABC is provided to make\nit easier to correctly implement these operations on custom sequence\ntypes.\n\nIn the table *s* is an instance of a mutable sequence type, *t* is any\niterable object and *x* is an arbitrary object that meets any type and\nvalue restrictions imposed by *s* (for example, \"bytearray\" only\naccepts integers that meet the value restriction \"0 <= x <= 255\").\n\n| Operation  |             Result             | Notes |\n| ---------- | ------------------------------ | ----- |\n| \"s[i] = x\" | item *i* of *s* is replaced by |       |\n|                                | *x*                              |                       |\n|  \"s[i:j] = t\"  | slice of *s* from *i* to *j* is |     |\n| -------------- | ------------------------------- | --- |\n|                | iterable *t*                    |     |\n| \"del s[i:j]\"   | same as \"s[i:j] = []\"           |     |\n| \"s[i:j:k] = t\" | the elements of \"s[i:j:k]\" are  | (1) |\n|                                | replaced by those of *t*         |                       |\n| \"del s[i:j:k]\" | removes the elements of |  |\n| -------------- | ----------------------- |  |\n| \"s.append(x)\" |  appends *x* to the end of the   |     |\n| ------------- | -------------------------------- | --- |\n|               | \"s[len(s):len(s)] = [x]\")        |     |\n| \"s.clear()\"   | removes all items from *s* (same | (5) |\n|                                | as \"del s[:]\")                   |                       |\n| \"s.copy()\" | creates a shallow copy of *s* | (5) |\n| ---------- | ----------------------------- | --- |\n| \"s.extend(t)\" or \"s += t\" | extends *s* with the contents of |     |\n| ------------------------- | -------------------------------- | --- |\n|                           | as \"s[len(s):len(s)] = t\")       |     |\n| \"s *= n\"                  | updates *s* with its contents    | (6) |\n|                                | repeated *n* times               |                       |\n| \"s.insert(i, x)\" |  inserts *x* into *s* at the  |     |\n| ---------------- | ----------------------------- | --- |\n|                  | \"s[i:i] = [x]\")               |     |\n| \"s.pop([i])\"     | retrieves the item at *i* and | (2) |\n|                                | also removes it from *s*         |                       |\n| \"s.remove(x)\" | remove the first item from *s* | (3) |\n| ------------- | ------------------------------ | --- |\n| \"s.reverse()\" | reverses the items of *s* in | (4) |\n| ------------- | ---------------------------- | --- |\n|  |  |  |\n|  |  |  |\n```python\nrange(0, 20, 2)\n```\n\n1. *t* must have the same length as the slice it is replacing.\n\n2. The optional argument *i* defaults to \"-1\", so that by default the\n   last item is removed and returned.\n\n3. \"remove()\" raises \"ValueError\" when *x* is not found in *s*.\n\n4. The \"reverse()\" method modifies the sequence in place for economy\n   of space when reversing a large sequence.  To remind users that it\n   operates by side effect, it does not return the reversed sequence.\n\n5. \"clear()\" and \"copy()\" are included for consistency with the\n   interfaces of mutable containers that don\u2019t support slicing\n   operations (such as \"dict\" and \"set\"). \"copy()\" is not part of the\n   \"collections.abc.MutableSequence\" ABC, but most concrete mutable\n   sequence classes provide it.\n\n   New in version 3.3: \"clear()\" and \"copy()\" methods.\n\n6. The value *n* is an integer, or an object implementing\n   \"\\_\\_index\\_\\_()\".  Zero and negative values of *n* clear the sequence.\n   Items in the sequence are not copied; they are referenced multiple\n   times, as explained for \"s * n\" under Common Sequence Operations.\n\n\nLists\n=====\n\nLists are mutable sequences, typically used to store collections of\nhomogeneous items (where the precise degree of similarity will vary by\napplication).\n\nclass list([iterable])\n\n   Lists may be constructed in several ways:\n\n   * Using a pair of square brackets to denote the empty list: \"[]\"\n\n   * Using square brackets, separating items with commas: \"[a]\", \"[a,\n     b, c]\"\n\n   * Using a list comprehension: \"[x for x in iterable]\"\n\n   * Using the type constructor: \"list()\" or \"list(iterable)\"\n\n   The constructor builds a list whose items are the same and in the\n   same order as *iterable*\u2019s items.  *iterable* may be either a\n   sequence, a container that supports iteration, or an iterator\n   object.  If *iterable* is already a list, a copy is made and\n   returned, similar to \"iterable[:]\". For example, \"list('abc')\"\n   returns \"['a', 'b', 'c']\" and \"list( (1, 2, 3) )\" returns \"[1, 2,\n   3]\". If no argument is given, the constructor creates a new empty\n   list, \"[]\".\n\n   Many other operations also produce lists, including the \"sorted()\"\n   built-in.\n\n   Lists implement all of the common and mutable sequence operations.\n   Lists also provide the following additional method:\n\n   sort(*, key=None, reverse=False)\n\n      This method sorts the list in place, using only \"<\" comparisons\n      between items. Exceptions are not suppressed - if any comparison\n      operations fail, the entire sort operation will fail (and the\n      list will likely be left in a partially modified state).\n\n      \"sort()\" accepts two arguments that can only be passed by\n      keyword (keyword-only arguments):\n\n      *key* specifies a function of one argument that is used to\n      extract a comparison key from each list element (for example,\n      \"key=str.lower\"). The key corresponding to each item in the list\n      is calculated once and then used for the entire sorting process.\n      The default value of \"None\" means that list items are sorted\n      directly without calculating a separate key value.\n\n      The \"functools.cmp_to_key()\" utility is available to convert a\n      2.x style *cmp* function to a *key* function.\n\n      *reverse* is a boolean value.  If set to \"True\", then the list\n      elements are sorted as if each comparison were reversed.\n\n      This method modifies the sequence in place for economy of space\n      when sorting a large sequence.  To remind users that it operates\n      by side effect, it does not return the sorted sequence (use\n      \"sorted()\" to explicitly request a new sorted list instance).\n\n      The \"sort()\" method is guaranteed to be stable.  A sort is\n      stable if it guarantees not to change the relative order of\n      elements that compare equal \u2014 this is helpful for sorting in\n      multiple passes (for example, sort by department, then by salary\n      grade).\n\n      For sorting examples and a brief sorting tutorial, see Sorting\n      HOW TO.\n\n      **CPython implementation detail:** While a list is being sorted,\n      the effect of attempting to mutate, or even inspect, the list is\n      undefined.  The C implementation of Python makes the list appear\n      empty for the duration, and raises \"ValueError\" if it can detect\n      that the list has been mutated during a sort.\n\n\nTuples\n======\n\nTuples are immutable sequences, typically used to store collections of\nheterogeneous data (such as the 2-tuples produced by the \"enumerate()\"\nbuilt-in). Tuples are also used for cases where an immutable sequence\nof homogeneous data is needed (such as allowing storage in a \"set\" or\n\"dict\" instance).\n\nclass tuple([iterable])\n\n   Tuples may be constructed in a number of ways:\n\n   * Using a pair of parentheses to denote the empty tuple: \"()\"\n\n   * Using a trailing comma for a singleton tuple: \"a,\" or \"(a,)\"\n\n   * Separating items with commas: \"a, b, c\" or \"(a, b, c)\"\n\n   * Using the \"tuple()\" built-in: \"tuple()\" or \"tuple(iterable)\"\n\n   The constructor builds a tuple whose items are the same and in the\n   same order as *iterable*\u2019s items.  *iterable* may be either a\n   sequence, a container that supports iteration, or an iterator\n   object.  If *iterable* is already a tuple, it is returned\n   unchanged. For example, \"tuple('abc')\" returns \"('a', 'b', 'c')\"\n   and \"tuple( [1, 2, 3] )\" returns \"(1, 2, 3)\". If no argument is\n   given, the constructor creates a new empty tuple, \"()\".\n\n   Note that it is actually the comma which makes a tuple, not the\n   parentheses. The parentheses are optional, except in the empty\n   tuple case, or when they are needed to avoid syntactic ambiguity.\n   For example, \"f(a, b, c)\" is a function call with three arguments,\n   while \"f((a, b, c))\" is a function call with a 3-tuple as the sole\n   argument.\n\n   Tuples implement all of the common sequence operations.\n\nFor heterogeneous collections of data where access by name is clearer\nthan access by index, \"collections.namedtuple()\" may be a more\nappropriate choice than a simple tuple object.\n\n\nRanges\n======\n\nThe \"range\" type represents an immutable sequence of numbers and is\ncommonly used for looping a specific number of times in \"for\" loops.\n\nclass range(stop)\nclass range(start, stop[, step])\n\n   The arguments to the range constructor must be integers (either\n   built-in \"int\" or any object that implements the \"\\_\\_index\\_\\_\"\n   special method).  If the *step* argument is omitted, it defaults to\n   \"1\". If the *start* argument is omitted, it defaults to \"0\". If\n   *step* is zero, \"ValueError\" is raised.\n\n   For a positive *step*, the contents of a range \"r\" are determined\n   by the formula \"r[i] = start + step*i\" where \"i >= 0\" and \"r[i] <\n   stop\".\n\n   For a negative *step*, the contents of the range are still\n   determined by the formula \"r[i] = start + step*i\", but the\n   constraints are \"i >= 0\" and \"r[i] > stop\".\n\n   A range object will be empty if \"r[0]\" does not meet the value\n   constraint. Ranges do support negative indices, but these are\n   interpreted as indexing from the end of the sequence determined by\n   the positive indices.\n\n   Ranges containing absolute values larger than \"sys.maxsize\" are\n   permitted but some features (such as \"len()\") may raise\n   \"OverflowError\".\n\n   Range examples:\n\n      >>> list(range(10))\n      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n      >>> list(range(1, 11))\n      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n      >>> list(range(0, 30, 5))\n      [0, 5, 10, 15, 20, 25]\n      >>> list(range(0, 10, 3))\n      [0, 3, 6, 9]\n      >>> list(range(0, -10, -1))\n      [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n      >>> list(range(0))\n      []\n      >>> list(range(1, 0))\n      []\n\n   Ranges implement all of the common sequence operations except\n   concatenation and repetition (due to the fact that range objects\n   can only represent sequences that follow a strict pattern and\n   repetition and concatenation will usually violate that pattern).\n\n   start\n\n      The value of the *start* parameter (or \"0\" if the parameter was\n      not supplied)\n\n   stop\n\n      The value of the *stop* parameter\n\n   step\n\n      The value of the *step* parameter (or \"1\" if the parameter was\n      not supplied)\n\nThe advantage of the \"range\" type over a regular \"list\" or \"tuple\" is\nthat a \"range\" object will always take the same (small) amount of\nmemory, no matter the size of the range it represents (as it only\nstores the \"start\", \"stop\" and \"step\" values, calculating individual\nitems and subranges as needed).\n\nRange objects implement the \"collections.abc.Sequence\" ABC, and\nprovide features such as containment tests, element index lookup,\nslicing and support for negative indices (see Sequence Types \u2014 list,\ntuple, range):\n\n```python\nr = range(0, 20, 2)\nr\n11 in r\n```\n\n```\nFalse\n```\n\n```python\n10 in r\n```\n\n```\nTrue\n```\n\n```python\nr.index(10)\n```\n\n```\n5\n```\n\n```python\nr[5]\n```\n\n```\n10\n```\n\n```python\nrange(0, 10, 2)\n```\n```python\nr[:5]\nr[-1]\n```\n\n```\n18\n```\n\n\nTesting range objects for equality with \"==\" and \"!=\" compares them as\nsequences.  That is, two range objects are considered equal if they\nrepresent the same sequence of values.  (Note that two range objects\nthat compare equal might have different \"start\", \"stop\" and \"step\"\nattributes, for example \"range(0) == range(2, 1, 3)\" or \"range(0, 3,\n2) == range(0, 4, 2)\".)\n\nChanged in version 3.2: Implement the Sequence ABC. Support slicing\nand negative indices. Test \"int\" objects for membership in constant\ntime instead of iterating through all items.\n\nChanged in version 3.3: Define \u2018==\u2019 and \u2018!=\u2019 to compare range objects\nbased on the sequence of values they define (instead of comparing\nbased on object identity).\n\nNew in version 3.3: The \"start\", \"stop\" and \"step\" attributes.\n\nSee also:\n\n  * The linspace recipe shows how to implement a lazy version of range\n    suitable for floating point applications."}, "range": null}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 420, "result": {"contents": {"kind": "markdown", "value": "```python\nparam flac_song\n```"}, "range": {"start": {"line": 24, "character": 18}, "end": {"line": 24, "character": 27}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 421, "result": [{"range": {"start": {"line": 24, "character": 18}, "end": {"line": 24, "character": 27}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 422, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 423, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 424, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 425, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 426, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 427, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 428, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 429, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 430, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 24, "character": 0}, "end": {"line": 25, "character": 11}}, "selectionRange": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 431, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 432, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 433, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 24, "character": 0}, "end": {"line": 25, "character": 11}}, "selectionRange": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 434, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 435, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 436, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 437, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 24, "character": 0}, "end": {"line": 25, "character": 11}}, "selectionRange": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 438, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 439, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 440, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 441, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement contains_directory\n```\n---\n```python\ncontains_directory = True\n```\n**Full name:** `fixer.get_songs.contains_directory`"}, "range": {"start": {"line": 21, "character": 11}, "end": {"line": 21, "character": 29}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 442, "result": {"contents": {"kind": "markdown", "value": "```python\nparam flac_song\n```"}, "range": {"start": {"line": 24, "character": 18}, "end": {"line": 24, "character": 27}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 443, "result": [{"range": {"start": {"line": 24, "character": 18}, "end": {"line": 24, "character": 27}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 444, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 445, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 446, "result": {"contents": {"kind": "markdown", "value": "```python\nparam flac_song\n```"}, "range": {"start": {"line": 24, "character": 18}, "end": {"line": 24, "character": 27}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 447, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 448, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 449, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 450, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 451, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 24, "character": 0}, "end": {"line": 25, "character": 11}}, "selectionRange": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 452, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 453, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 454, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 455, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 456, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 457, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 458, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 459, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 460, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 461, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 462, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 463, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 24, "character": 0}, "end": {"line": 25, "character": 11}}, "selectionRange": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 464, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 465, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 466, "result": {"isIncomplete": false, "items": [{"label": "False", "kind": 14, "sortText": "z", "filterText": "False", "insertText": "False", "insertTextFormat": 1}, {"label": "FileExistsError", "kind": 7, "sortText": "z", "filterText": "FileExistsError", "insertText": "FileExistsError($0)", "insertTextFormat": 2}, {"label": "FileNotFoundError", "kind": 7, "sortText": "z", "filterText": "FileNotFoundError", "insertText": "FileNotFoundError($0)", "insertTextFormat": 2}, {"label": "filter", "kind": 3, "sortText": "z", "filterText": "filter", "insertText": "filter(${1:function}, ${2:iterable})$0", "insertTextFormat": 2}, {"label": "FLAC", "kind": 9, "sortText": "z", "filterText": "FLAC", "insertText": "FLAC", "insertTextFormat": 1}, {"label": "flac_filename", "kind": 6, "sortText": "z", "filterText": "flac_filename", "insertText": "flac_filename", "insertTextFormat": 1}, {"label": "float", "kind": 7, "sortText": "z", "filterText": "float", "insertText": "float($0)", "insertTextFormat": 2}, {"label": "FloatingPointError", "kind": 7, "sortText": "z", "filterText": "FloatingPointError", "insertText": "FloatingPointError($0)", "insertTextFormat": 2}, {"label": "format", "kind": 3, "sortText": "z", "filterText": "format", "insertText": "format(${1:o})$0", "insertTextFormat": 2}, {"label": "frozenset", "kind": 7, "sortText": "z", "filterText": "frozenset", "insertText": "frozenset($0)", "insertTextFormat": 2}, {"label": "FutureWarning", "kind": 7, "sortText": "z", "filterText": "FutureWarning", "insertText": "FutureWarning($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 467, "result": {"label": "filter", "kind": 3, "detail": "def filter", "documentation": {"kind": "markdown", "value": "```text\nfilter(function: None, iterable: Iterable[Optional[_T]], /) -> Iterator[_T]\nfilter(function: Callable[[_T], Any], iterable: Iterable[_T], /) -> Iterator[_T]\n\nfilter(function or None, iterable) --> filter object\n\nReturn an iterator yielding those items of iterable for which function(item)\nis true. If function is None, return the items that are true.\n```"}, "sortText": "z", "filterText": "filter", "insertText": "filter(${1:function}, ${2:iterable})$0", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 468, "result": {"label": "flac_filename", "kind": 6, "detail": "param flac_filename", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "flac_filename", "insertText": "flac_filename", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 469, "result": {"label": "flac_filename", "kind": 6, "detail": "param flac_filename", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "flac_filename", "insertText": "flac_filename", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 470, "result": {"label": "flac_filename", "kind": 6, "detail": "param flac_filename", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "flac_filename", "insertText": "flac_filename", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 471, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 472, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 25, "character": 24}, "end": {"line": 25, "character": 25}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 473, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 474, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 475, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 476, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 24, "character": 0}, "end": {"line": 25, "character": 24}}, "selectionRange": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 477, "result": {"contents": {"kind": "markdown", "value": "```python\nparam flac_filename\n```"}, "range": {"start": {"line": 25, "character": 10}, "end": {"line": 25, "character": 23}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 25, "character": 24}, "end": {"line": 25, "character": 25}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 478, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 479, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 480, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 481, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 24, "character": 0}, "end": {"line": 25, "character": 24}}, "selectionRange": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 482, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 483, "result": [{"range": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}}, {"range": {"start": {"line": 25, "character": 5}, "end": {"line": 25, "character": 9}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 484, "result": [{"title": "Extract expression into variable 'jls_extract_var'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 330}, "edits": [{"range": {"start": {"line": 25, "character": 5}, "end": {"line": 25, "character": 5}}, "newText": "jls_extract_var = "}, {"range": {"start": {"line": 25, "character": 9}, "end": {"line": 27, "character": 4}}, "newText": "\n     jls_extract_var(flac_filename)\n\n    "}]}]}}, {"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 330}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 25, "character": 4}}, "newText": "jls_extract_def():\n    return"}, {"range": {"start": {"line": 25, "character": 9}, "end": {"line": 27, "character": 4}}, "newText": "\n\n\ndef read_metadata(flac_filename):\n     jls_extract_def()(flac_filename)\n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 485, "result": [{"title": "Extract expression into variable 'jls_extract_var'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 333}, "edits": [{"range": {"start": {"line": 25, "character": 5}, "end": {"line": 25, "character": 5}}, "newText": "jls_extract_var = "}, {"range": {"start": {"line": 25, "character": 12}, "end": {"line": 27, "character": 4}}, "newText": "\n     jls_extract_var(flac_filename)\n\n    "}]}]}}, {"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 333}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 25, "character": 5}}, "newText": "jls_extract_def("}, {"range": {"start": {"line": 25, "character": 12}, "end": {"line": 27, "character": 4}}, "newText": "):\n    return flaFLAC\n\n\ndef read_metadata(flac_filename):\n     jls_extract_def(flaFLAC)(flac_filename)\n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 25, "character": 10}, "end": {"line": 25, "character": 14}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 486, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 487, "result": [{"title": "Extract expression into variable 'jls_extract_var'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 336}, "edits": [{"range": {"start": {"line": 25, "character": 5}, "end": {"line": 25, "character": 9}}, "newText": "jls_extract_var"}, {"range": {"start": {"line": 25, "character": 11}, "end": {"line": 25, "character": 11}}, "newText": " "}, {"range": {"start": {"line": 25, "character": 15}, "end": {"line": 27, "character": 4}}, "newText": "\n     flac =jls_extract_var(flac_filename)\n\n    "}]}]}}, {"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 336}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 25, "character": 11}}, "newText": "jls_extract_def():\n    return "}, {"range": {"start": {"line": 25, "character": 15}, "end": {"line": 27, "character": 4}}, "newText": "\n\n\ndef read_metadata(flac_filename):\n     flac =jls_extract_def()(flac_filename)\n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 488, "result": [{"title": "Extract expression into variable 'jls_extract_var'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 337}, "edits": [{"range": {"start": {"line": 25, "character": 5}, "end": {"line": 25, "character": 9}}, "newText": "jls_extract_var"}, {"range": {"start": {"line": 25, "character": 16}, "end": {"line": 27, "character": 4}}, "newText": "\n     flac = jls_extract_var(flac_filename)\n\n    "}]}]}}, {"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 337}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 25, "character": 11}}, "newText": "jls_extract_def():\n    return"}, {"range": {"start": {"line": 25, "character": 16}, "end": {"line": 27, "character": 4}}, "newText": "\n\n\ndef read_metadata(flac_filename):\n     flac = jls_extract_def()(flac_filename)\n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 489, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 24, "character": 0}, "end": {"line": 25, "character": 31}}, "selectionRange": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 490, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 491, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement flac\n```\n---\n```python\nflac = FLAC(flac_filename)\n```\n**Full name:** `fixer.read_metadata.flac`"}, "range": {"start": {"line": 25, "character": 5}, "end": {"line": 25, "character": 9}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 492, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 24, "character": 0}, "end": {"line": 25, "character": 31}}, "selectionRange": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 493, "result": {"isIncomplete": false, "items": [{"label": "False", "kind": 14, "sortText": "z", "filterText": "False", "insertText": "False", "insertTextFormat": 1}, {"label": "FileExistsError", "kind": 7, "sortText": "z", "filterText": "FileExistsError", "insertText": "FileExistsError($0)", "insertTextFormat": 2}, {"label": "FileNotFoundError", "kind": 7, "sortText": "z", "filterText": "FileNotFoundError", "insertText": "FileNotFoundError($0)", "insertTextFormat": 2}, {"label": "filter", "kind": 3, "sortText": "z", "filterText": "filter", "insertText": "filter(${1:function}, ${2:iterable})$0", "insertTextFormat": 2}, {"label": "flac", "kind": 6, "sortText": "z", "filterText": "flac", "insertText": "flac", "insertTextFormat": 1}, {"label": "FLAC", "kind": 9, "sortText": "z", "filterText": "FLAC", "insertText": "FLAC", "insertTextFormat": 1}, {"label": "flac_filename", "kind": 6, "sortText": "z", "filterText": "flac_filename", "insertText": "flac_filename", "insertTextFormat": 1}, {"label": "float", "kind": 7, "sortText": "z", "filterText": "float", "insertText": "float($0)", "insertTextFormat": 2}, {"label": "FloatingPointError", "kind": 7, "sortText": "z", "filterText": "FloatingPointError", "insertText": "FloatingPointError($0)", "insertTextFormat": 2}, {"label": "for", "kind": 14, "sortText": "z", "filterText": "for", "insertText": "for", "insertTextFormat": 1}, {"label": "format", "kind": 3, "sortText": "z", "filterText": "format", "insertText": "format(${1:o})$0", "insertTextFormat": 2}, {"label": "from", "kind": 14, "sortText": "z", "filterText": "from", "insertText": "from", "insertTextFormat": 1}, {"label": "frozenset", "kind": 7, "sortText": "z", "filterText": "frozenset", "insertText": "frozenset($0)", "insertTextFormat": 2}, {"label": "FutureWarning", "kind": 7, "sortText": "z", "filterText": "FutureWarning", "insertText": "FutureWarning($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 494, "result": {"label": "flac_filename", "kind": 6, "detail": "param flac_filename", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "flac_filename", "insertText": "flac_filename", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 495, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 339}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef "}, {"range": {"start": {"line": 26, "character": 6}, "end": {"line": 28, "character": 4}}, "newText": " = jls_extract_def()\n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 496, "result": {"label": "float", "kind": 7, "detail": "class float", "documentation": {"kind": "markdown", "value": "```text\nfloat(x: Union[SupportsFloat, _SupportsIndex, Text, bytes, bytearray]=...)\n\nConvert a string or number to a floating point number, if possible.\n```"}, "sortText": "z", "filterText": "float", "insertText": "float($0)", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 497, "result": {"label": "flac", "kind": 6, "detail": "flac = FLAC(flac_filename)", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "flac", "insertText": "flac", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 26, "character": 10}, "end": {"line": 27, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 498, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 499, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 500, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 24, "character": 0}, "end": {"line": 26, "character": 10}}, "selectionRange": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 501, "result": [{"title": "Inline variable", "kind": "refactor.inline", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 344}, "edits": [{"range": {"start": {"line": 25, "character": 5}, "end": {"line": 25, "character": 12}}, "newText": ""}, {"range": {"start": {"line": 26, "character": 0}, "end": {"line": 28, "character": 4}}, "newText": "\n    "}]}]}}, {"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 344}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef "}, {"range": {"start": {"line": 26, "character": 9}, "end": {"line": 28, "character": 4}}, "newText": " = jls_extract_def()\n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 26, "character": 10}, "end": {"line": 27, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 502, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 503, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 504, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 505, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 24, "character": 0}, "end": {"line": 26, "character": 10}}, "selectionRange": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 506, "result": [{"title": "Inline variable", "kind": "refactor.inline", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 346}, "edits": [{"range": {"start": {"line": 25, "character": 5}, "end": {"line": 25, "character": 12}}, "newText": ""}, {"range": {"start": {"line": 26, "character": 0}, "end": {"line": 28, "character": 4}}, "newText": "\n    "}]}]}}, {"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 346}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef "}, {"range": {"start": {"line": 26, "character": 9}, "end": {"line": 28, "character": 4}}, "newText": " = jls_extract_def()\n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 507, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 349}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef "}, {"range": {"start": {"line": 26, "character": 6}, "end": {"line": 28, "character": 4}}, "newText": " = jls_extract_def()\n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 508, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 24, "character": 0}, "end": {"line": 25, "character": 31}}, "selectionRange": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 509, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 25, "character": 32}, "end": {"line": 26, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 510, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 511, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 512, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 513, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 352}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef "}, {"range": {"start": {"line": 25, "character": 33}, "end": {"line": 28, "character": 4}}, "newText": " = jls_extract_def()\n     \n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 514, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 24, "character": 0}, "end": {"line": 25, "character": 33}}, "selectionRange": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 25, "character": 32}, "end": {"line": 26, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 515, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 516, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 24, "character": 0}, "end": {"line": 25, "character": 32}}, "selectionRange": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 517, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 518, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 519, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 357}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef "}, {"range": {"start": {"line": 25, "character": 36}, "end": {"line": 28, "character": 4}}, "newText": " = jls_extract_def()\n     \n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 520, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 521, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 362}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef "}, {"range": {"start": {"line": 25, "character": 41}, "end": {"line": 28, "character": 4}}, "newText": " = jls_extract_def()\n     \n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 522, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 363}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef "}, {"range": {"start": {"line": 25, "character": 40}, "end": {"line": 28, "character": 4}}, "newText": " = jls_extract_def()\n     \n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 523, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 524, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 525, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 526, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 25, "character": 32}, "end": {"line": 26, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 527, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 528, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 24, "character": 0}, "end": {"line": 25, "character": 31}}, "selectionRange": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 529, "result": {"isIncomplete": false, "items": [{"label": "False", "kind": 14, "sortText": "z", "filterText": "False", "insertText": "False", "insertTextFormat": 1}, {"label": "FileExistsError", "kind": 7, "sortText": "z", "filterText": "FileExistsError", "insertText": "FileExistsError($0)", "insertTextFormat": 2}, {"label": "FileNotFoundError", "kind": 7, "sortText": "z", "filterText": "FileNotFoundError", "insertText": "FileNotFoundError($0)", "insertTextFormat": 2}, {"label": "filter", "kind": 3, "sortText": "z", "filterText": "filter", "insertText": "filter(${1:function}, ${2:iterable})$0", "insertTextFormat": 2}, {"label": "flac", "kind": 6, "sortText": "z", "filterText": "flac", "insertText": "flac", "insertTextFormat": 1}, {"label": "FLAC", "kind": 9, "sortText": "z", "filterText": "FLAC", "insertText": "FLAC", "insertTextFormat": 1}, {"label": "flac_filename", "kind": 6, "sortText": "z", "filterText": "flac_filename", "insertText": "flac_filename", "insertTextFormat": 1}, {"label": "float", "kind": 7, "sortText": "z", "filterText": "float", "insertText": "float($0)", "insertTextFormat": 2}, {"label": "FloatingPointError", "kind": 7, "sortText": "z", "filterText": "FloatingPointError", "insertText": "FloatingPointError($0)", "insertTextFormat": 2}, {"label": "for", "kind": 14, "sortText": "z", "filterText": "for", "insertText": "for", "insertTextFormat": 1}, {"label": "format", "kind": 3, "sortText": "z", "filterText": "format", "insertText": "format(${1:o})$0", "insertTextFormat": 2}, {"label": "from", "kind": 14, "sortText": "z", "filterText": "from", "insertText": "from", "insertTextFormat": 1}, {"label": "frozenset", "kind": 7, "sortText": "z", "filterText": "frozenset", "insertText": "frozenset($0)", "insertTextFormat": 2}, {"label": "FutureWarning", "kind": 7, "sortText": "z", "filterText": "FutureWarning", "insertText": "FutureWarning($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 530, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 374}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef "}, {"range": {"start": {"line": 26, "character": 6}, "end": {"line": 29, "character": 4}}, "newText": " = jls_extract_def()\n     \n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 531, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 375}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef "}, {"range": {"start": {"line": 26, "character": 7}, "end": {"line": 29, "character": 4}}, "newText": " = jls_extract_def()\n     \n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 26, "character": 10}, "end": {"line": 27, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 532, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 533, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 534, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 382}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef "}, {"range": {"start": {"line": 26, "character": 14}, "end": {"line": 29, "character": 4}}, "newText": " = jls_extract_def()\n     \n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 535, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 387}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef "}, {"range": {"start": {"line": 26, "character": 19}, "end": {"line": 29, "character": 4}}, "newText": " = jls_extract_def()\n     \n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 536, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 387}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef "}, {"range": {"start": {"line": 26, "character": 19}, "end": {"line": 29, "character": 4}}, "newText": " = jls_extract_def()\n     \n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 537, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 24, "character": 0}, "end": {"line": 26, "character": 19}}, "selectionRange": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 538, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 539, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 388}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef "}, {"range": {"start": {"line": 26, "character": 20}, "end": {"line": 29, "character": 4}}, "newText": " = jls_extract_def()\n     \n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 540, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 24, "character": 0}, "end": {"line": 26, "character": 20}}, "selectionRange": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 541, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 389}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef "}, {"range": {"start": {"line": 26, "character": 19}, "end": {"line": 29, "character": 4}}, "newText": " = jls_extract_def()\n     \n\n    "}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 542, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 24, "character": 0}, "end": {"line": 26, "character": 19}}, "selectionRange": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 543, "result": {"contents": {"kind": "markdown", "value": "```python\nkeyword if\n```\n---\n```text\nThe \"if\" statement\n******************\n\nThe \"if\" statement is used for conditional execution:\n\n   if_stmt ::= \"if\" assignment_expression \":\" suite\n               (\"elif\" assignment_expression \":\" suite)*\n               [\"else\" \":\" suite]\n\nIt selects exactly one of the suites by evaluating the expressions one\nby one until one is found to be true (see section Boolean operations\nfor the definition of true and false); then that suite is executed\n(and no other part of the \"if\" statement is executed or evaluated).\nIf all expressions are false, the suite of the \"else\" clause, if\npresent, is executed.\n```"}, "range": {"start": {"line": 12, "character": 8}, "end": {"line": 12, "character": 10}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 544, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 545, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 24, "character": 0}, "end": {"line": 26, "character": 19}}, "selectionRange": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 546, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 547, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 548, "result": [{"range": {"start": {"line": 26, "character": 10}, "end": {"line": 26, "character": 19}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 549, "result": [{"title": "Extract expression into variable 'jls_extract_var'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 390}, "edits": [{"range": {"start": {"line": 26, "character": 5}, "end": {"line": 26, "character": 10}}, "newText": "jls_extract_var = "}, {"range": {"start": {"line": 27, "character": 5}, "end": {"line": 28, "character": 1}}, "newText": "flac.jls_extract_var\n     \n\n"}]}]}}, {"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 390}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 4}}, "newText": "jls_extract_def(seektable):\n    return seektable\n\n\ndef "}, {"range": {"start": {"line": 26, "character": 10}, "end": {"line": 26, "character": 10}}, "newText": "jls_extract_def("}, {"range": {"start": {"line": 26, "character": 19}, "end": {"line": 28, "character": 1}}, "newText": ")\n     \n\n"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 550, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 551, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement flac\n```\n---\n```python\nflac = FLAC(flac_filename)\n```\n**Full name:** `fixer.read_metadata.flac`"}, "range": {"start": {"line": 26, "character": 5}, "end": {"line": 26, "character": 9}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 552, "result": [{"range": {"start": {"line": 25, "character": 5}, "end": {"line": 25, "character": 9}}}, {"range": {"start": {"line": 26, "character": 5}, "end": {"line": 26, "character": 9}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 553, "result": [{"title": "Inline variable", "kind": "refactor.inline", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 390}, "edits": [{"range": {"start": {"line": 25, "character": 5}, "end": {"line": 25, "character": 12}}, "newText": "("}, {"range": {"start": {"line": 25, "character": 31}, "end": {"line": 26, "character": 9}}, "newText": ")"}]}]}}, {"title": "Extract expression into variable 'jls_extract_var'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 390}, "edits": [{"range": {"start": {"line": 26, "character": 5}, "end": {"line": 26, "character": 9}}, "newText": "jls_extract_var = flac\n     jls_extract_var"}]}]}}, {"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 390}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 4}}, "newText": "jls_extract_def(flac):\n    return flac\n\n\ndef "}, {"range": {"start": {"line": 26, "character": 5}, "end": {"line": 26, "character": 9}}, "newText": "jls_extract_def(flac)"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 554, "result": [{"title": "Extract expression into variable 'jls_extract_var'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 394}, "edits": [{"range": {"start": {"line": 26, "character": 5}, "end": {"line": 26, "character": 5}}, "newText": "jls_extract_var = "}, {"range": {"start": {"line": 26, "character": 13}, "end": {"line": 26, "character": 13}}, "newText": "\n     jls_extract_var"}]}]}}, {"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 394}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 4}}, "newText": "jls_extract_def(seekflac):\n    return seekflac\n\n\ndef "}, {"range": {"start": {"line": 26, "character": 5}, "end": {"line": 26, "character": 5}}, "newText": "jls_extract_def("}, {"range": {"start": {"line": 26, "character": 13}, "end": {"line": 26, "character": 13}}, "newText": ")"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 26, "character": 15}, "end": {"line": 26, "character": 19}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 555, "result": [{"title": "Inline variable", "kind": "refactor.inline", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 400}, "edits": [{"range": {"start": {"line": 25, "character": 5}, "end": {"line": 25, "character": 12}}, "newText": "seektable ("}, {"range": {"start": {"line": 25, "character": 31}, "end": {"line": 26, "character": 5}}, "newText": ")."}, {"range": {"start": {"line": 26, "character": 14}, "end": {"line": 28, "character": 1}}, "newText": "\n     \n\n"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 556, "result": [{"title": "Inline variable", "kind": "refactor.inline", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 402}, "edits": [{"range": {"start": {"line": 25, "character": 5}, "end": {"line": 25, "character": 9}}, "newText": "seektable"}, {"range": {"start": {"line": 25, "character": 12}, "end": {"line": 25, "character": 12}}, "newText": "("}, {"range": {"start": {"line": 25, "character": 31}, "end": {"line": 26, "character": 5}}, "newText": ")."}, {"range": {"start": {"line": 26, "character": 14}, "end": {"line": 28, "character": 1}}, "newText": "\n     \n\n"}]}]}}, {"title": "Extract expression into variable 'jls_extract_var'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 402}, "edits": [{"range": {"start": {"line": 26, "character": 5}, "end": {"line": 26, "character": 5}}, "newText": "jls_extract_var = flac\n     "}, {"range": {"start": {"line": 26, "character": 17}, "end": {"line": 26, "character": 21}}, "newText": "jls_extract_var"}]}]}}, {"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 402}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 4}}, "newText": "jls_extract_def(flac):\n    return flac\n\n\ndef "}, {"range": {"start": {"line": 26, "character": 17}, "end": {"line": 26, "character": 21}}, "newText": "jls_extract_def(flac)"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 557, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 558, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 24, "character": 0}, "end": {"line": 26, "character": 31}}, "selectionRange": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 559, "result": [{"range": {"start": {"line": 26, "character": 22}, "end": {"line": 26, "character": 31}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 560, "result": [{"title": "Extract expression into variable 'jls_extract_var'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 402}, "edits": [{"range": {"start": {"line": 26, "character": 5}, "end": {"line": 26, "character": 5}}, "newText": "jls_extract_var = "}, {"range": {"start": {"line": 26, "character": 14}, "end": {"line": 26, "character": 14}}, "newText": "\n     seektable"}, {"range": {"start": {"line": 26, "character": 22}, "end": {"line": 28, "character": 1}}, "newText": "jls_extract_var\n     \n\n"}]}]}}, {"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 402}, "edits": [{"range": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 4}}, "newText": "jls_extract_def(seektable):\n    return seektable\n\n\ndef "}, {"range": {"start": {"line": 26, "character": 22}, "end": {"line": 26, "character": 22}}, "newText": "jls_extract_def("}, {"range": {"start": {"line": 26, "character": 31}, "end": {"line": 28, "character": 1}}, "newText": ")\n     \n\n"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 561, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 562, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 563, "result": {"contents": {"kind": "markdown", "value": "```python\nparam flac_filename\n```"}, "range": {"start": {"line": 25, "character": 17}, "end": {"line": 25, "character": 30}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 564, "result": [{"range": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}}, {"range": {"start": {"line": 8, "character": 20}, "end": {"line": 8, "character": 22}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 565, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 566, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 6, "character": 0}, "end": {"line": 24, "character": 21}}, "selectionRange": {"start": {"line": 6, "character": 4}, "end": {"line": 6, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 26, "character": 0}, "end": {"line": 28, "character": 31}}, "selectionRange": {"start": {"line": 26, "character": 4}, "end": {"line": 26, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 567, "result": {"isIncomplete": false, "items": [{"label": "__doc__", "kind": 6, "sortText": "z", "filterText": "__doc__", "insertText": "__doc__", "insertTextFormat": 1}, {"label": "__file__", "kind": 6, "sortText": "z", "filterText": "__file__", "insertText": "__file__", "insertTextFormat": 1}, {"label": "__import__", "kind": 3, "sortText": "z", "filterText": "__import__", "insertText": "__import__(${1:name})$0", "insertTextFormat": 2}, {"label": "__name__", "kind": 6, "sortText": "z", "filterText": "__name__", "insertText": "__name__", "insertTextFormat": 1}, {"label": "__package__", "kind": 6, "sortText": "z", "filterText": "__package__", "insertText": "__package__", "insertTextFormat": 1}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 568, "result": {"label": "__doc__", "kind": 6, "detail": "instance __doc__", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "__doc__", "insertText": "__doc__", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 569, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 406}, "edits": [{"range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 2}}, "newText": "def jls_extract_def():\n    \n    return \n\n\n__ = jls_extract_def()"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 570, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 6, "character": 0}, "end": {"line": 24, "character": 21}}, "selectionRange": {"start": {"line": 6, "character": 4}, "end": {"line": 6, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 26, "character": 0}, "end": {"line": 28, "character": 31}}, "selectionRange": {"start": {"line": 26, "character": 4}, "end": {"line": 26, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 571, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 572, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 22, "character": 21}}, "selectionRange": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 24, "character": 0}, "end": {"line": 26, "character": 31}}, "selectionRange": {"start": {"line": 24, "character": 4}, "end": {"line": 24, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 573, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 574, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 21, "character": 21}}, "selectionRange": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 23, "character": 0}, "end": {"line": 25, "character": 31}}, "selectionRange": {"start": {"line": 23, "character": 4}, "end": {"line": 23, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 575, "result": [{"range": {"start": {"line": 25, "character": 22}, "end": {"line": 25, "character": 31}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 576, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 411}, "edits": [{"range": {"start": {"line": 23, "character": 4}, "end": {"line": 23, "character": 4}}, "newText": "jls_extract_def():\n    \n    return \n\n\ndef "}, {"range": {"start": {"line": 25, "character": 31}, "end": {"line": 27, "character": 1}}, "newText": " = jls_extract_def()\n     \n\n"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 577, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 21, "character": 21}}, "selectionRange": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 23, "character": 0}, "end": {"line": 25, "character": 31}}, "selectionRange": {"start": {"line": 23, "character": 4}, "end": {"line": 23, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 27, "character": 1}, "end": {"line": 28, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 27, "character": 2}, "end": {"line": 28, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 578, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 27, "character": 7}, "end": {"line": 28, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 27, "character": 6}, "end": {"line": 28, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 579, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 27, "character": 5}, "end": {"line": 28, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 580, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 27, "character": 4}, "end": {"line": 28, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 27, "character": 0}, "end": {"line": 27, "character": 1}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 27, "character": 0}, "end": {"line": 27, "character": 2}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 581, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 27, "character": 0}, "end": {"line": 27, "character": 1}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 582, "result": {"isIncomplete": false, "items": [{"label": "__doc__", "kind": 6, "sortText": "z", "filterText": "__doc__", "insertText": "__doc__", "insertTextFormat": 1}, {"label": "__file__", "kind": 6, "sortText": "z", "filterText": "__file__", "insertText": "__file__", "insertTextFormat": 1}, {"label": "__import__", "kind": 3, "sortText": "z", "filterText": "__import__", "insertText": "__import__(${1:name})$0", "insertTextFormat": 2}, {"label": "__name__", "kind": 6, "sortText": "z", "filterText": "__name__", "insertText": "__name__", "insertTextFormat": 1}, {"label": "__package__", "kind": 6, "sortText": "z", "filterText": "__package__", "insertText": "__package__", "insertTextFormat": 1}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 583, "result": {"label": "__doc__", "kind": 6, "detail": "instance __doc__", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "__doc__", "insertText": "__doc__", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 584, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 428}, "edits": [{"range": {"start": {"line": 27, "character": 0}, "end": {"line": 28, "character": 1}}, "newText": "def jls_extract_def():\n    \n    return \n\n\n__    = jls_extract_def()\n\n"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 585, "result": {"label": "__import__", "kind": 3, "detail": "def __import__", "documentation": {"kind": "markdown", "value": "```text\n__import__(name: Text, globals: Optional[Mapping[str, Any]]=..., locals: Optional[Mapping[str, Any]]=..., fromlist: Sequence[str]=..., level: int=...) -> Any\n\n__import__(name, globals=None, locals=None, fromlist=(), level=0) -> module\n\nImport a module. Because this function is meant for use by the Python\ninterpreter and not for general use, it is better to use\nimportlib.import_module() to programmatically import a module.\n\nThe globals argument is only used to determine the context;\nthey are not modified.  The locals argument is unused.  The fromlist\nshould be a list of names to emulate ``from name import ...'', or an\nempty list to emulate ``import name''.\nWhen importing a module from a package, note that __import__('A.B', ...)\nreturns package A when fromlist is empty, but its submodule B when\nfromlist is not empty.  The level argument is used to determine whether to\nperform absolute or relative imports: 0 is absolute, while a positive number\nis the number of parent directories to search relative to the current module.\n```"}, "sortText": "z", "filterText": "__import__", "insertText": "__import__(${1:name})$0", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 586, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 429}, "edits": [{"range": {"start": {"line": 27, "character": 0}, "end": {"line": 28, "character": 1}}, "newText": "def jls_extract_def():\n    \n    return \n\n\n__t    = jls_extract_def()\n\n"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 587, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 588, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 432}, "edits": [{"range": {"start": {"line": 27, "character": 0}, "end": {"line": 28, "character": 1}}, "newText": "def jls_extract_def():\n    \n    return \n\n\n__test    = jls_extract_def()\n\n"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 589, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 590, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 591, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 434}, "edits": [{"range": {"start": {"line": 27, "character": 0}, "end": {"line": 28, "character": 1}}, "newText": "def jls_extract_def():\n    \n    return \n\n\n__test__    = jls_extract_def()\n\n"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 592, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 21, "character": 21}}, "selectionRange": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 23, "character": 0}, "end": {"line": 25, "character": 31}}, "selectionRange": {"start": {"line": 23, "character": 4}, "end": {"line": 23, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 593, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 594, "result": [{"range": {"start": {"line": 27, "character": 0}, "end": {"line": 27, "character": 8}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 27, "character": 15}, "end": {"line": 28, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 595, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 596, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 597, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 21, "character": 21}}, "selectionRange": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 23, "character": 0}, "end": {"line": 25, "character": 31}}, "selectionRange": {"start": {"line": 23, "character": 4}, "end": {"line": 23, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 27, "character": 14}, "end": {"line": 28, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 27, "character": 13}, "end": {"line": 28, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 27, "character": 12}, "end": {"line": 28, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 598, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 27, "character": 14}, "end": {"line": 28, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 27, "character": 14}, "end": {"line": 28, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 599, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 600, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 601, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 21, "character": 21}}, "selectionRange": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 23, "character": 0}, "end": {"line": 25, "character": 31}}, "selectionRange": {"start": {"line": 23, "character": 4}, "end": {"line": 23, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 0}, "end": {"line": 29, "character": 0}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 0}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 602, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 21, "character": 21}}, "selectionRange": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 23, "character": 0}, "end": {"line": 25, "character": 31}}, "selectionRange": {"start": {"line": 23, "character": 4}, "end": {"line": 23, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 603, "result": {"contents": {"kind": "markdown", "value": "```python\nkeyword (\n```\n---\nSequence Types \u2014 \"list\", \"tuple\", \"range\"\n*****************************************\n\nThere are three basic sequence types: lists, tuples, and range\nobjects. Additional sequence types tailored for processing of binary\ndata and text strings are described in dedicated sections.\n\n\nCommon Sequence Operations\n==========================\n\nThe operations in the following table are supported by most sequence\ntypes, both mutable and immutable. The \"collections.abc.Sequence\" ABC\nis provided to make it easier to correctly implement these operations\non custom sequence types.\n\nThis table lists the sequence operations sorted in ascending priority.\nIn the table, *s* and *t* are sequences of the same type, *n*, *i*,\n*j* and *k* are integers and *x* is an arbitrary object that meets any\ntype and value restrictions imposed by *s*.\n\nThe \"in\" and \"not in\" operations have the same priorities as the\ncomparison operations. The \"+\" (concatenation) and \"*\" (repetition)\noperations have the same priority as the corresponding numeric\noperations. [3]\n\n| Operation |            Result           | Notes |\n| --------- | --------------------------- | ----- |\n| \"x in s\"  | \"True\" if an item of *s* is | (1)   |\n|                            | equal to *x*, else \"False\"       |            |\n| \"x not in s\" | \"False\" if an item of *s* is | (1) |\n| ------------ | ---------------------------- | --- |\n|      \"s + t\"       | the concatenation of *s* and *t* | (6)(7) |\n| ------------------ | -------------------------------- | ------ |\n| \"s * n\" or \"n * s\" | equivalent to adding *s* to      | (2)(7) |\n|                            | itself *n* times                 |            |\n|   \"s[i]\"   | *i*th item of *s*, origin 0  |  (3)   |\n| ---------- | ---------------------------- | ------ |\n| \"s[i:j]\"   | slice of *s* from *i* to *j* | (3)(4) |\n| \"s[i:j:k]\" | slice of *s* from *i* to *j* | (3)(5) |\n|                            | with step *k*                    |            |\n|        \"len(s)\"        |          length of *s*           |     |\n| ---------------------- | -------------------------------- | --- |\n| \"min(s)\"               | smallest item of *s*             |     |\n| \"max(s)\"               | largest item of *s*              |     |\n| \"s.index(x[, i[, j]])\" | index of the first occurrence of | (8) |\n|                            | *x* in *s* (at or after index    |            |\n|                            | *i* and before index *j*)        |            |\n| \"s.count(x)\" | total number of occurrences of |  |\n| ------------ | ------------------------------ |  |\n|  |  |  |\n|  |  |  |\ntuples and lists are compared lexicographically by comparing\ncorresponding elements. This means that to compare equal, every\nelement must compare equal and the two sequences must be of the same\ntype and have the same length.  (For full details see Comparisons in\nthe language reference.)\n\nNotes:\n\n1. While the \"in\" and \"not in\" operations are used only for simple\n   containment testing in the general case, some specialised sequences\n   (such as \"str\", \"bytes\" and \"bytearray\") also use them for\n   subsequence testing:\n\n      >>> \"gg\" in \"eggs\"\n      True\n\n2. Values of *n* less than \"0\" are treated as \"0\" (which yields an\n   empty sequence of the same type as *s*).  Note that items in the\n   sequence *s* are not copied; they are referenced multiple times.\n   This often haunts new Python programmers; consider:\n\n      >>> lists = [[]] * 3\n      >>> lists\n      [[], [], []]\n      >>> lists[0].append(3)\n      >>> lists\n      [[3], [3], [3]]\n\n   What has happened is that \"[[]]\" is a one-element list containing\n   an empty list, so all three elements of \"[[]] * 3\" are references\n   to this single empty list.  Modifying any of the elements of\n   \"lists\" modifies this single list. You can create a list of\n   different lists this way:\n\n      >>> lists = [[] for i in range(3)]\n      >>> lists[0].append(3)\n      >>> lists[1].append(5)\n      >>> lists[2].append(7)\n      >>> lists\n      [[3], [5], [7]]\n\n   Further explanation is available in the FAQ entry How do I create a\n   multidimensional list?.\n\n3. If *i* or *j* is negative, the index is relative to the end of\n   sequence *s*: \"len(s) + i\" or \"len(s) + j\" is substituted.  But\n   note that \"-0\" is still \"0\".\n\n4. The slice of *s* from *i* to *j* is defined as the sequence of\n   items with index *k* such that \"i <= k < j\".  If *i* or *j* is\n   greater than \"len(s)\", use \"len(s)\".  If *i* is omitted or \"None\",\n   use \"0\".  If *j* is omitted or \"None\", use \"len(s)\".  If *i* is\n   greater than or equal to *j*, the slice is empty.\n\n5. The slice of *s* from *i* to *j* with step *k* is defined as the\n   sequence of items with index  \"x = i + n*k\" such that \"0 <= n <\n   (j-i)/k\".  In other words, the indices are \"i\", \"i+k\", \"i+2*k\",\n   \"i+3*k\" and so on, stopping when *j* is reached (but never\n   including *j*).  When *k* is positive, *i* and *j* are reduced to\n   \"len(s)\" if they are greater. When *k* is negative, *i* and *j* are\n   reduced to \"len(s) - 1\" if they are greater.  If *i* or *j* are\n   omitted or \"None\", they become \u201cend\u201d values (which end depends on\n   the sign of *k*).  Note, *k* cannot be zero. If *k* is \"None\", it\n   is treated like \"1\".\n\n6. Concatenating immutable sequences always results in a new object.\n   This means that building up a sequence by repeated concatenation\n   will have a quadratic runtime cost in the total sequence length.\n   To get a linear runtime cost, you must switch to one of the\n   alternatives below:\n\n   * if concatenating \"str\" objects, you can build a list and use\n     \"str.join()\" at the end or else write to an \"io.StringIO\"\n     instance and retrieve its value when complete\n\n   * if concatenating \"bytes\" objects, you can similarly use\n     \"bytes.join()\" or \"io.BytesIO\", or you can do in-place\n     concatenation with a \"bytearray\" object.  \"bytearray\" objects are\n     mutable and have an efficient overallocation mechanism\n\n   * if concatenating \"tuple\" objects, extend a \"list\" instead\n\n   * for other types, investigate the relevant class documentation\n\n7. Some sequence types (such as \"range\") only support item sequences\n   that follow specific patterns, and hence don\u2019t support sequence\n   concatenation or repetition.\n\n8. \"index\" raises \"ValueError\" when *x* is not found in *s*. Not all\n   implementations support passing the additional arguments *i* and\n   *j*. These arguments allow efficient searching of subsections of\n   the sequence. Passing the extra arguments is roughly equivalent to\n   using \"s[i:j].index(x)\", only without copying any data and with the\n   returned index being relative to the start of the sequence rather\n   than the start of the slice.\n\n\nImmutable Sequence Types\n========================\n\nThe only operation that immutable sequence types generally implement\nthat is not also implemented by mutable sequence types is support for\nthe \"hash()\" built-in.\n\nThis support allows immutable sequences, such as \"tuple\" instances, to\nbe used as \"dict\" keys and stored in \"set\" and \"frozenset\" instances.\n\nAttempting to hash an immutable sequence that contains unhashable\nvalues will result in \"TypeError\".\n\n\nMutable Sequence Types\n======================\n\nThe operations in the following table are defined on mutable sequence\ntypes. The \"collections.abc.MutableSequence\" ABC is provided to make\nit easier to correctly implement these operations on custom sequence\ntypes.\n\nIn the table *s* is an instance of a mutable sequence type, *t* is any\niterable object and *x* is an arbitrary object that meets any type and\nvalue restrictions imposed by *s* (for example, \"bytearray\" only\naccepts integers that meet the value restriction \"0 <= x <= 255\").\n\n| Operation  |             Result             | Notes |\n| ---------- | ------------------------------ | ----- |\n| \"s[i] = x\" | item *i* of *s* is replaced by |       |\n|                                | *x*                              |                       |\n|  \"s[i:j] = t\"  | slice of *s* from *i* to *j* is |     |\n| -------------- | ------------------------------- | --- |\n|                | iterable *t*                    |     |\n| \"del s[i:j]\"   | same as \"s[i:j] = []\"           |     |\n| \"s[i:j:k] = t\" | the elements of \"s[i:j:k]\" are  | (1) |\n|                                | replaced by those of *t*         |                       |\n| \"del s[i:j:k]\" | removes the elements of |  |\n| -------------- | ----------------------- |  |\n| \"s.append(x)\" |  appends *x* to the end of the   |     |\n| ------------- | -------------------------------- | --- |\n|               | \"s[len(s):len(s)] = [x]\")        |     |\n| \"s.clear()\"   | removes all items from *s* (same | (5) |\n|                                | as \"del s[:]\")                   |                       |\n| \"s.copy()\" | creates a shallow copy of *s* | (5) |\n| ---------- | ----------------------------- | --- |\n| \"s.extend(t)\" or \"s += t\" | extends *s* with the contents of |     |\n| ------------------------- | -------------------------------- | --- |\n|                           | as \"s[len(s):len(s)] = t\")       |     |\n| \"s *= n\"                  | updates *s* with its contents    | (6) |\n|                                | repeated *n* times               |                       |\n| \"s.insert(i, x)\" |  inserts *x* into *s* at the  |     |\n| ---------------- | ----------------------------- | --- |\n|                  | \"s[i:i] = [x]\")               |     |\n| \"s.pop([i])\"     | retrieves the item at *i* and | (2) |\n|                                | also removes it from *s*         |                       |\n| \"s.remove(x)\" | remove the first item from *s* | (3) |\n| ------------- | ------------------------------ | --- |\n| \"s.reverse()\" | reverses the items of *s* in | (4) |\n| ------------- | ---------------------------- | --- |\n|  |  |  |\n|  |  |  |\n```python\nrange(0, 20, 2)\n```\n\n1. *t* must have the same length as the slice it is replacing.\n\n2. The optional argument *i* defaults to \"-1\", so that by default the\n   last item is removed and returned.\n\n3. \"remove()\" raises \"ValueError\" when *x* is not found in *s*.\n\n4. The \"reverse()\" method modifies the sequence in place for economy\n   of space when reversing a large sequence.  To remind users that it\n   operates by side effect, it does not return the reversed sequence.\n\n5. \"clear()\" and \"copy()\" are included for consistency with the\n   interfaces of mutable containers that don\u2019t support slicing\n   operations (such as \"dict\" and \"set\"). \"copy()\" is not part of the\n   \"collections.abc.MutableSequence\" ABC, but most concrete mutable\n   sequence classes provide it.\n\n   New in version 3.3: \"clear()\" and \"copy()\" methods.\n\n6. The value *n* is an integer, or an object implementing\n   \"\\_\\_index\\_\\_()\".  Zero and negative values of *n* clear the sequence.\n   Items in the sequence are not copied; they are referenced multiple\n   times, as explained for \"s * n\" under Common Sequence Operations.\n\n\nLists\n=====\n\nLists are mutable sequences, typically used to store collections of\nhomogeneous items (where the precise degree of similarity will vary by\napplication).\n\nclass list([iterable])\n\n   Lists may be constructed in several ways:\n\n   * Using a pair of square brackets to denote the empty list: \"[]\"\n\n   * Using square brackets, separating items with commas: \"[a]\", \"[a,\n     b, c]\"\n\n   * Using a list comprehension: \"[x for x in iterable]\"\n\n   * Using the type constructor: \"list()\" or \"list(iterable)\"\n\n   The constructor builds a list whose items are the same and in the\n   same order as *iterable*\u2019s items.  *iterable* may be either a\n   sequence, a container that supports iteration, or an iterator\n   object.  If *iterable* is already a list, a copy is made and\n   returned, similar to \"iterable[:]\". For example, \"list('abc')\"\n   returns \"['a', 'b', 'c']\" and \"list( (1, 2, 3) )\" returns \"[1, 2,\n   3]\". If no argument is given, the constructor creates a new empty\n   list, \"[]\".\n\n   Many other operations also produce lists, including the \"sorted()\"\n   built-in.\n\n   Lists implement all of the common and mutable sequence operations.\n   Lists also provide the following additional method:\n\n   sort(*, key=None, reverse=False)\n\n      This method sorts the list in place, using only \"<\" comparisons\n      between items. Exceptions are not suppressed - if any comparison\n      operations fail, the entire sort operation will fail (and the\n      list will likely be left in a partially modified state).\n\n      \"sort()\" accepts two arguments that can only be passed by\n      keyword (keyword-only arguments):\n\n      *key* specifies a function of one argument that is used to\n      extract a comparison key from each list element (for example,\n      \"key=str.lower\"). The key corresponding to each item in the list\n      is calculated once and then used for the entire sorting process.\n      The default value of \"None\" means that list items are sorted\n      directly without calculating a separate key value.\n\n      The \"functools.cmp_to_key()\" utility is available to convert a\n      2.x style *cmp* function to a *key* function.\n\n      *reverse* is a boolean value.  If set to \"True\", then the list\n      elements are sorted as if each comparison were reversed.\n\n      This method modifies the sequence in place for economy of space\n      when sorting a large sequence.  To remind users that it operates\n      by side effect, it does not return the sorted sequence (use\n      \"sorted()\" to explicitly request a new sorted list instance).\n\n      The \"sort()\" method is guaranteed to be stable.  A sort is\n      stable if it guarantees not to change the relative order of\n      elements that compare equal \u2014 this is helpful for sorting in\n      multiple passes (for example, sort by department, then by salary\n      grade).\n\n      For sorting examples and a brief sorting tutorial, see Sorting\n      HOW TO.\n\n      **CPython implementation detail:** While a list is being sorted,\n      the effect of attempting to mutate, or even inspect, the list is\n      undefined.  The C implementation of Python makes the list appear\n      empty for the duration, and raises \"ValueError\" if it can detect\n      that the list has been mutated during a sort.\n\n\nTuples\n======\n\nTuples are immutable sequences, typically used to store collections of\nheterogeneous data (such as the 2-tuples produced by the \"enumerate()\"\nbuilt-in). Tuples are also used for cases where an immutable sequence\nof homogeneous data is needed (such as allowing storage in a \"set\" or\n\"dict\" instance).\n\nclass tuple([iterable])\n\n   Tuples may be constructed in a number of ways:\n\n   * Using a pair of parentheses to denote the empty tuple: \"()\"\n\n   * Using a trailing comma for a singleton tuple: \"a,\" or \"(a,)\"\n\n   * Separating items with commas: \"a, b, c\" or \"(a, b, c)\"\n\n   * Using the \"tuple()\" built-in: \"tuple()\" or \"tuple(iterable)\"\n\n   The constructor builds a tuple whose items are the same and in the\n   same order as *iterable*\u2019s items.  *iterable* may be either a\n   sequence, a container that supports iteration, or an iterator\n   object.  If *iterable* is already a tuple, it is returned\n   unchanged. For example, \"tuple('abc')\" returns \"('a', 'b', 'c')\"\n   and \"tuple( [1, 2, 3] )\" returns \"(1, 2, 3)\". If no argument is\n   given, the constructor creates a new empty tuple, \"()\".\n\n   Note that it is actually the comma which makes a tuple, not the\n   parentheses. The parentheses are optional, except in the empty\n   tuple case, or when they are needed to avoid syntactic ambiguity.\n   For example, \"f(a, b, c)\" is a function call with three arguments,\n   while \"f((a, b, c))\" is a function call with a 3-tuple as the sole\n   argument.\n\n   Tuples implement all of the common sequence operations.\n\nFor heterogeneous collections of data where access by name is clearer\nthan access by index, \"collections.namedtuple()\" may be a more\nappropriate choice than a simple tuple object.\n\n\nRanges\n======\n\nThe \"range\" type represents an immutable sequence of numbers and is\ncommonly used for looping a specific number of times in \"for\" loops.\n\nclass range(stop)\nclass range(start, stop[, step])\n\n   The arguments to the range constructor must be integers (either\n   built-in \"int\" or any object that implements the \"\\_\\_index\\_\\_\"\n   special method).  If the *step* argument is omitted, it defaults to\n   \"1\". If the *start* argument is omitted, it defaults to \"0\". If\n   *step* is zero, \"ValueError\" is raised.\n\n   For a positive *step*, the contents of a range \"r\" are determined\n   by the formula \"r[i] = start + step*i\" where \"i >= 0\" and \"r[i] <\n   stop\".\n\n   For a negative *step*, the contents of the range are still\n   determined by the formula \"r[i] = start + step*i\", but the\n   constraints are \"i >= 0\" and \"r[i] > stop\".\n\n   A range object will be empty if \"r[0]\" does not meet the value\n   constraint. Ranges do support negative indices, but these are\n   interpreted as indexing from the end of the sequence determined by\n   the positive indices.\n\n   Ranges containing absolute values larger than \"sys.maxsize\" are\n   permitted but some features (such as \"len()\") may raise\n   \"OverflowError\".\n\n   Range examples:\n\n      >>> list(range(10))\n      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n      >>> list(range(1, 11))\n      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n      >>> list(range(0, 30, 5))\n      [0, 5, 10, 15, 20, 25]\n      >>> list(range(0, 10, 3))\n      [0, 3, 6, 9]\n      >>> list(range(0, -10, -1))\n      [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n      >>> list(range(0))\n      []\n      >>> list(range(1, 0))\n      []\n\n   Ranges implement all of the common sequence operations except\n   concatenation and repetition (due to the fact that range objects\n   can only represent sequences that follow a strict pattern and\n   repetition and concatenation will usually violate that pattern).\n\n   start\n\n      The value of the *start* parameter (or \"0\" if the parameter was\n      not supplied)\n\n   stop\n\n      The value of the *stop* parameter\n\n   step\n\n      The value of the *step* parameter (or \"1\" if the parameter was\n      not supplied)\n\nThe advantage of the \"range\" type over a regular \"list\" or \"tuple\" is\nthat a \"range\" object will always take the same (small) amount of\nmemory, no matter the size of the range it represents (as it only\nstores the \"start\", \"stop\" and \"step\" values, calculating individual\nitems and subranges as needed).\n\nRange objects implement the \"collections.abc.Sequence\" ABC, and\nprovide features such as containment tests, element index lookup,\nslicing and support for negative indices (see Sequence Types \u2014 list,\ntuple, range):\n\n```python\nr = range(0, 20, 2)\nr\n11 in r\n```\n\n```\nFalse\n```\n\n```python\n10 in r\n```\n\n```\nTrue\n```\n\n```python\nr.index(10)\n```\n\n```\n5\n```\n\n```python\nr[5]\n```\n\n```\n10\n```\n\n```python\nrange(0, 10, 2)\n```\n```python\nr[:5]\nr[-1]\n```\n\n```\n18\n```\n\n\nTesting range objects for equality with \"==\" and \"!=\" compares them as\nsequences.  That is, two range objects are considered equal if they\nrepresent the same sequence of values.  (Note that two range objects\nthat compare equal might have different \"start\", \"stop\" and \"step\"\nattributes, for example \"range(0) == range(2, 1, 3)\" or \"range(0, 3,\n2) == range(0, 4, 2)\".)\n\nChanged in version 3.2: Implement the Sequence ABC. Support slicing\nand negative indices. Test \"int\" objects for membership in constant\ntime instead of iterating through all items.\n\nChanged in version 3.3: Define \u2018==\u2019 and \u2018!=\u2019 to compare range objects\nbased on the sequence of values they define (instead of comparing\nbased on object identity).\n\nNew in version 3.3: The \"start\", \"stop\" and \"step\" attributes.\n\nSee also:\n\n  * The linspace recipe shows how to implement a lazy version of range\n    suitable for floating point applications."}, "range": null}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 604, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 27, "character": 13}, "end": {"line": 27, "character": 14}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 27, "character": 12}, "end": {"line": 27, "character": 13}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 605, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 606, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 21, "character": 21}}, "selectionRange": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 23, "character": 0}, "end": {"line": 25, "character": 31}}, "selectionRange": {"start": {"line": 23, "character": 4}, "end": {"line": 23, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 607, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 608, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 609, "result": [{"range": {"start": {"line": 27, "character": 4}, "end": {"line": 27, "character": 12}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 610, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 0}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 0}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 611, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 612, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 613, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 21, "character": 21}}, "selectionRange": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 23, "character": 0}, "end": {"line": 25, "character": 31}}, "selectionRange": {"start": {"line": 23, "character": 4}, "end": {"line": 23, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 0}, "end": {"line": 29, "character": 0}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 28, "character": 0}, "end": {"line": 28, "character": 0}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 28, "character": 0}, "end": {"line": 28, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 614, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 21, "character": 21}}, "selectionRange": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 23, "character": 0}, "end": {"line": 25, "character": 31}}, "selectionRange": {"start": {"line": 23, "character": 4}, "end": {"line": 23, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 615, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 28, "character": 0}, "end": {"line": 28, "character": 0}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 27, "character": 15}, "end": {"line": 27, "character": 15}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 616, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 28, "character": 0}, "end": {"line": 28, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 28, "character": 0}, "end": {"line": 28, "character": 8}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 28, "character": 0}, "end": {"line": 28, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 617, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 21, "character": 21}}, "selectionRange": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 23, "character": 0}, "end": {"line": 25, "character": 31}}, "selectionRange": {"start": {"line": 23, "character": 4}, "end": {"line": 23, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 618, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement filename\n```\n---\n```python\nfor filename in os.scandir(directory): if filename.endswith(\".flac\" or \".jpg\" or \".png\"): set.add(filename) if filename.is_dir: dirs.add(filename) contains_directory = True\n```\n**Full name:** `fixer.get_songs.filename`"}, "range": {"start": {"line": 12, "character": 21}, "end": {"line": 12, "character": 29}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 619, "result": {"contents": {"kind": "markdown", "value": "```python\nkeyword import\n```\n---\n```text\nThe \"import\" statement\n**********************\n\n   import_stmt     ::= \"import\" module [\"as\" identifier] (\",\" module [\"as\" identifier])*\n                   | \"from\" relative_module \"import\" identifier [\"as\" identifier]\n                   (\",\" identifier [\"as\" identifier])*\n                   | \"from\" relative_module \"import\" \"(\" identifier [\"as\" identifier]\n                   (\",\" identifier [\"as\" identifier])* [\",\"] \")\"\n                   | \"from\" relative_module \"import\" \"*\"\n   module          ::= (identifier \".\")* identifier\n   relative_module ::= \".\"* module | \".\"+\n\nThe basic import statement (no \"from\" clause) is executed in two\nsteps:\n\n1. find a module, loading and initializing it if necessary\n\n2. define a name or names in the local namespace for the scope where\n   the \"import\" statement occurs.\n\nWhen the statement contains multiple clauses (separated by commas) the\ntwo steps are carried out separately for each clause, just as though\nthe clauses had been separated out into individual import statements.\n\nThe details of the first step, finding and loading modules are\ndescribed in greater detail in the section on the import system, which\nalso describes the various types of packages and modules that can be\nimported, as well as all the hooks that can be used to customize the\nimport system. Note that failures in this step may indicate either\nthat the module could not be located, *or* that an error occurred\nwhile initializing the module, which includes execution of the\nmodule\u2019s code.\n\nIf the requested module is retrieved successfully, it will be made\navailable in the local namespace in one of three ways:\n\n* If the module name is followed by \"as\", then the name following \"as\"\n  is bound directly to the imported module.\n\n* If no other name is specified, and the module being imported is a\n  top level module, the module\u2019s name is bound in the local namespace\n  as a reference to the imported module\n\n* If the module being imported is *not* a top level module, then the\n  name of the top level package that contains the module is bound in\n  the local namespace as a reference to the top level package. The\n  imported module must be accessed using its full qualified name\n  rather than directly\n\nThe \"from\" form uses a slightly more complex process:\n\n1. find the module specified in the \"from\" clause, loading and\n   initializing it if necessary;\n\n2. for each of the identifiers specified in the \"import\" clauses:\n\n   1. check if the imported module has an attribute by that name\n\n   2. if not, attempt to import a submodule with that name and then\n      check the imported module again for that attribute\n\n   3. if the attribute is not found, \"ImportError\" is raised.\n\n   4. otherwise, a reference to that value is stored in the local\n      namespace, using the name in the \"as\" clause if it is present,\n      otherwise using the attribute name\n\nExamples:\n\n   import foo                 # foo imported and bound locally\n   import foo.bar.baz         # foo.bar.baz imported, foo bound locally\n   import foo.bar.baz as fbb  # foo.bar.baz imported and bound as fbb\n   from foo.bar import baz    # foo.bar.baz imported and bound as baz\n   from foo import attr       # foo imported and foo.attr bound as attr\n\nIf the list of identifiers is replaced by a star (\"'*'\"), all public\nnames defined in the module are bound in the local namespace for the\nscope where the \"import\" statement occurs.\n\nThe *public names* defined by a module are determined by checking the\nmodule\u2019s namespace for a variable named \"__all__\"; if defined, it must\nbe a sequence of strings which are names defined or imported by that\nmodule.  The names given in \"__all__\" are all considered public and\nare required to exist.  If \"__all__\" is not defined, the set of public\nnames includes all names found in the module\u2019s namespace which do not\nbegin with an underscore character (\"'_'\").  \"__all__\" should contain\nthe entire public API. It is intended to avoid accidentally exporting\nitems that are not part of the API (such as library modules which were\nimported and used within the module).\n\nThe wild card form of import \u2014 \"from module import *\" \u2014 is only\nallowed at the module level.  Attempting to use it in class or\nfunction definitions will raise a \"SyntaxError\".\n\nWhen specifying what module to import you do not have to specify the\nabsolute name of the module. When a module or package is contained\nwithin another package it is possible to make a relative import within\nthe same top package without having to mention the package name. By\nusing leading dots in the specified module or package after \"from\" you\ncan specify how high to traverse up the current package hierarchy\nwithout specifying exact names. One leading dot means the current\npackage where the module making the import exists. Two dots means up\none package level. Three dots is up two levels, etc. So if you execute\n\"from . import mod\" from a module in the \"pkg\" package then you will\nend up importing \"pkg.mod\". If you execute \"from ..subpkg2 import mod\"\nfrom within \"pkg.subpkg1\" you will import \"pkg.subpkg2.mod\". The\nspecification for relative imports is contained in the Package\nRelative Imports section.\n\n\"importlib.import_module()\" is provided to support applications that\ndetermine dynamically the modules to be loaded.\n\nRaises an auditing event \"import\" with arguments \"module\", \"filename\",\n\"sys.path\", \"sys.meta_path\", \"sys.path_hooks\".\n\n\nFuture statements\n=================\n\nA *future statement* is a directive to the compiler that a particular\nmodule should be compiled using syntax or semantics that will be\navailable in a specified future release of Python where the feature\nbecomes standard.\n\nThe future statement is intended to ease migration to future versions\nof Python that introduce incompatible changes to the language.  It\nallows use of the new features on a per-module basis before the\nrelease in which the feature becomes standard.\n\n   future_stmt ::= \"from\" \"__future__\" \"import\" feature [\"as\" identifier]\n                   (\",\" feature [\"as\" identifier])*\n                   | \"from\" \"__future__\" \"import\" \"(\" feature [\"as\" identifier]\n                   (\",\" feature [\"as\" identifier])* [\",\"] \")\"\n   feature     ::= identifier\n\nA future statement must appear near the top of the module.  The only\nlines that can appear before a future statement are:\n\n* the module docstring (if any),\n\n* comments,\n\n* blank lines, and\n\n* other future statements.\n\nThe only feature that requires using the future statement is\n\"annotations\" (see **PEP 563**).\n\nAll historical features enabled by the future statement are still\nrecognized by Python 3.  The list includes \"absolute_import\",\n\"division\", \"generators\", \"generator_stop\", \"unicode_literals\",\n\"print_function\", \"nested_scopes\" and \"with_statement\".  They are all\nredundant because they are always enabled, and only kept for backwards\ncompatibility.\n\nA future statement is recognized and treated specially at compile\ntime: Changes to the semantics of core constructs are often\nimplemented by generating different code.  It may even be the case\nthat a new feature introduces new incompatible syntax (such as a new\nreserved word), in which case the compiler may need to parse the\nmodule differently.  Such decisions cannot be pushed off until\nruntime.\n\nFor any given release, the compiler knows which feature names have\nbeen defined, and raises a compile-time error if a future statement\ncontains a feature not known to it.\n\nThe direct runtime semantics are the same as for any import statement:\nthere is a standard module \"__future__\", described later, and it will\nbe imported in the usual way at the time the future statement is\nexecuted.\n\nThe interesting runtime semantics depend on the specific feature\nenabled by the future statement.\n\nNote that there is nothing special about the statement:\n\n   import __future__ [as name]\n\nThat is not a future statement; it\u2019s an ordinary import statement with\nno special semantics or syntax restrictions.\n\nCode compiled by calls to the built-in functions \"exec()\" and\n\"compile()\" that occur in a module \"M\" containing a future statement\nwill, by default, use the new syntax or semantics associated with the\nfuture statement.  This can be controlled by optional arguments to\n\"compile()\" \u2014 see the documentation of that function for details.\n\nA future statement typed at an interactive interpreter prompt will\ntake effect for the rest of the interpreter session.  If an\ninterpreter is started with the \"-i\" option, is passed a script name\nto execute, and the script includes a future statement, it will be in\neffect in the interactive session started after the script is\nexecuted.\n\nSee also:\n\n  **PEP 236** - Back to the __future__\n     The original proposal for the __future__ mechanism.\n```"}, "range": {"start": {"line": 0, "character": 18}, "end": {"line": 0, "character": 24}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 620, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 621, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 622, "result": [{"range": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}}, {"range": {"start": {"line": 7, "character": 20}, "end": {"line": 7, "character": 22}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 623, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 0}, "end": {"line": 29, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 624, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 625, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 626, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 627, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement filename\n```\n---\n```python\nfor filename in os.scandir(directory): if filename.endswith(\".flac\" or \".jpg\" or \".png\"): set.add(filename) if filename.is_dir: dirs.add(filename) contains_directory = True\n```\n**Full name:** `fixer.get_songs.filename`"}, "range": {"start": {"line": 10, "character": 11}, "end": {"line": 10, "character": 19}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 628, "result": {"isIncomplete": false, "items": [{"label": "NameError", "kind": 7, "sortText": "z", "filterText": "NameError", "insertText": "NameError($0)", "insertTextFormat": 2}, {"label": "next", "kind": 3, "sortText": "z", "filterText": "next", "insertText": "next(${1:i})$0", "insertTextFormat": 2}, {"label": "None", "kind": 14, "sortText": "z", "filterText": "None", "insertText": "None", "insertTextFormat": 1}, {"label": "nonlocal", "kind": 14, "sortText": "z", "filterText": "nonlocal", "insertText": "nonlocal", "insertTextFormat": 1}, {"label": "not", "kind": 14, "sortText": "z", "filterText": "not", "insertText": "not", "insertTextFormat": 1}, {"label": "NotADirectoryError", "kind": 7, "sortText": "z", "filterText": "NotADirectoryError", "insertText": "NotADirectoryError($0)", "insertTextFormat": 2}, {"label": "NotImplemented", "kind": 6, "sortText": "z", "filterText": "NotImplemented", "insertText": "NotImplemented", "insertTextFormat": 1}, {"label": "NotImplementedError", "kind": 7, "sortText": "z", "filterText": "NotImplementedError", "insertText": "NotImplementedError($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 629, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 630, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 631, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 632, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 633, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 634, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement contains_directory\n```\n---\n```python\ncontains_directory = True\n```\n**Full name:** `fixer.get_songs.contains_directory`"}, "range": {"start": {"line": 15, "character": 12}, "end": {"line": 15, "character": 30}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 635, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 636, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 637, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 638, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 639, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 640, "result": {"contents": {"kind": "markdown", "value": "```python\nkeyword :\n```\n---\n```text\nSlicings\n********\n\nA slicing selects a range of items in a sequence object (e.g., a\nstring, tuple or list).  Slicings may be used as expressions or as\ntargets in assignment or \"del\" statements.  The syntax for a slicing:\n\n   slicing      ::= primary \"[\" slice_list \"]\"\n   slice_list   ::= slice_item (\",\" slice_item)* [\",\"]\n   slice_item   ::= expression | proper_slice\n   proper_slice ::= [lower_bound] \":\" [upper_bound] [ \":\" [stride] ]\n   lower_bound  ::= expression\n   upper_bound  ::= expression\n   stride       ::= expression\n\nThere is ambiguity in the formal syntax here: anything that looks like\nan expression list also looks like a slice list, so any subscription\ncan be interpreted as a slicing.  Rather than further complicating the\nsyntax, this is disambiguated by defining that in this case the\ninterpretation as a subscription takes priority over the\ninterpretation as a slicing (this is the case if the slice list\ncontains no proper slice).\n\nThe semantics for a slicing are as follows.  The primary is indexed\n(using the same \"__getitem__()\" method as normal subscription) with a\nkey that is constructed from the slice list, as follows.  If the slice\nlist contains at least one comma, the key is a tuple containing the\nconversion of the slice items; otherwise, the conversion of the lone\nslice item is the key.  The conversion of a slice item that is an\nexpression is that expression.  The conversion of a proper slice is a\nslice object (see section The standard type hierarchy) whose \"start\",\n\"stop\" and \"step\" attributes are the values of the expressions given\nas lower bound, upper bound and stride, respectively, substituting\n\"None\" for missing expressions.\n```"}, "range": null}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 641, "result": {"isIncomplete": false, "items": [{"label": "abs", "kind": 3, "sortText": "z", "filterText": "abs", "insertText": "abs(${1:n})$0", "insertTextFormat": 2}, {"label": "all", "kind": 3, "sortText": "z", "filterText": "all", "insertText": "all(${1:i})$0", "insertTextFormat": 2}, {"label": "any", "kind": 3, "sortText": "z", "filterText": "any", "insertText": "any(${1:i})$0", "insertTextFormat": 2}, {"label": "ArithmeticError", "kind": 7, "sortText": "z", "filterText": "ArithmeticError", "insertText": "ArithmeticError($0)", "insertTextFormat": 2}, {"label": "ascii", "kind": 3, "sortText": "z", "filterText": "ascii", "insertText": "ascii(${1:o})$0", "insertTextFormat": 2}, {"label": "assert", "kind": 14, "sortText": "z", "filterText": "assert", "insertText": "assert", "insertTextFormat": 1}, {"label": "AssertionError", "kind": 7, "sortText": "z", "filterText": "AssertionError", "insertText": "AssertionError($0)", "insertTextFormat": 2}, {"label": "async", "kind": 14, "sortText": "z", "filterText": "async", "insertText": "async", "insertTextFormat": 1}, {"label": "AttributeError", "kind": 7, "sortText": "z", "filterText": "AttributeError", "insertText": "AttributeError($0)", "insertTextFormat": 2}, {"label": "await", "kind": 14, "sortText": "z", "filterText": "await", "insertText": "await", "insertTextFormat": 1}, {"label": "BaseException", "kind": 7, "sortText": "z", "filterText": "BaseException", "insertText": "BaseException($0)", "insertTextFormat": 2}, {"label": "bin", "kind": 3, "sortText": "z", "filterText": "bin", "insertText": "bin(${1:number})$0", "insertTextFormat": 2}, {"label": "BlockingIOError", "kind": 7, "sortText": "z", "filterText": "BlockingIOError", "insertText": "BlockingIOError($0)", "insertTextFormat": 2}, {"label": "bool", "kind": 7, "sortText": "z", "filterText": "bool", "insertText": "bool($0)", "insertTextFormat": 2}, {"label": "break", "kind": 14, "sortText": "z", "filterText": "break", "insertText": "break", "insertTextFormat": 1}, {"label": "breakpoint", "kind": 3, "sortText": "z", "filterText": "breakpoint", "insertText": "breakpoint($0)", "insertTextFormat": 2}, {"label": "BrokenPipeError", "kind": 7, "sortText": "z", "filterText": "BrokenPipeError", "insertText": "BrokenPipeError($0)", "insertTextFormat": 2}, {"label": "BufferError", "kind": 7, "sortText": "z", "filterText": "BufferError", "insertText": "BufferError($0)", "insertTextFormat": 2}, {"label": "bytearray", "kind": 7, "sortText": "z", "filterText": "bytearray", "insertText": "bytearray()$0", "insertTextFormat": 2}, {"label": "bytes", "kind": 7, "sortText": "z", "filterText": "bytes", "insertText": "bytes(${1:ints})$0", "insertTextFormat": 2}, {"label": "BytesWarning", "kind": 7, "sortText": "z", "filterText": "BytesWarning", "insertText": "BytesWarning($0)", "insertTextFormat": 2}, {"label": "callable", "kind": 3, "sortText": "z", "filterText": "callable", "insertText": "callable(${1:o})$0", "insertTextFormat": 2}, {"label": "ChildProcessError", "kind": 7, "sortText": "z", "filterText": "ChildProcessError", "insertText": "ChildProcessError($0)", "insertTextFormat": 2}, {"label": "chr", "kind": 3, "sortText": "z", "filterText": "chr", "insertText": "chr(${1:code})$0", "insertTextFormat": 2}, {"label": "class", "kind": 14, "sortText": "z", "filterText": "class", "insertText": "class", "insertTextFormat": 1}, {"label": "classmethod", "kind": 7, "sortText": "z", "filterText": "classmethod", "insertText": "classmethod(${1:f})$0", "insertTextFormat": 2}, {"label": "compile", "kind": 3, "sortText": "z", "filterText": "compile", "insertText": "compile(${1:source}, ${2:filename}, ${3:mode})$0", "insertTextFormat": 2}, {"label": "complex", "kind": 7, "sortText": "z", "filterText": "complex", "insertText": "complex($0)", "insertTextFormat": 2}, {"label": "ConnectionAbortedError", "kind": 7, "sortText": "z", "filterText": "ConnectionAbortedError", "insertText": "ConnectionAbortedError($0)", "insertTextFormat": 2}, {"label": "ConnectionError", "kind": 7, "sortText": "z", "filterText": "ConnectionError", "insertText": "ConnectionError($0)", "insertTextFormat": 2}, {"label": "ConnectionRefusedError", "kind": 7, "sortText": "z", "filterText": "ConnectionRefusedError", "insertText": "ConnectionRefusedError($0)", "insertTextFormat": 2}, {"label": "ConnectionResetError", "kind": 7, "sortText": "z", "filterText": "ConnectionResetError", "insertText": "ConnectionResetError($0)", "insertTextFormat": 2}, {"label": "continue", "kind": 14, "sortText": "z", "filterText": "continue", "insertText": "continue", "insertTextFormat": 1}, {"label": "copyright", "kind": 3, "sortText": "z", "filterText": "copyright", "insertText": "copyright()$0", "insertTextFormat": 2}, {"label": "credits", "kind": 3, "sortText": "z", "filterText": "credits", "insertText": "credits()$0", "insertTextFormat": 2}, {"label": "def", "kind": 14, "sortText": "z", "filterText": "def", "insertText": "def", "insertTextFormat": 1}, {"label": "del", "kind": 14, "sortText": "z", "filterText": "del", "insertText": "del", "insertTextFormat": 1}, {"label": "delattr", "kind": 3, "sortText": "z", "filterText": "delattr", "insertText": "delattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "DeprecationWarning", "kind": 7, "sortText": "z", "filterText": "DeprecationWarning", "insertText": "DeprecationWarning($0)", "insertTextFormat": 2}, {"label": "dict", "kind": 7, "sortText": "z", "filterText": "dict", "insertText": "dict($0)", "insertTextFormat": 2}, {"label": "dir", "kind": 3, "sortText": "z", "filterText": "dir", "insertText": "dir($0)", "insertTextFormat": 2}, {"label": "divmod", "kind": 3, "sortText": "z", "filterText": "divmod", "insertText": "divmod(${1:a}, ${2:b})$0", "insertTextFormat": 2}, {"label": "ellipsis", "kind": 7, "sortText": "z", "filterText": "ellipsis", "insertText": "ellipsis()$0", "insertTextFormat": 2}, {"label": "Ellipsis", "kind": 6, "sortText": "z", "filterText": "Ellipsis", "insertText": "Ellipsis", "insertTextFormat": 1}, {"label": "enumerate", "kind": 7, "sortText": "z", "filterText": "enumerate", "insertText": "enumerate(${1:iterable})$0", "insertTextFormat": 2}, {"label": "EnvironmentError", "kind": 6, "sortText": "z", "filterText": "EnvironmentError", "insertText": "EnvironmentError", "insertTextFormat": 1}, {"label": "EOFError", "kind": 7, "sortText": "z", "filterText": "EOFError", "insertText": "EOFError($0)", "insertTextFormat": 2}, {"label": "eval", "kind": 3, "sortText": "z", "filterText": "eval", "insertText": "eval(${1:source})$0", "insertTextFormat": 2}, {"label": "Exception", "kind": 7, "sortText": "z", "filterText": "Exception", "insertText": "Exception($0)", "insertTextFormat": 2}, {"label": "exec", "kind": 3, "sortText": "z", "filterText": "exec", "insertText": "exec(${1:object})$0", "insertTextFormat": 2}, {"label": "exit", "kind": 3, "sortText": "z", "filterText": "exit", "insertText": "exit($0)", "insertTextFormat": 2}, {"label": "False", "kind": 14, "sortText": "z", "filterText": "False", "insertText": "False", "insertTextFormat": 1}, {"label": "FileExistsError", "kind": 7, "sortText": "z", "filterText": "FileExistsError", "insertText": "FileExistsError($0)", "insertTextFormat": 2}, {"label": "FileNotFoundError", "kind": 7, "sortText": "z", "filterText": "FileNotFoundError", "insertText": "FileNotFoundError($0)", "insertTextFormat": 2}, {"label": "filter", "kind": 3, "sortText": "z", "filterText": "filter", "insertText": "filter(${1:function}, ${2:iterable})$0", "insertTextFormat": 2}, {"label": "FLAC", "kind": 9, "sortText": "z", "filterText": "FLAC", "insertText": "FLAC", "insertTextFormat": 1}, {"label": "float", "kind": 7, "sortText": "z", "filterText": "float", "insertText": "float($0)", "insertTextFormat": 2}, {"label": "FloatingPointError", "kind": 7, "sortText": "z", "filterText": "FloatingPointError", "insertText": "FloatingPointError($0)", "insertTextFormat": 2}, {"label": "for", "kind": 14, "sortText": "z", "filterText": "for", "insertText": "for", "insertTextFormat": 1}, {"label": "format", "kind": 3, "sortText": "z", "filterText": "format", "insertText": "format(${1:o})$0", "insertTextFormat": 2}, {"label": "from", "kind": 14, "sortText": "z", "filterText": "from", "insertText": "from", "insertTextFormat": 1}, {"label": "frozenset", "kind": 7, "sortText": "z", "filterText": "frozenset", "insertText": "frozenset($0)", "insertTextFormat": 2}, {"label": "FutureWarning", "kind": 7, "sortText": "z", "filterText": "FutureWarning", "insertText": "FutureWarning($0)", "insertTextFormat": 2}, {"label": "GeneratorExit", "kind": 7, "sortText": "z", "filterText": "GeneratorExit", "insertText": "GeneratorExit($0)", "insertTextFormat": 2}, {"label": "get_songs", "kind": 3, "sortText": "z", "filterText": "get_songs", "insertText": "get_songs(${1:directory}, ${2:albums})$0", "insertTextFormat": 2}, {"label": "getattr", "kind": 3, "sortText": "z", "filterText": "getattr", "insertText": "getattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "global", "kind": 14, "sortText": "z", "filterText": "global", "insertText": "global", "insertTextFormat": 1}, {"label": "globals", "kind": 3, "sortText": "z", "filterText": "globals", "insertText": "globals()$0", "insertTextFormat": 2}, {"label": "hasattr", "kind": 3, "sortText": "z", "filterText": "hasattr", "insertText": "hasattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "hash", "kind": 3, "sortText": "z", "filterText": "hash", "insertText": "hash(${1:o})$0", "insertTextFormat": 2}, {"label": "help", "kind": 3, "sortText": "z", "filterText": "help", "insertText": "help($0)", "insertTextFormat": 2}, {"label": "hex", "kind": 3, "sortText": "z", "filterText": "hex", "insertText": "hex(${1:i})$0", "insertTextFormat": 2}, {"label": "id", "kind": 3, "sortText": "z", "filterText": "id", "insertText": "id(${1:o})$0", "insertTextFormat": 2}, {"label": "if", "kind": 14, "sortText": "z", "filterText": "if", "insertText": "if", "insertTextFormat": 1}, {"label": "import", "kind": 14, "sortText": "z", "filterText": "import", "insertText": "import", "insertTextFormat": 1}, {"label": "ImportError", "kind": 7, "sortText": "z", "filterText": "ImportError", "insertText": "ImportError($0)", "insertTextFormat": 2}, {"label": "ImportWarning", "kind": 7, "sortText": "z", "filterText": "ImportWarning", "insertText": "ImportWarning($0)", "insertTextFormat": 2}, {"label": "IndentationError", "kind": 7, "sortText": "z", "filterText": "IndentationError", "insertText": "IndentationError($0)", "insertTextFormat": 2}, {"label": "IndexError", "kind": 7, "sortText": "z", "filterText": "IndexError", "insertText": "IndexError($0)", "insertTextFormat": 2}, {"label": "input", "kind": 3, "sortText": "z", "filterText": "input", "insertText": "input($0)", "insertTextFormat": 2}, {"label": "int", "kind": 7, "sortText": "z", "filterText": "int", "insertText": "int($0)", "insertTextFormat": 2}, {"label": "InterruptedError", "kind": 7, "sortText": "z", "filterText": "InterruptedError", "insertText": "InterruptedError($0)", "insertTextFormat": 2}, {"label": "IOError", "kind": 6, "sortText": "z", "filterText": "IOError", "insertText": "IOError", "insertTextFormat": 1}, {"label": "IsADirectoryError", "kind": 7, "sortText": "z", "filterText": "IsADirectoryError", "insertText": "IsADirectoryError($0)", "insertTextFormat": 2}, {"label": "isinstance", "kind": 3, "sortText": "z", "filterText": "isinstance", "insertText": "isinstance(${1:o}, ${2:t})$0", "insertTextFormat": 2}, {"label": "issubclass", "kind": 3, "sortText": "z", "filterText": "issubclass", "insertText": "issubclass(${1:cls}, ${2:classinfo})$0", "insertTextFormat": 2}, {"label": "iter", "kind": 3, "sortText": "z", "filterText": "iter", "insertText": "iter(${1:iterable})$0", "insertTextFormat": 2}, {"label": "KeyboardInterrupt", "kind": 7, "sortText": "z", "filterText": "KeyboardInterrupt", "insertText": "KeyboardInterrupt($0)", "insertTextFormat": 2}, {"label": "KeyError", "kind": 7, "sortText": "z", "filterText": "KeyError", "insertText": "KeyError($0)", "insertTextFormat": 2}, {"label": "lambda", "kind": 14, "sortText": "z", "filterText": "lambda", "insertText": "lambda", "insertTextFormat": 1}, {"label": "len", "kind": 3, "sortText": "z", "filterText": "len", "insertText": "len(${1:o})$0", "insertTextFormat": 2}, {"label": "license", "kind": 3, "sortText": "z", "filterText": "license", "insertText": "license()$0", "insertTextFormat": 2}, {"label": "list", "kind": 7, "sortText": "z", "filterText": "list", "insertText": "list()$0", "insertTextFormat": 2}, {"label": "locals", "kind": 3, "sortText": "z", "filterText": "locals", "insertText": "locals()$0", "insertTextFormat": 2}, {"label": "LookupError", "kind": 7, "sortText": "z", "filterText": "LookupError", "insertText": "LookupError($0)", "insertTextFormat": 2}, {"label": "map", "kind": 3, "sortText": "z", "filterText": "map", "insertText": "map(${1:func}, ${2:iter1})$0", "insertTextFormat": 2}, {"label": "max", "kind": 3, "sortText": "z", "filterText": "max", "insertText": "max(${1:arg1}, ${2:arg2})$0", "insertTextFormat": 2}, {"label": "MemoryError", "kind": 7, "sortText": "z", "filterText": "MemoryError", "insertText": "MemoryError($0)", "insertTextFormat": 2}, {"label": "memoryview", "kind": 7, "sortText": "z", "filterText": "memoryview", "insertText": "memoryview(${1:obj})$0", "insertTextFormat": 2}, {"label": "min", "kind": 3, "sortText": "z", "filterText": "min", "insertText": "min(${1:arg1}, ${2:arg2})$0", "insertTextFormat": 2}, {"label": "ModuleNotFoundError", "kind": 7, "sortText": "z", "filterText": "ModuleNotFoundError", "insertText": "ModuleNotFoundError($0)", "insertTextFormat": 2}, {"label": "NameError", "kind": 7, "sortText": "z", "filterText": "NameError", "insertText": "NameError($0)", "insertTextFormat": 2}, {"label": "next", "kind": 3, "sortText": "z", "filterText": "next", "insertText": "next(${1:i})$0", "insertTextFormat": 2}, {"label": "None", "kind": 14, "sortText": "z", "filterText": "None", "insertText": "None", "insertTextFormat": 1}, {"label": "nonlocal", "kind": 14, "sortText": "z", "filterText": "nonlocal", "insertText": "nonlocal", "insertTextFormat": 1}, {"label": "not", "kind": 14, "sortText": "z", "filterText": "not", "insertText": "not", "insertTextFormat": 1}, {"label": "NotADirectoryError", "kind": 7, "sortText": "z", "filterText": "NotADirectoryError", "insertText": "NotADirectoryError($0)", "insertTextFormat": 2}, {"label": "NotImplemented", "kind": 6, "sortText": "z", "filterText": "NotImplemented", "insertText": "NotImplemented", "insertTextFormat": 1}, {"label": "NotImplementedError", "kind": 7, "sortText": "z", "filterText": "NotImplementedError", "insertText": "NotImplementedError($0)", "insertTextFormat": 2}, {"label": "object", "kind": 7, "sortText": "z", "filterText": "object", "insertText": "object()$0", "insertTextFormat": 2}, {"label": "oct", "kind": 3, "sortText": "z", "filterText": "oct", "insertText": "oct(${1:i})$0", "insertTextFormat": 2}, {"label": "open", "kind": 3, "sortText": "z", "filterText": "open", "insertText": "open(${1:file})$0", "insertTextFormat": 2}, {"label": "ord", "kind": 3, "sortText": "z", "filterText": "ord", "insertText": "ord(${1:c})$0", "insertTextFormat": 2}, {"label": "os", "kind": 9, "sortText": "z", "filterText": "os", "insertText": "os", "insertTextFormat": 1}, {"label": "OSError", "kind": 7, "sortText": "z", "filterText": "OSError", "insertText": "OSError($0)", "insertTextFormat": 2}, {"label": "OverflowError", "kind": 7, "sortText": "z", "filterText": "OverflowError", "insertText": "OverflowError($0)", "insertTextFormat": 2}, {"label": "pass", "kind": 14, "sortText": "z", "filterText": "pass", "insertText": "pass", "insertTextFormat": 1}, {"label": "PendingDeprecationWarning", "kind": 7, "sortText": "z", "filterText": "PendingDeprecationWarning", "insertText": "PendingDeprecationWarning($0)", "insertTextFormat": 2}, {"label": "PermissionError", "kind": 7, "sortText": "z", "filterText": "PermissionError", "insertText": "PermissionError($0)", "insertTextFormat": 2}, {"label": "pow", "kind": 3, "sortText": "z", "filterText": "pow", "insertText": "pow(${1:x}, ${2:y})$0", "insertTextFormat": 2}, {"label": "print", "kind": 3, "sortText": "z", "filterText": "print", "insertText": "print($0)", "insertTextFormat": 2}, {"label": "ProcessLookupError", "kind": 7, "sortText": "z", "filterText": "ProcessLookupError", "insertText": "ProcessLookupError($0)", "insertTextFormat": 2}, {"label": "property", "kind": 7, "sortText": "z", "filterText": "property", "insertText": "property($0)", "insertTextFormat": 2}, {"label": "quit", "kind": 3, "sortText": "z", "filterText": "quit", "insertText": "quit($0)", "insertTextFormat": 2}, {"label": "raise", "kind": 14, "sortText": "z", "filterText": "raise", "insertText": "raise", "insertTextFormat": 1}, {"label": "range", "kind": 7, "sortText": "z", "filterText": "range", "insertText": "range(${1:stop})$0", "insertTextFormat": 2}, {"label": "read_metadata", "kind": 3, "sortText": "z", "filterText": "read_metadata", "insertText": "read_metadata(${1:flac_filename})$0", "insertTextFormat": 2}, {"label": "RecursionError", "kind": 7, "sortText": "z", "filterText": "RecursionError", "insertText": "RecursionError($0)", "insertTextFormat": 2}, {"label": "ReferenceError", "kind": 7, "sortText": "z", "filterText": "ReferenceError", "insertText": "ReferenceError($0)", "insertTextFormat": 2}, {"label": "repr", "kind": 3, "sortText": "z", "filterText": "repr", "insertText": "repr(${1:o})$0", "insertTextFormat": 2}, {"label": "ResourceWarning", "kind": 7, "sortText": "z", "filterText": "ResourceWarning", "insertText": "ResourceWarning($0)", "insertTextFormat": 2}, {"label": "return", "kind": 14, "sortText": "z", "filterText": "return", "insertText": "return", "insertTextFormat": 1}, {"label": "reversed", "kind": 3, "sortText": "z", "filterText": "reversed", "insertText": "reversed(${1:object})$0", "insertTextFormat": 2}, {"label": "round", "kind": 3, "sortText": "z", "filterText": "round", "insertText": "round(${1:number})$0", "insertTextFormat": 2}, {"label": "RuntimeError", "kind": 7, "sortText": "z", "filterText": "RuntimeError", "insertText": "RuntimeError($0)", "insertTextFormat": 2}, {"label": "RuntimeWarning", "kind": 7, "sortText": "z", "filterText": "RuntimeWarning", "insertText": "RuntimeWarning($0)", "insertTextFormat": 2}, {"label": "set", "kind": 7, "sortText": "z", "filterText": "set", "insertText": "set($0)", "insertTextFormat": 2}, {"label": "setattr", "kind": 3, "sortText": "z", "filterText": "setattr", "insertText": "setattr(${1:object}, ${2:name}, ${3:value})$0", "insertTextFormat": 2}, {"label": "slice", "kind": 7, "sortText": "z", "filterText": "slice", "insertText": "slice(${1:stop})$0", "insertTextFormat": 2}, {"label": "sorted", "kind": 3, "sortText": "z", "filterText": "sorted", "insertText": "sorted(${1:iterable})$0", "insertTextFormat": 2}, {"label": "staticmethod", "kind": 7, "sortText": "z", "filterText": "staticmethod", "insertText": "staticmethod(${1:f})$0", "insertTextFormat": 2}, {"label": "StopAsyncIteration", "kind": 7, "sortText": "z", "filterText": "StopAsyncIteration", "insertText": "StopAsyncIteration($0)", "insertTextFormat": 2}, {"label": "StopIteration", "kind": 7, "sortText": "z", "filterText": "StopIteration", "insertText": "StopIteration($0)", "insertTextFormat": 2}, {"label": "str", "kind": 7, "sortText": "z", "filterText": "str", "insertText": "str($0)", "insertTextFormat": 2}, {"label": "sum", "kind": 3, "sortText": "z", "filterText": "sum", "insertText": "sum(${1:iterable})$0", "insertTextFormat": 2}, {"label": "super", "kind": 7, "sortText": "z", "filterText": "super", "insertText": "super(${1:t}, ${2:obj})$0", "insertTextFormat": 2}, {"label": "SyntaxError", "kind": 7, "sortText": "z", "filterText": "SyntaxError", "insertText": "SyntaxError($0)", "insertTextFormat": 2}, {"label": "SyntaxWarning", "kind": 7, "sortText": "z", "filterText": "SyntaxWarning", "insertText": "SyntaxWarning($0)", "insertTextFormat": 2}, {"label": "SystemError", "kind": 7, "sortText": "z", "filterText": "SystemError", "insertText": "SystemError($0)", "insertTextFormat": 2}, {"label": "SystemExit", "kind": 7, "sortText": "z", "filterText": "SystemExit", "insertText": "SystemExit($0)", "insertTextFormat": 2}, {"label": "TabError", "kind": 7, "sortText": "z", "filterText": "TabError", "insertText": "TabError($0)", "insertTextFormat": 2}, {"label": "TimeoutError", "kind": 7, "sortText": "z", "filterText": "TimeoutError", "insertText": "TimeoutError($0)", "insertTextFormat": 2}, {"label": "True", "kind": 14, "sortText": "z", "filterText": "True", "insertText": "True", "insertTextFormat": 1}, {"label": "try", "kind": 14, "sortText": "z", "filterText": "try", "insertText": "try", "insertTextFormat": 1}, {"label": "tuple", "kind": 7, "sortText": "z", "filterText": "tuple", "insertText": "tuple($0)", "insertTextFormat": 2}, {"label": "type", "kind": 7, "sortText": "z", "filterText": "type", "insertText": "type(${1:o})$0", "insertTextFormat": 2}, {"label": "TypeError", "kind": 7, "sortText": "z", "filterText": "TypeError", "insertText": "TypeError($0)", "insertTextFormat": 2}, {"label": "UnboundLocalError", "kind": 7, "sortText": "z", "filterText": "UnboundLocalError", "insertText": "UnboundLocalError($0)", "insertTextFormat": 2}, {"label": "UnicodeDecodeError", "kind": 7, "sortText": "z", "filterText": "UnicodeDecodeError", "insertText": "UnicodeDecodeError(${1:encoding}, ${2:object}, ${3:start}, ${4:end}, ${5:reason})$0", "insertTextFormat": 2}, {"label": "UnicodeEncodeError", "kind": 7, "sortText": "z", "filterText": "UnicodeEncodeError", "insertText": "UnicodeEncodeError(${1:encoding}, ${2:object}, ${3:start}, ${4:end}, ${5:reason})$0", "insertTextFormat": 2}, {"label": "UnicodeError", "kind": 7, "sortText": "z", "filterText": "UnicodeError", "insertText": "UnicodeError($0)", "insertTextFormat": 2}, {"label": "UnicodeTranslateError", "kind": 7, "sortText": "z", "filterText": "UnicodeTranslateError", "insertText": "UnicodeTranslateError($0)", "insertTextFormat": 2}, {"label": "UnicodeWarning", "kind": 7, "sortText": "z", "filterText": "UnicodeWarning", "insertText": "UnicodeWarning($0)", "insertTextFormat": 2}, {"label": "UserWarning", "kind": 7, "sortText": "z", "filterText": "UserWarning", "insertText": "UserWarning($0)", "insertTextFormat": 2}, {"label": "ValueError", "kind": 7, "sortText": "z", "filterText": "ValueError", "insertText": "ValueError($0)", "insertTextFormat": 2}, {"label": "vars", "kind": 3, "sortText": "z", "filterText": "vars", "insertText": "vars($0)", "insertTextFormat": 2}, {"label": "Warning", "kind": 7, "sortText": "z", "filterText": "Warning", "insertText": "Warning($0)", "insertTextFormat": 2}, {"label": "while", "kind": 14, "sortText": "z", "filterText": "while", "insertText": "while", "insertTextFormat": 1}, {"label": "WindowsError", "kind": 7, "sortText": "z", "filterText": "WindowsError", "insertText": "WindowsError($0)", "insertTextFormat": 2}, {"label": "with", "kind": 14, "sortText": "z", "filterText": "with", "insertText": "with", "insertTextFormat": 1}, {"label": "yield", "kind": 14, "sortText": "z", "filterText": "yield", "insertText": "yield", "insertTextFormat": 1}, {"label": "ZeroDivisionError", "kind": 7, "sortText": "z", "filterText": "ZeroDivisionError", "insertText": "ZeroDivisionError($0)", "insertTextFormat": 2}, {"label": "zip", "kind": 3, "sortText": "z", "filterText": "zip", "insertText": "zip(${1:iter1})$0", "insertTextFormat": 2}, {"label": "__doc__", "kind": 6, "sortText": "z", "filterText": "__doc__", "insertText": "__doc__", "insertTextFormat": 1}, {"label": "__file__", "kind": 6, "sortText": "z", "filterText": "__file__", "insertText": "__file__", "insertTextFormat": 1}, {"label": "__import__", "kind": 3, "sortText": "z", "filterText": "__import__", "insertText": "__import__(${1:name})$0", "insertTextFormat": 2}, {"label": "__name__", "kind": 6, "sortText": "z", "filterText": "__name__", "insertText": "__name__", "insertTextFormat": 1}, {"label": "__package__", "kind": 6, "sortText": "z", "filterText": "__package__", "insertText": "__package__", "insertTextFormat": 1}, {"label": "__test__", "kind": 3, "sortText": "z", "filterText": "__test__", "insertText": "__test__()$0", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 642, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 643, "result": {"label": "KeyError", "kind": 7, "detail": "class KeyError", "documentation": {"kind": "markdown", "value": "```text\nKeyError(*args: object)\n\nMapping key not found.\n```"}, "sortText": "z", "filterText": "KeyError", "insertText": "KeyError($0)", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 644, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 645, "result": [{"range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 4}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 646, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 647, "result": {"isIncomplete": false, "items": [{"label": "TabError", "kind": 7, "sortText": "z", "filterText": "TabError", "insertText": "TabError($0)", "insertTextFormat": 2}, {"label": "TimeoutError", "kind": 7, "sortText": "z", "filterText": "TimeoutError", "insertText": "TimeoutError($0)", "insertTextFormat": 2}, {"label": "True", "kind": 14, "sortText": "z", "filterText": "True", "insertText": "True", "insertTextFormat": 1}, {"label": "try", "kind": 14, "sortText": "z", "filterText": "try", "insertText": "try", "insertTextFormat": 1}, {"label": "tuple", "kind": 7, "sortText": "z", "filterText": "tuple", "insertText": "tuple($0)", "insertTextFormat": 2}, {"label": "type", "kind": 7, "sortText": "z", "filterText": "type", "insertText": "type(${1:o})$0", "insertTextFormat": 2}, {"label": "TypeError", "kind": 7, "sortText": "z", "filterText": "TypeError", "insertText": "TypeError($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 648, "result": {"label": "TabError", "kind": 7, "detail": "class TabError", "documentation": {"kind": "markdown", "value": "```text\nTabError(*args: object)\n\nImproper mixture of spaces and tabs.\n```"}, "sortText": "z", "filterText": "TabError", "insertText": "TabError($0)", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 649, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 650, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 651, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 652, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 653, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 654, "result": {"isIncomplete": false, "items": [{"label": "TabError", "kind": 7, "sortText": "z", "filterText": "TabError", "insertText": "TabError($0)", "insertTextFormat": 2}, {"label": "TimeoutError", "kind": 7, "sortText": "z", "filterText": "TimeoutError", "insertText": "TimeoutError($0)", "insertTextFormat": 2}, {"label": "True", "kind": 14, "sortText": "z", "filterText": "True", "insertText": "True", "insertTextFormat": 1}, {"label": "try", "kind": 14, "sortText": "z", "filterText": "try", "insertText": "try", "insertTextFormat": 1}, {"label": "tuple", "kind": 7, "sortText": "z", "filterText": "tuple", "insertText": "tuple($0)", "insertTextFormat": 2}, {"label": "type", "kind": 7, "sortText": "z", "filterText": "type", "insertText": "type(${1:o})$0", "insertTextFormat": 2}, {"label": "TypeError", "kind": 7, "sortText": "z", "filterText": "TypeError", "insertText": "TypeError($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 655, "result": {"isIncomplete": false, "items": [{"label": "False", "kind": 14, "sortText": "z", "filterText": "False", "insertText": "False", "insertTextFormat": 1}, {"label": "FileExistsError", "kind": 7, "sortText": "z", "filterText": "FileExistsError", "insertText": "FileExistsError($0)", "insertTextFormat": 2}, {"label": "FileNotFoundError", "kind": 7, "sortText": "z", "filterText": "FileNotFoundError", "insertText": "FileNotFoundError($0)", "insertTextFormat": 2}, {"label": "filter", "kind": 3, "sortText": "z", "filterText": "filter", "insertText": "filter(${1:function}, ${2:iterable})$0", "insertTextFormat": 2}, {"label": "FLAC", "kind": 9, "sortText": "z", "filterText": "FLAC", "insertText": "FLAC", "insertTextFormat": 1}, {"label": "float", "kind": 7, "sortText": "z", "filterText": "float", "insertText": "float($0)", "insertTextFormat": 2}, {"label": "FloatingPointError", "kind": 7, "sortText": "z", "filterText": "FloatingPointError", "insertText": "FloatingPointError($0)", "insertTextFormat": 2}, {"label": "for", "kind": 14, "sortText": "z", "filterText": "for", "insertText": "for", "insertTextFormat": 1}, {"label": "format", "kind": 3, "sortText": "z", "filterText": "format", "insertText": "format(${1:o})$0", "insertTextFormat": 2}, {"label": "from", "kind": 14, "sortText": "z", "filterText": "from", "insertText": "from", "insertTextFormat": 1}, {"label": "frozenset", "kind": 7, "sortText": "z", "filterText": "frozenset", "insertText": "frozenset($0)", "insertTextFormat": 2}, {"label": "FutureWarning", "kind": 7, "sortText": "z", "filterText": "FutureWarning", "insertText": "FutureWarning($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 656, "result": {"label": "FLAC", "kind": 9, "detail": "module FLAC", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "FLAC", "insertText": "FLAC", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 657, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 658, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 659, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 660, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 661, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 662, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 663, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 664, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 665, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 666, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 667, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 668, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 669, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 670, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 671, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 672, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 673, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 674, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 3, "character": 10}, "end": {"line": 4, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 3, "character": 11}, "end": {"line": 4, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 675, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 676, "result": {"isIncomplete": false, "items": [{"label": "object", "kind": 7, "sortText": "z", "filterText": "object", "insertText": "object()$0", "insertTextFormat": 2}, {"label": "oct", "kind": 3, "sortText": "z", "filterText": "oct", "insertText": "oct(${1:i})$0", "insertTextFormat": 2}, {"label": "open", "kind": 3, "sortText": "z", "filterText": "open", "insertText": "open(${1:file})$0", "insertTextFormat": 2}, {"label": "ord", "kind": 3, "sortText": "z", "filterText": "ord", "insertText": "ord(${1:c})$0", "insertTextFormat": 2}, {"label": "os", "kind": 9, "sortText": "z", "filterText": "os", "insertText": "os", "insertTextFormat": 1}, {"label": "OSError", "kind": 7, "sortText": "z", "filterText": "OSError", "insertText": "OSError($0)", "insertTextFormat": 2}, {"label": "OverflowError", "kind": 7, "sortText": "z", "filterText": "OverflowError", "insertText": "OverflowError($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 677, "result": {"label": "object", "kind": 7, "detail": "class object", "documentation": {"kind": "markdown", "value": "```text\nobject()\n\nThe base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.\n```"}, "sortText": "z", "filterText": "object", "insertText": "object()$0", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 678, "result": {"label": "os", "kind": 9, "detail": "module os", "documentation": {"kind": "markdown", "value": "```text\nOS routines for NT or Posix depending on what system we're on.\n\nThis exports:\n  - all functions from posix or nt, e.g. unlink, stat, etc.\n  - os.path is either posixpath or ntpath\n  - os.name is either 'posix' or 'nt'\n  - os.curdir is a string representing the current directory (always '.')\n  - os.pardir is a string representing the parent directory (always '..')\n  - os.sep is the (or a most common) pathname separator ('/' or '\\\\')\n  - os.extsep is the extension separator (always '.')\n  - os.altsep is the alternate pathname separator (None or '/')\n  - os.pathsep is the component separator used in $PATH etc\n  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')\n  - os.defpath is the default search path for executables\n  - os.devnull is the file path of the null device ('/dev/null', etc.)\n\nPrograms that import and use 'os' stand a better chance of being\nportable between different platforms.  Of course, they must then\nonly use functions that are defined by all platforms (e.g., unlink\nand opendir), and leave all pathname manipulation to os.path\n(e.g., split and join).\n```"}, "sortText": "z", "filterText": "os", "insertText": "os", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 679, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 680, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 13}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 3, "character": 14}, "end": {"line": 4, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 681, "result": {"isIncomplete": false, "items": [{"label": "abc", "kind": 9, "sortText": "z", "filterText": "abc", "insertText": "abc", "insertTextFormat": 1}, {"label": "abort", "kind": 3, "sortText": "z", "filterText": "abort", "insertText": "abort()$0", "insertTextFormat": 2}, {"label": "access", "kind": 3, "sortText": "z", "filterText": "access", "insertText": "access(${1:path}, ${2:mode})$0", "insertTextFormat": 2}, {"label": "add_dll_directory", "kind": 3, "sortText": "z", "filterText": "add_dll_directory", "insertText": "add_dll_directory(${1:path})$0", "insertTextFormat": 2}, {"label": "altsep", "kind": 6, "sortText": "z", "filterText": "altsep", "insertText": "altsep", "insertTextFormat": 1}, {"label": "chdir", "kind": 3, "sortText": "z", "filterText": "chdir", "insertText": "chdir(${1:path})$0", "insertTextFormat": 2}, {"label": "chflags", "kind": 3, "sortText": "z", "filterText": "chflags", "insertText": "chflags(${1:path}, ${2:flags})$0", "insertTextFormat": 2}, {"label": "chmod", "kind": 3, "sortText": "z", "filterText": "chmod", "insertText": "chmod(${1:path}, ${2:mode})$0", "insertTextFormat": 2}, {"label": "chown", "kind": 3, "sortText": "z", "filterText": "chown", "insertText": "chown(${1:path}, ${2:uid}, ${3:gid})$0", "insertTextFormat": 2}, {"label": "chroot", "kind": 3, "sortText": "z", "filterText": "chroot", "insertText": "chroot(${1:path})$0", "insertTextFormat": 2}, {"label": "CLD_CONTINUED", "kind": 6, "sortText": "z", "filterText": "CLD_CONTINUED", "insertText": "CLD_CONTINUED", "insertTextFormat": 1}, {"label": "CLD_DUMPED", "kind": 6, "sortText": "z", "filterText": "CLD_DUMPED", "insertText": "CLD_DUMPED", "insertTextFormat": 1}, {"label": "CLD_EXITED", "kind": 6, "sortText": "z", "filterText": "CLD_EXITED", "insertText": "CLD_EXITED", "insertTextFormat": 1}, {"label": "CLD_TRAPPED", "kind": 6, "sortText": "z", "filterText": "CLD_TRAPPED", "insertText": "CLD_TRAPPED", "insertTextFormat": 1}, {"label": "close", "kind": 3, "sortText": "z", "filterText": "close", "insertText": "close(${1:fd})$0", "insertTextFormat": 2}, {"label": "closerange", "kind": 3, "sortText": "z", "filterText": "closerange", "insertText": "closerange(${1:fd_low}, ${2:fd_high})$0", "insertTextFormat": 2}, {"label": "confstr", "kind": 3, "sortText": "z", "filterText": "confstr", "insertText": "confstr(${1:name})$0", "insertTextFormat": 2}, {"label": "confstr_names", "kind": 6, "sortText": "z", "filterText": "confstr_names", "insertText": "confstr_names", "insertTextFormat": 1}, {"label": "cpu_count", "kind": 3, "sortText": "z", "filterText": "cpu_count", "insertText": "cpu_count()$0", "insertTextFormat": 2}, {"label": "ctermid", "kind": 3, "sortText": "z", "filterText": "ctermid", "insertText": "ctermid()$0", "insertTextFormat": 2}, {"label": "curdir", "kind": 6, "sortText": "z", "filterText": "curdir", "insertText": "curdir", "insertTextFormat": 1}, {"label": "defpath", "kind": 6, "sortText": "z", "filterText": "defpath", "insertText": "defpath", "insertTextFormat": 1}, {"label": "device_encoding", "kind": 3, "sortText": "z", "filterText": "device_encoding", "insertText": "device_encoding(${1:fd})$0", "insertTextFormat": 2}, {"label": "devnull", "kind": 6, "sortText": "z", "filterText": "devnull", "insertText": "devnull", "insertTextFormat": 1}, {"label": "DirEntry", "kind": 7, "sortText": "z", "filterText": "DirEntry", "insertText": "DirEntry", "insertTextFormat": 1}, {"label": "dup", "kind": 3, "sortText": "z", "filterText": "dup", "insertText": "dup(${1:fd})$0", "insertTextFormat": 2}, {"label": "dup2", "kind": 3, "sortText": "z", "filterText": "dup2", "insertText": "dup2(${1:fd}, ${2:fd2})$0", "insertTextFormat": 2}, {"label": "environ", "kind": 6, "sortText": "z", "filterText": "environ", "insertText": "environ", "insertTextFormat": 1}, {"label": "environb", "kind": 6, "sortText": "z", "filterText": "environb", "insertText": "environb", "insertTextFormat": 1}, {"label": "error", "kind": 7, "sortText": "z", "filterText": "error", "insertText": "error($0)", "insertTextFormat": 2}, {"label": "EX_CANTCREAT", "kind": 6, "sortText": "z", "filterText": "EX_CANTCREAT", "insertText": "EX_CANTCREAT", "insertTextFormat": 1}, {"label": "EX_CONFIG", "kind": 6, "sortText": "z", "filterText": "EX_CONFIG", "insertText": "EX_CONFIG", "insertTextFormat": 1}, {"label": "EX_DATAERR", "kind": 6, "sortText": "z", "filterText": "EX_DATAERR", "insertText": "EX_DATAERR", "insertTextFormat": 1}, {"label": "EX_IOERR", "kind": 6, "sortText": "z", "filterText": "EX_IOERR", "insertText": "EX_IOERR", "insertTextFormat": 1}, {"label": "EX_NOHOST", "kind": 6, "sortText": "z", "filterText": "EX_NOHOST", "insertText": "EX_NOHOST", "insertTextFormat": 1}, {"label": "EX_NOINPUT", "kind": 6, "sortText": "z", "filterText": "EX_NOINPUT", "insertText": "EX_NOINPUT", "insertTextFormat": 1}, {"label": "EX_NOPERM", "kind": 6, "sortText": "z", "filterText": "EX_NOPERM", "insertText": "EX_NOPERM", "insertTextFormat": 1}, {"label": "EX_NOTFOUND", "kind": 6, "sortText": "z", "filterText": "EX_NOTFOUND", "insertText": "EX_NOTFOUND", "insertTextFormat": 1}, {"label": "EX_NOUSER", "kind": 6, "sortText": "z", "filterText": "EX_NOUSER", "insertText": "EX_NOUSER", "insertTextFormat": 1}, {"label": "EX_OK", "kind": 6, "sortText": "z", "filterText": "EX_OK", "insertText": "EX_OK", "insertTextFormat": 1}, {"label": "EX_OSERR", "kind": 6, "sortText": "z", "filterText": "EX_OSERR", "insertText": "EX_OSERR", "insertTextFormat": 1}, {"label": "EX_OSFILE", "kind": 6, "sortText": "z", "filterText": "EX_OSFILE", "insertText": "EX_OSFILE", "insertTextFormat": 1}, {"label": "EX_PROTOCOL", "kind": 6, "sortText": "z", "filterText": "EX_PROTOCOL", "insertText": "EX_PROTOCOL", "insertTextFormat": 1}, {"label": "EX_SOFTWARE", "kind": 6, "sortText": "z", "filterText": "EX_SOFTWARE", "insertText": "EX_SOFTWARE", "insertTextFormat": 1}, {"label": "EX_TEMPFAIL", "kind": 6, "sortText": "z", "filterText": "EX_TEMPFAIL", "insertText": "EX_TEMPFAIL", "insertTextFormat": 1}, {"label": "EX_UNAVAILABLE", "kind": 6, "sortText": "z", "filterText": "EX_UNAVAILABLE", "insertText": "EX_UNAVAILABLE", "insertTextFormat": 1}, {"label": "EX_USAGE", "kind": 6, "sortText": "z", "filterText": "EX_USAGE", "insertText": "EX_USAGE", "insertTextFormat": 1}, {"label": "execl", "kind": 3, "sortText": "z", "filterText": "execl", "insertText": "execl(${1:file}, ${2:arg0})$0", "insertTextFormat": 2}, {"label": "execle", "kind": 3, "sortText": "z", "filterText": "execle", "insertText": "execle(${1:file}, ${2:arg0})$0", "insertTextFormat": 2}, {"label": "execlp", "kind": 3, "sortText": "z", "filterText": "execlp", "insertText": "execlp(${1:file}, ${2:arg0})$0", "insertTextFormat": 2}, {"label": "execlpe", "kind": 3, "sortText": "z", "filterText": "execlpe", "insertText": "execlpe(${1:file}, ${2:arg0})$0", "insertTextFormat": 2}, {"label": "execv", "kind": 3, "sortText": "z", "filterText": "execv", "insertText": "execv(${1:path}, ${2:args})$0", "insertTextFormat": 2}, {"label": "execve", "kind": 3, "sortText": "z", "filterText": "execve", "insertText": "execve(${1:path}, ${2:args}, ${3:env})$0", "insertTextFormat": 2}, {"label": "execvp", "kind": 3, "sortText": "z", "filterText": "execvp", "insertText": "execvp(${1:file}, ${2:args})$0", "insertTextFormat": 2}, {"label": "execvpe", "kind": 3, "sortText": "z", "filterText": "execvpe", "insertText": "execvpe(${1:file}, ${2:args}, ${3:env})$0", "insertTextFormat": 2}, {"label": "extsep", "kind": 6, "sortText": "z", "filterText": "extsep", "insertText": "extsep", "insertTextFormat": 1}, {"label": "F_LOCK", "kind": 6, "sortText": "z", "filterText": "F_LOCK", "insertText": "F_LOCK", "insertTextFormat": 1}, {"label": "F_OK", "kind": 6, "sortText": "z", "filterText": "F_OK", "insertText": "F_OK", "insertTextFormat": 1}, {"label": "F_TEST", "kind": 6, "sortText": "z", "filterText": "F_TEST", "insertText": "F_TEST", "insertTextFormat": 1}, {"label": "F_TLOCK", "kind": 6, "sortText": "z", "filterText": "F_TLOCK", "insertText": "F_TLOCK", "insertTextFormat": 1}, {"label": "F_ULOCK", "kind": 6, "sortText": "z", "filterText": "F_ULOCK", "insertText": "F_ULOCK", "insertTextFormat": 1}, {"label": "fchdir", "kind": 3, "sortText": "z", "filterText": "fchdir", "insertText": "fchdir(${1:fd})$0", "insertTextFormat": 2}, {"label": "fchmod", "kind": 3, "sortText": "z", "filterText": "fchmod", "insertText": "fchmod(${1:fd}, ${2:mode})$0", "insertTextFormat": 2}, {"label": "fchown", "kind": 3, "sortText": "z", "filterText": "fchown", "insertText": "fchown(${1:fd}, ${2:uid}, ${3:gid})$0", "insertTextFormat": 2}, {"label": "fdatasync", "kind": 3, "sortText": "z", "filterText": "fdatasync", "insertText": "fdatasync(${1:fd})$0", "insertTextFormat": 2}, {"label": "fdopen", "kind": 3, "sortText": "z", "filterText": "fdopen", "insertText": "fdopen(${1:fd})$0", "insertTextFormat": 2}, {"label": "fork", "kind": 3, "sortText": "z", "filterText": "fork", "insertText": "fork()$0", "insertTextFormat": 2}, {"label": "forkpty", "kind": 3, "sortText": "z", "filterText": "forkpty", "insertText": "forkpty()$0", "insertTextFormat": 2}, {"label": "fpathconf", "kind": 3, "sortText": "z", "filterText": "fpathconf", "insertText": "fpathconf(${1:fd}, ${2:name})$0", "insertTextFormat": 2}, {"label": "fsdecode", "kind": 3, "sortText": "z", "filterText": "fsdecode", "insertText": "fsdecode(${1:filename})$0", "insertTextFormat": 2}, {"label": "fsencode", "kind": 3, "sortText": "z", "filterText": "fsencode", "insertText": "fsencode(${1:filename})$0", "insertTextFormat": 2}, {"label": "fspath", "kind": 3, "sortText": "z", "filterText": "fspath", "insertText": "fspath(${1:path})$0", "insertTextFormat": 2}, {"label": "fstat", "kind": 3, "sortText": "z", "filterText": "fstat", "insertText": "fstat(${1:fd})$0", "insertTextFormat": 2}, {"label": "fstatvfs", "kind": 3, "sortText": "z", "filterText": "fstatvfs", "insertText": "fstatvfs(${1:fd})$0", "insertTextFormat": 2}, {"label": "fsync", "kind": 3, "sortText": "z", "filterText": "fsync", "insertText": "fsync(${1:fd})$0", "insertTextFormat": 2}, {"label": "ftruncate", "kind": 3, "sortText": "z", "filterText": "ftruncate", "insertText": "ftruncate(${1:fd}, ${2:length})$0", "insertTextFormat": 2}, {"label": "fwalk", "kind": 3, "sortText": "z", "filterText": "fwalk", "insertText": "fwalk($0)", "insertTextFormat": 2}, {"label": "GenericAlias", "kind": 6, "sortText": "z", "filterText": "GenericAlias", "insertText": "GenericAlias", "insertTextFormat": 1}, {"label": "get_blocking", "kind": 3, "sortText": "z", "filterText": "get_blocking", "insertText": "get_blocking(${1:fd})$0", "insertTextFormat": 2}, {"label": "get_exec_path", "kind": 3, "sortText": "z", "filterText": "get_exec_path", "insertText": "get_exec_path($0)", "insertTextFormat": 2}, {"label": "get_inheritable", "kind": 3, "sortText": "z", "filterText": "get_inheritable", "insertText": "get_inheritable(${1:fd})$0", "insertTextFormat": 2}, {"label": "get_terminal_size", "kind": 3, "sortText": "z", "filterText": "get_terminal_size", "insertText": "get_terminal_size($0)", "insertTextFormat": 2}, {"label": "getcwd", "kind": 3, "sortText": "z", "filterText": "getcwd", "insertText": "getcwd()$0", "insertTextFormat": 2}, {"label": "getcwdb", "kind": 3, "sortText": "z", "filterText": "getcwdb", "insertText": "getcwdb()$0", "insertTextFormat": 2}, {"label": "getegid", "kind": 3, "sortText": "z", "filterText": "getegid", "insertText": "getegid()$0", "insertTextFormat": 2}, {"label": "getenv", "kind": 3, "sortText": "z", "filterText": "getenv", "insertText": "getenv(${1:key})$0", "insertTextFormat": 2}, {"label": "getenvb", "kind": 3, "sortText": "z", "filterText": "getenvb", "insertText": "getenvb(${1:key})$0", "insertTextFormat": 2}, {"label": "geteuid", "kind": 3, "sortText": "z", "filterText": "geteuid", "insertText": "geteuid()$0", "insertTextFormat": 2}, {"label": "getgid", "kind": 3, "sortText": "z", "filterText": "getgid", "insertText": "getgid()$0", "insertTextFormat": 2}, {"label": "getgrouplist", "kind": 3, "sortText": "z", "filterText": "getgrouplist", "insertText": "getgrouplist(${1:user}, ${2:gid})$0", "insertTextFormat": 2}, {"label": "getgroups", "kind": 3, "sortText": "z", "filterText": "getgroups", "insertText": "getgroups()$0", "insertTextFormat": 2}, {"label": "getloadavg", "kind": 3, "sortText": "z", "filterText": "getloadavg", "insertText": "getloadavg()$0", "insertTextFormat": 2}, {"label": "getlogin", "kind": 3, "sortText": "z", "filterText": "getlogin", "insertText": "getlogin()$0", "insertTextFormat": 2}, {"label": "getpgid", "kind": 3, "sortText": "z", "filterText": "getpgid", "insertText": "getpgid(${1:pid})$0", "insertTextFormat": 2}, {"label": "getpgrp", "kind": 3, "sortText": "z", "filterText": "getpgrp", "insertText": "getpgrp()$0", "insertTextFormat": 2}, {"label": "getpid", "kind": 3, "sortText": "z", "filterText": "getpid", "insertText": "getpid()$0", "insertTextFormat": 2}, {"label": "getppid", "kind": 3, "sortText": "z", "filterText": "getppid", "insertText": "getppid()$0", "insertTextFormat": 2}, {"label": "getpriority", "kind": 3, "sortText": "z", "filterText": "getpriority", "insertText": "getpriority(${1:which}, ${2:who})$0", "insertTextFormat": 2}, {"label": "getrandom", "kind": 3, "sortText": "z", "filterText": "getrandom", "insertText": "getrandom(${1:size})$0", "insertTextFormat": 2}, {"label": "getresgid", "kind": 3, "sortText": "z", "filterText": "getresgid", "insertText": "getresgid()$0", "insertTextFormat": 2}, {"label": "getresuid", "kind": 3, "sortText": "z", "filterText": "getresuid", "insertText": "getresuid()$0", "insertTextFormat": 2}, {"label": "getsid", "kind": 3, "sortText": "z", "filterText": "getsid", "insertText": "getsid(${1:pid})$0", "insertTextFormat": 2}, {"label": "getuid", "kind": 3, "sortText": "z", "filterText": "getuid", "insertText": "getuid()$0", "insertTextFormat": 2}, {"label": "getxattr", "kind": 3, "sortText": "z", "filterText": "getxattr", "insertText": "getxattr(${1:path}, ${2:attribute})$0", "insertTextFormat": 2}, {"label": "GRND_NONBLOCK", "kind": 6, "sortText": "z", "filterText": "GRND_NONBLOCK", "insertText": "GRND_NONBLOCK", "insertTextFormat": 1}, {"label": "GRND_RANDOM", "kind": 6, "sortText": "z", "filterText": "GRND_RANDOM", "insertText": "GRND_RANDOM", "insertTextFormat": 1}, {"label": "initgroups", "kind": 3, "sortText": "z", "filterText": "initgroups", "insertText": "initgroups(${1:username}, ${2:gid})$0", "insertTextFormat": 2}, {"label": "isatty", "kind": 3, "sortText": "z", "filterText": "isatty", "insertText": "isatty(${1:fd})$0", "insertTextFormat": 2}, {"label": "kill", "kind": 3, "sortText": "z", "filterText": "kill", "insertText": "kill(${1:pid}, ${2:sig})$0", "insertTextFormat": 2}, {"label": "killpg", "kind": 3, "sortText": "z", "filterText": "killpg", "insertText": "killpg(${1:pgid}, ${2:sig})$0", "insertTextFormat": 2}, {"label": "lchflags", "kind": 3, "sortText": "z", "filterText": "lchflags", "insertText": "lchflags(${1:path}, ${2:flags})$0", "insertTextFormat": 2}, {"label": "lchmod", "kind": 3, "sortText": "z", "filterText": "lchmod", "insertText": "lchmod(${1:path}, ${2:mode})$0", "insertTextFormat": 2}, {"label": "lchown", "kind": 3, "sortText": "z", "filterText": "lchown", "insertText": "lchown(${1:path}, ${2:uid}, ${3:gid})$0", "insertTextFormat": 2}, {"label": "linesep", "kind": 6, "sortText": "z", "filterText": "linesep", "insertText": "linesep", "insertTextFormat": 1}, {"label": "link", "kind": 3, "sortText": "z", "filterText": "link", "insertText": "link(${1:src}, ${2:link_name})$0", "insertTextFormat": 2}, {"label": "listdir", "kind": 3, "sortText": "z", "filterText": "listdir", "insertText": "listdir($0)", "insertTextFormat": 2}, {"label": "listxattr", "kind": 3, "sortText": "z", "filterText": "listxattr", "insertText": "listxattr(${1:path})$0", "insertTextFormat": 2}, {"label": "lockf", "kind": 3, "sortText": "z", "filterText": "lockf", "insertText": "lockf(${1:fd}, ${2:cmd}, ${3:length})$0", "insertTextFormat": 2}, {"label": "lseek", "kind": 3, "sortText": "z", "filterText": "lseek", "insertText": "lseek(${1:fd}, ${2:pos}, ${3:how})$0", "insertTextFormat": 2}, {"label": "lstat", "kind": 3, "sortText": "z", "filterText": "lstat", "insertText": "lstat(${1:path})$0", "insertTextFormat": 2}, {"label": "major", "kind": 3, "sortText": "z", "filterText": "major", "insertText": "major(${1:device})$0", "insertTextFormat": 2}, {"label": "makedev", "kind": 3, "sortText": "z", "filterText": "makedev", "insertText": "makedev(${1:major}, ${2:minor})$0", "insertTextFormat": 2}, {"label": "makedirs", "kind": 3, "sortText": "z", "filterText": "makedirs", "insertText": "makedirs(${1:name})$0", "insertTextFormat": 2}, {"label": "Mapping", "kind": 7, "sortText": "z", "filterText": "Mapping", "insertText": "Mapping()$0", "insertTextFormat": 2}, {"label": "memfd_create", "kind": 3, "sortText": "z", "filterText": "memfd_create", "insertText": "memfd_create(${1:name})$0", "insertTextFormat": 2}, {"label": "MFD_ALLOW_SEALING", "kind": 6, "sortText": "z", "filterText": "MFD_ALLOW_SEALING", "insertText": "MFD_ALLOW_SEALING", "insertTextFormat": 1}, {"label": "MFD_CLOEXEC", "kind": 6, "sortText": "z", "filterText": "MFD_CLOEXEC", "insertText": "MFD_CLOEXEC", "insertTextFormat": 1}, {"label": "MFD_HUGE_16GB", "kind": 6, "sortText": "z", "filterText": "MFD_HUGE_16GB", "insertText": "MFD_HUGE_16GB", "insertTextFormat": 1}, {"label": "MFD_HUGE_16MB", "kind": 6, "sortText": "z", "filterText": "MFD_HUGE_16MB", "insertText": "MFD_HUGE_16MB", "insertTextFormat": 1}, {"label": "MFD_HUGE_1GB", "kind": 6, "sortText": "z", "filterText": "MFD_HUGE_1GB", "insertText": "MFD_HUGE_1GB", "insertTextFormat": 1}, {"label": "MFD_HUGE_1MB", "kind": 6, "sortText": "z", "filterText": "MFD_HUGE_1MB", "insertText": "MFD_HUGE_1MB", "insertTextFormat": 1}, {"label": "MFD_HUGE_256MB", "kind": 6, "sortText": "z", "filterText": "MFD_HUGE_256MB", "insertText": "MFD_HUGE_256MB", "insertTextFormat": 1}, {"label": "MFD_HUGE_2GB", "kind": 6, "sortText": "z", "filterText": "MFD_HUGE_2GB", "insertText": "MFD_HUGE_2GB", "insertTextFormat": 1}, {"label": "MFD_HUGE_2MB", "kind": 6, "sortText": "z", "filterText": "MFD_HUGE_2MB", "insertText": "MFD_HUGE_2MB", "insertTextFormat": 1}, {"label": "MFD_HUGE_32MB", "kind": 6, "sortText": "z", "filterText": "MFD_HUGE_32MB", "insertText": "MFD_HUGE_32MB", "insertTextFormat": 1}, {"label": "MFD_HUGE_512KB", "kind": 6, "sortText": "z", "filterText": "MFD_HUGE_512KB", "insertText": "MFD_HUGE_512KB", "insertTextFormat": 1}, {"label": "MFD_HUGE_512MB", "kind": 6, "sortText": "z", "filterText": "MFD_HUGE_512MB", "insertText": "MFD_HUGE_512MB", "insertTextFormat": 1}, {"label": "MFD_HUGE_64KB", "kind": 6, "sortText": "z", "filterText": "MFD_HUGE_64KB", "insertText": "MFD_HUGE_64KB", "insertTextFormat": 1}, {"label": "MFD_HUGE_8MB", "kind": 6, "sortText": "z", "filterText": "MFD_HUGE_8MB", "insertText": "MFD_HUGE_8MB", "insertTextFormat": 1}, {"label": "MFD_HUGE_MASK", "kind": 6, "sortText": "z", "filterText": "MFD_HUGE_MASK", "insertText": "MFD_HUGE_MASK", "insertTextFormat": 1}, {"label": "MFD_HUGE_SHIFT", "kind": 6, "sortText": "z", "filterText": "MFD_HUGE_SHIFT", "insertText": "MFD_HUGE_SHIFT", "insertTextFormat": 1}, {"label": "MFD_HUGETLB", "kind": 6, "sortText": "z", "filterText": "MFD_HUGETLB", "insertText": "MFD_HUGETLB", "insertTextFormat": 1}, {"label": "minor", "kind": 3, "sortText": "z", "filterText": "minor", "insertText": "minor(${1:device})$0", "insertTextFormat": 2}, {"label": "mkdir", "kind": 3, "sortText": "z", "filterText": "mkdir", "insertText": "mkdir(${1:path})$0", "insertTextFormat": 2}, {"label": "mkfifo", "kind": 3, "sortText": "z", "filterText": "mkfifo", "insertText": "mkfifo(${1:path})$0", "insertTextFormat": 2}, {"label": "mknod", "kind": 3, "sortText": "z", "filterText": "mknod", "insertText": "mknod(${1:path})$0", "insertTextFormat": 2}, {"label": "MutableMapping", "kind": 7, "sortText": "z", "filterText": "MutableMapping", "insertText": "MutableMapping()$0", "insertTextFormat": 2}, {"label": "name", "kind": 6, "sortText": "z", "filterText": "name", "insertText": "name", "insertTextFormat": 1}, {"label": "NGROUPS_MAX", "kind": 6, "sortText": "z", "filterText": "NGROUPS_MAX", "insertText": "NGROUPS_MAX", "insertTextFormat": 1}, {"label": "nice", "kind": 3, "sortText": "z", "filterText": "nice", "insertText": "nice(${1:increment})$0", "insertTextFormat": 2}, {"label": "O_ACCMODE", "kind": 6, "sortText": "z", "filterText": "O_ACCMODE", "insertText": "O_ACCMODE", "insertTextFormat": 1}, {"label": "O_APPEND", "kind": 6, "sortText": "z", "filterText": "O_APPEND", "insertText": "O_APPEND", "insertTextFormat": 1}, {"label": "O_ASYNC", "kind": 6, "sortText": "z", "filterText": "O_ASYNC", "insertText": "O_ASYNC", "insertTextFormat": 1}, {"label": "O_BINARY", "kind": 6, "sortText": "z", "filterText": "O_BINARY", "insertText": "O_BINARY", "insertTextFormat": 1}, {"label": "O_CLOEXEC", "kind": 6, "sortText": "z", "filterText": "O_CLOEXEC", "insertText": "O_CLOEXEC", "insertTextFormat": 1}, {"label": "O_CREAT", "kind": 6, "sortText": "z", "filterText": "O_CREAT", "insertText": "O_CREAT", "insertTextFormat": 1}, {"label": "O_DIRECT", "kind": 6, "sortText": "z", "filterText": "O_DIRECT", "insertText": "O_DIRECT", "insertTextFormat": 1}, {"label": "O_DIRECTORY", "kind": 6, "sortText": "z", "filterText": "O_DIRECTORY", "insertText": "O_DIRECTORY", "insertTextFormat": 1}, {"label": "O_DSYNC", "kind": 6, "sortText": "z", "filterText": "O_DSYNC", "insertText": "O_DSYNC", "insertTextFormat": 1}, {"label": "O_EXCL", "kind": 6, "sortText": "z", "filterText": "O_EXCL", "insertText": "O_EXCL", "insertTextFormat": 1}, {"label": "O_EXLOCK", "kind": 6, "sortText": "z", "filterText": "O_EXLOCK", "insertText": "O_EXLOCK", "insertTextFormat": 1}, {"label": "O_LARGEFILE", "kind": 6, "sortText": "z", "filterText": "O_LARGEFILE", "insertText": "O_LARGEFILE", "insertTextFormat": 1}, {"label": "O_NDELAY", "kind": 6, "sortText": "z", "filterText": "O_NDELAY", "insertText": "O_NDELAY", "insertTextFormat": 1}, {"label": "O_NOATIME", "kind": 6, "sortText": "z", "filterText": "O_NOATIME", "insertText": "O_NOATIME", "insertTextFormat": 1}, {"label": "O_NOCTTY", "kind": 6, "sortText": "z", "filterText": "O_NOCTTY", "insertText": "O_NOCTTY", "insertTextFormat": 1}, {"label": "O_NOFOLLOW", "kind": 6, "sortText": "z", "filterText": "O_NOFOLLOW", "insertText": "O_NOFOLLOW", "insertTextFormat": 1}, {"label": "O_NOINHERIT", "kind": 6, "sortText": "z", "filterText": "O_NOINHERIT", "insertText": "O_NOINHERIT", "insertTextFormat": 1}, {"label": "O_NONBLOCK", "kind": 6, "sortText": "z", "filterText": "O_NONBLOCK", "insertText": "O_NONBLOCK", "insertTextFormat": 1}, {"label": "O_PATH", "kind": 6, "sortText": "z", "filterText": "O_PATH", "insertText": "O_PATH", "insertTextFormat": 1}, {"label": "O_RANDOM", "kind": 6, "sortText": "z", "filterText": "O_RANDOM", "insertText": "O_RANDOM", "insertTextFormat": 1}, {"label": "O_RDONLY", "kind": 6, "sortText": "z", "filterText": "O_RDONLY", "insertText": "O_RDONLY", "insertTextFormat": 1}, {"label": "O_RDWR", "kind": 6, "sortText": "z", "filterText": "O_RDWR", "insertText": "O_RDWR", "insertTextFormat": 1}, {"label": "O_RSYNC", "kind": 6, "sortText": "z", "filterText": "O_RSYNC", "insertText": "O_RSYNC", "insertTextFormat": 1}, {"label": "O_SEQUENTIAL", "kind": 6, "sortText": "z", "filterText": "O_SEQUENTIAL", "insertText": "O_SEQUENTIAL", "insertTextFormat": 1}, {"label": "O_SHLOCK", "kind": 6, "sortText": "z", "filterText": "O_SHLOCK", "insertText": "O_SHLOCK", "insertTextFormat": 1}, {"label": "O_SHORT_LIVED", "kind": 6, "sortText": "z", "filterText": "O_SHORT_LIVED", "insertText": "O_SHORT_LIVED", "insertTextFormat": 1}, {"label": "O_SYNC", "kind": 6, "sortText": "z", "filterText": "O_SYNC", "insertText": "O_SYNC", "insertTextFormat": 1}, {"label": "O_TEMPORARY", "kind": 6, "sortText": "z", "filterText": "O_TEMPORARY", "insertText": "O_TEMPORARY", "insertTextFormat": 1}, {"label": "O_TEXT", "kind": 6, "sortText": "z", "filterText": "O_TEXT", "insertText": "O_TEXT", "insertTextFormat": 1}, {"label": "O_TMPFILE", "kind": 6, "sortText": "z", "filterText": "O_TMPFILE", "insertText": "O_TMPFILE", "insertTextFormat": 1}, {"label": "O_TRUNC", "kind": 6, "sortText": "z", "filterText": "O_TRUNC", "insertText": "O_TRUNC", "insertTextFormat": 1}, {"label": "O_WRONLY", "kind": 6, "sortText": "z", "filterText": "O_WRONLY", "insertText": "O_WRONLY", "insertTextFormat": 1}, {"label": "open", "kind": 3, "sortText": "z", "filterText": "open", "insertText": "open(${1:file}, ${2:flags})$0", "insertTextFormat": 2}, {"label": "openpty", "kind": 3, "sortText": "z", "filterText": "openpty", "insertText": "openpty()$0", "insertTextFormat": 2}, {"label": "P_ALL", "kind": 6, "sortText": "z", "filterText": "P_ALL", "insertText": "P_ALL", "insertTextFormat": 1}, {"label": "P_DETACH", "kind": 6, "sortText": "z", "filterText": "P_DETACH", "insertText": "P_DETACH", "insertTextFormat": 1}, {"label": "P_NOWAIT", "kind": 6, "sortText": "z", "filterText": "P_NOWAIT", "insertText": "P_NOWAIT", "insertTextFormat": 1}, {"label": "P_NOWAITO", "kind": 6, "sortText": "z", "filterText": "P_NOWAITO", "insertText": "P_NOWAITO", "insertTextFormat": 1}, {"label": "P_OVERLAY", "kind": 6, "sortText": "z", "filterText": "P_OVERLAY", "insertText": "P_OVERLAY", "insertTextFormat": 1}, {"label": "P_PGID", "kind": 6, "sortText": "z", "filterText": "P_PGID", "insertText": "P_PGID", "insertTextFormat": 1}, {"label": "P_PID", "kind": 6, "sortText": "z", "filterText": "P_PID", "insertText": "P_PID", "insertTextFormat": 1}, {"label": "P_WAIT", "kind": 6, "sortText": "z", "filterText": "P_WAIT", "insertText": "P_WAIT", "insertTextFormat": 1}, {"label": "pardir", "kind": 6, "sortText": "z", "filterText": "pardir", "insertText": "pardir", "insertTextFormat": 1}, {"label": "path", "kind": 9, "sortText": "z", "filterText": "path", "insertText": "path", "insertTextFormat": 1}, {"label": "pathconf", "kind": 3, "sortText": "z", "filterText": "pathconf", "insertText": "pathconf(${1:path}, ${2:name})$0", "insertTextFormat": 2}, {"label": "pathconf_names", "kind": 6, "sortText": "z", "filterText": "pathconf_names", "insertText": "pathconf_names", "insertTextFormat": 1}, {"label": "PathLike", "kind": 9, "sortText": "z", "filterText": "PathLike", "insertText": "PathLike", "insertTextFormat": 1}, {"label": "pathsep", "kind": 6, "sortText": "z", "filterText": "pathsep", "insertText": "pathsep", "insertTextFormat": 1}, {"label": "pipe", "kind": 3, "sortText": "z", "filterText": "pipe", "insertText": "pipe()$0", "insertTextFormat": 2}, {"label": "pipe2", "kind": 3, "sortText": "z", "filterText": "pipe2", "insertText": "pipe2(${1:flags})$0", "insertTextFormat": 2}, {"label": "plock", "kind": 3, "sortText": "z", "filterText": "plock", "insertText": "plock(${1:op})$0", "insertTextFormat": 2}, {"label": "popen", "kind": 3, "sortText": "z", "filterText": "popen", "insertText": "popen(${1:command})$0", "insertTextFormat": 2}, {"label": "POSIX_FADV_DONTNEED", "kind": 6, "sortText": "z", "filterText": "POSIX_FADV_DONTNEED", "insertText": "POSIX_FADV_DONTNEED", "insertTextFormat": 1}, {"label": "POSIX_FADV_NOREUSE", "kind": 6, "sortText": "z", "filterText": "POSIX_FADV_NOREUSE", "insertText": "POSIX_FADV_NOREUSE", "insertTextFormat": 1}, {"label": "POSIX_FADV_NORMAL", "kind": 6, "sortText": "z", "filterText": "POSIX_FADV_NORMAL", "insertText": "POSIX_FADV_NORMAL", "insertTextFormat": 1}, {"label": "POSIX_FADV_RANDOM", "kind": 6, "sortText": "z", "filterText": "POSIX_FADV_RANDOM", "insertText": "POSIX_FADV_RANDOM", "insertTextFormat": 1}, {"label": "POSIX_FADV_SEQUENTIAL", "kind": 6, "sortText": "z", "filterText": "POSIX_FADV_SEQUENTIAL", "insertText": "POSIX_FADV_SEQUENTIAL", "insertTextFormat": 1}, {"label": "POSIX_FADV_WILLNEED", "kind": 6, "sortText": "z", "filterText": "POSIX_FADV_WILLNEED", "insertText": "POSIX_FADV_WILLNEED", "insertTextFormat": 1}, {"label": "posix_fadvise", "kind": 3, "sortText": "z", "filterText": "posix_fadvise", "insertText": "posix_fadvise(${1:fd}, ${2:offset}, ${3:length}, ${4:advice})$0", "insertTextFormat": 2}, {"label": "posix_fallocate", "kind": 3, "sortText": "z", "filterText": "posix_fallocate", "insertText": "posix_fallocate(${1:fd}, ${2:offset}, ${3:length})$0", "insertTextFormat": 2}, {"label": "pread", "kind": 3, "sortText": "z", "filterText": "pread", "insertText": "pread(${1:fd}, ${2:buffersize}, ${3:offset})$0", "insertTextFormat": 2}, {"label": "PRIO_PGRP", "kind": 6, "sortText": "z", "filterText": "PRIO_PGRP", "insertText": "PRIO_PGRP", "insertTextFormat": 1}, {"label": "PRIO_PROCESS", "kind": 6, "sortText": "z", "filterText": "PRIO_PROCESS", "insertText": "PRIO_PROCESS", "insertTextFormat": 1}, {"label": "PRIO_USER", "kind": 6, "sortText": "z", "filterText": "PRIO_USER", "insertText": "PRIO_USER", "insertTextFormat": 1}, {"label": "putenv", "kind": 3, "sortText": "z", "filterText": "putenv", "insertText": "putenv(${1:key}, ${2:value})$0", "insertTextFormat": 2}, {"label": "pwrite", "kind": 3, "sortText": "z", "filterText": "pwrite", "insertText": "pwrite(${1:fd}, ${2:string}, ${3:offset})$0", "insertTextFormat": 2}, {"label": "R_OK", "kind": 6, "sortText": "z", "filterText": "R_OK", "insertText": "R_OK", "insertTextFormat": 1}, {"label": "read", "kind": 3, "sortText": "z", "filterText": "read", "insertText": "read(${1:fd}, ${2:n})$0", "insertTextFormat": 2}, {"label": "readlink", "kind": 3, "sortText": "z", "filterText": "readlink", "insertText": "readlink(${1:path})$0", "insertTextFormat": 2}, {"label": "readv", "kind": 3, "sortText": "z", "filterText": "readv", "insertText": "readv(${1:fd}, ${2:buffers})$0", "insertTextFormat": 2}, {"label": "register_at_fork", "kind": 3, "sortText": "z", "filterText": "register_at_fork", "insertText": "register_at_fork(${1:func}, ${2:when})$0", "insertTextFormat": 2}, {"label": "remove", "kind": 3, "sortText": "z", "filterText": "remove", "insertText": "remove(${1:path})$0", "insertTextFormat": 2}, {"label": "removedirs", "kind": 3, "sortText": "z", "filterText": "removedirs", "insertText": "removedirs(${1:name})$0", "insertTextFormat": 2}, {"label": "removexattr", "kind": 3, "sortText": "z", "filterText": "removexattr", "insertText": "removexattr(${1:path}, ${2:attribute})$0", "insertTextFormat": 2}, {"label": "rename", "kind": 3, "sortText": "z", "filterText": "rename", "insertText": "rename(${1:src}, ${2:dst})$0", "insertTextFormat": 2}, {"label": "renames", "kind": 3, "sortText": "z", "filterText": "renames", "insertText": "renames(${1:old}, ${2:new})$0", "insertTextFormat": 2}, {"label": "replace", "kind": 3, "sortText": "z", "filterText": "replace", "insertText": "replace(${1:src}, ${2:dst})$0", "insertTextFormat": 2}, {"label": "rmdir", "kind": 3, "sortText": "z", "filterText": "rmdir", "insertText": "rmdir(${1:path})$0", "insertTextFormat": 2}, {"label": "RTLD_DEEPBIND", "kind": 6, "sortText": "z", "filterText": "RTLD_DEEPBIND", "insertText": "RTLD_DEEPBIND", "insertTextFormat": 1}, {"label": "RTLD_GLOBAL", "kind": 6, "sortText": "z", "filterText": "RTLD_GLOBAL", "insertText": "RTLD_GLOBAL", "insertTextFormat": 1}, {"label": "RTLD_LAZY", "kind": 6, "sortText": "z", "filterText": "RTLD_LAZY", "insertText": "RTLD_LAZY", "insertTextFormat": 1}, {"label": "RTLD_LOCAL", "kind": 6, "sortText": "z", "filterText": "RTLD_LOCAL", "insertText": "RTLD_LOCAL", "insertTextFormat": 1}, {"label": "RTLD_NODELETE", "kind": 6, "sortText": "z", "filterText": "RTLD_NODELETE", "insertText": "RTLD_NODELETE", "insertTextFormat": 1}, {"label": "RTLD_NOLOAD", "kind": 6, "sortText": "z", "filterText": "RTLD_NOLOAD", "insertText": "RTLD_NOLOAD", "insertTextFormat": 1}, {"label": "RTLD_NOW", "kind": 6, "sortText": "z", "filterText": "RTLD_NOW", "insertText": "RTLD_NOW", "insertTextFormat": 1}, {"label": "scandir", "kind": 3, "sortText": "z", "filterText": "scandir", "insertText": "scandir()$0", "insertTextFormat": 2}, {"label": "SCHED_BATCH", "kind": 6, "sortText": "z", "filterText": "SCHED_BATCH", "insertText": "SCHED_BATCH", "insertTextFormat": 1}, {"label": "SCHED_FIFO", "kind": 6, "sortText": "z", "filterText": "SCHED_FIFO", "insertText": "SCHED_FIFO", "insertTextFormat": 1}, {"label": "sched_get_priority_max", "kind": 3, "sortText": "z", "filterText": "sched_get_priority_max", "insertText": "sched_get_priority_max(${1:policy})$0", "insertTextFormat": 2}, {"label": "sched_get_priority_min", "kind": 3, "sortText": "z", "filterText": "sched_get_priority_min", "insertText": "sched_get_priority_min(${1:policy})$0", "insertTextFormat": 2}, {"label": "sched_getaffinity", "kind": 3, "sortText": "z", "filterText": "sched_getaffinity", "insertText": "sched_getaffinity(${1:pid})$0", "insertTextFormat": 2}, {"label": "sched_getparam", "kind": 3, "sortText": "z", "filterText": "sched_getparam", "insertText": "sched_getparam(${1:pid})$0", "insertTextFormat": 2}, {"label": "sched_getscheduler", "kind": 3, "sortText": "z", "filterText": "sched_getscheduler", "insertText": "sched_getscheduler(${1:pid})$0", "insertTextFormat": 2}, {"label": "SCHED_IDLE", "kind": 6, "sortText": "z", "filterText": "SCHED_IDLE", "insertText": "SCHED_IDLE", "insertTextFormat": 1}, {"label": "SCHED_OTHER", "kind": 6, "sortText": "z", "filterText": "SCHED_OTHER", "insertText": "SCHED_OTHER", "insertTextFormat": 1}, {"label": "sched_param", "kind": 7, "sortText": "z", "filterText": "sched_param", "insertText": "sched_param(${1:typename})$0", "insertTextFormat": 2}, {"label": "SCHED_RESET_ON_FORK", "kind": 6, "sortText": "z", "filterText": "SCHED_RESET_ON_FORK", "insertText": "SCHED_RESET_ON_FORK", "insertTextFormat": 1}, {"label": "SCHED_RR", "kind": 6, "sortText": "z", "filterText": "SCHED_RR", "insertText": "SCHED_RR", "insertTextFormat": 1}, {"label": "sched_rr_get_interval", "kind": 3, "sortText": "z", "filterText": "sched_rr_get_interval", "insertText": "sched_rr_get_interval(${1:pid})$0", "insertTextFormat": 2}, {"label": "sched_setaffinity", "kind": 3, "sortText": "z", "filterText": "sched_setaffinity", "insertText": "sched_setaffinity(${1:pid}, ${2:mask})$0", "insertTextFormat": 2}, {"label": "sched_setparam", "kind": 3, "sortText": "z", "filterText": "sched_setparam", "insertText": "sched_setparam(${1:pid}, ${2:param})$0", "insertTextFormat": 2}, {"label": "sched_setscheduler", "kind": 3, "sortText": "z", "filterText": "sched_setscheduler", "insertText": "sched_setscheduler(${1:pid}, ${2:policy}, ${3:param})$0", "insertTextFormat": 2}, {"label": "SCHED_SPORADIC", "kind": 6, "sortText": "z", "filterText": "SCHED_SPORADIC", "insertText": "SCHED_SPORADIC", "insertTextFormat": 1}, {"label": "sched_yield", "kind": 3, "sortText": "z", "filterText": "sched_yield", "insertText": "sched_yield()$0", "insertTextFormat": 2}, {"label": "SEEK_CUR", "kind": 6, "sortText": "z", "filterText": "SEEK_CUR", "insertText": "SEEK_CUR", "insertTextFormat": 1}, {"label": "SEEK_DATA", "kind": 6, "sortText": "z", "filterText": "SEEK_DATA", "insertText": "SEEK_DATA", "insertTextFormat": 1}, {"label": "SEEK_END", "kind": 6, "sortText": "z", "filterText": "SEEK_END", "insertText": "SEEK_END", "insertTextFormat": 1}, {"label": "SEEK_HOLE", "kind": 6, "sortText": "z", "filterText": "SEEK_HOLE", "insertText": "SEEK_HOLE", "insertTextFormat": 1}, {"label": "SEEK_SET", "kind": 6, "sortText": "z", "filterText": "SEEK_SET", "insertText": "SEEK_SET", "insertTextFormat": 1}, {"label": "sendfile", "kind": 3, "sortText": "z", "filterText": "sendfile", "insertText": "sendfile(${1:out_fd}, ${2:in_fd}, ${3:offset}, ${4:count})$0", "insertTextFormat": 2}, {"label": "sep", "kind": 6, "sortText": "z", "filterText": "sep", "insertText": "sep", "insertTextFormat": 1}, {"label": "set_blocking", "kind": 3, "sortText": "z", "filterText": "set_blocking", "insertText": "set_blocking(${1:fd}, ${2:blocking})$0", "insertTextFormat": 2}, {"label": "set_inheritable", "kind": 3, "sortText": "z", "filterText": "set_inheritable", "insertText": "set_inheritable(${1:fd}, ${2:inheritable})$0", "insertTextFormat": 2}, {"label": "setegid", "kind": 3, "sortText": "z", "filterText": "setegid", "insertText": "setegid(${1:egid})$0", "insertTextFormat": 2}, {"label": "seteuid", "kind": 3, "sortText": "z", "filterText": "seteuid", "insertText": "seteuid(${1:euid})$0", "insertTextFormat": 2}, {"label": "setgid", "kind": 3, "sortText": "z", "filterText": "setgid", "insertText": "setgid(${1:gid})$0", "insertTextFormat": 2}, {"label": "setgroups", "kind": 3, "sortText": "z", "filterText": "setgroups", "insertText": "setgroups(${1:groups})$0", "insertTextFormat": 2}, {"label": "setpgid", "kind": 3, "sortText": "z", "filterText": "setpgid", "insertText": "setpgid(${1:pid}, ${2:pgrp})$0", "insertTextFormat": 2}, {"label": "setpgrp", "kind": 3, "sortText": "z", "filterText": "setpgrp", "insertText": "setpgrp()$0", "insertTextFormat": 2}, {"label": "setpriority", "kind": 3, "sortText": "z", "filterText": "setpriority", "insertText": "setpriority(${1:which}, ${2:who}, ${3:priority})$0", "insertTextFormat": 2}, {"label": "setregid", "kind": 3, "sortText": "z", "filterText": "setregid", "insertText": "setregid(${1:rgid}, ${2:egid})$0", "insertTextFormat": 2}, {"label": "setresgid", "kind": 3, "sortText": "z", "filterText": "setresgid", "insertText": "setresgid(${1:rgid}, ${2:egid}, ${3:sgid})$0", "insertTextFormat": 2}, {"label": "setresuid", "kind": 3, "sortText": "z", "filterText": "setresuid", "insertText": "setresuid(${1:ruid}, ${2:euid}, ${3:suid})$0", "insertTextFormat": 2}, {"label": "setreuid", "kind": 3, "sortText": "z", "filterText": "setreuid", "insertText": "setreuid(${1:ruid}, ${2:euid})$0", "insertTextFormat": 2}, {"label": "setsid", "kind": 3, "sortText": "z", "filterText": "setsid", "insertText": "setsid()$0", "insertTextFormat": 2}, {"label": "setuid", "kind": 3, "sortText": "z", "filterText": "setuid", "insertText": "setuid(${1:uid})$0", "insertTextFormat": 2}, {"label": "setxattr", "kind": 3, "sortText": "z", "filterText": "setxattr", "insertText": "setxattr(${1:path}, ${2:attribute}, ${3:value})$0", "insertTextFormat": 2}, {"label": "SF_MNOWAIT", "kind": 6, "sortText": "z", "filterText": "SF_MNOWAIT", "insertText": "SF_MNOWAIT", "insertTextFormat": 1}, {"label": "SF_NODISKIO", "kind": 6, "sortText": "z", "filterText": "SF_NODISKIO", "insertText": "SF_NODISKIO", "insertTextFormat": 1}, {"label": "SF_SYNC", "kind": 6, "sortText": "z", "filterText": "SF_SYNC", "insertText": "SF_SYNC", "insertTextFormat": 1}, {"label": "spawnl", "kind": 3, "sortText": "z", "filterText": "spawnl", "insertText": "spawnl(${1:mode}, ${2:path}, ${3:arg0})$0", "insertTextFormat": 2}, {"label": "spawnle", "kind": 3, "sortText": "z", "filterText": "spawnle", "insertText": "spawnle(${1:mode}, ${2:path}, ${3:arg0})$0", "insertTextFormat": 2}, {"label": "spawnlp", "kind": 3, "sortText": "z", "filterText": "spawnlp", "insertText": "spawnlp(${1:mode}, ${2:file}, ${3:arg0})$0", "insertTextFormat": 2}, {"label": "spawnlpe", "kind": 3, "sortText": "z", "filterText": "spawnlpe", "insertText": "spawnlpe(${1:mode}, ${2:file}, ${3:arg0})$0", "insertTextFormat": 2}, {"label": "spawnv", "kind": 3, "sortText": "z", "filterText": "spawnv", "insertText": "spawnv(${1:mode}, ${2:path}, ${3:args})$0", "insertTextFormat": 2}, {"label": "spawnve", "kind": 3, "sortText": "z", "filterText": "spawnve", "insertText": "spawnve(${1:mode}, ${2:path}, ${3:args}, ${4:env})$0", "insertTextFormat": 2}, {"label": "spawnvp", "kind": 3, "sortText": "z", "filterText": "spawnvp", "insertText": "spawnvp(${1:mode}, ${2:file}, ${3:args})$0", "insertTextFormat": 2}, {"label": "spawnvpe", "kind": 3, "sortText": "z", "filterText": "spawnvpe", "insertText": "spawnvpe(${1:mode}, ${2:file}, ${3:args}, ${4:env})$0", "insertTextFormat": 2}, {"label": "st", "kind": 9, "sortText": "z", "filterText": "st", "insertText": "st", "insertTextFormat": 1}, {"label": "ST_APPEND", "kind": 6, "sortText": "z", "filterText": "ST_APPEND", "insertText": "ST_APPEND", "insertTextFormat": 1}, {"label": "ST_MANDLOCK", "kind": 6, "sortText": "z", "filterText": "ST_MANDLOCK", "insertText": "ST_MANDLOCK", "insertTextFormat": 1}, {"label": "ST_NOATIME", "kind": 6, "sortText": "z", "filterText": "ST_NOATIME", "insertText": "ST_NOATIME", "insertTextFormat": 1}, {"label": "ST_NODEV", "kind": 6, "sortText": "z", "filterText": "ST_NODEV", "insertText": "ST_NODEV", "insertTextFormat": 1}, {"label": "ST_NODIRATIME", "kind": 6, "sortText": "z", "filterText": "ST_NODIRATIME", "insertText": "ST_NODIRATIME", "insertTextFormat": 1}, {"label": "ST_NOEXEC", "kind": 6, "sortText": "z", "filterText": "ST_NOEXEC", "insertText": "ST_NOEXEC", "insertTextFormat": 1}, {"label": "ST_NOSUID", "kind": 6, "sortText": "z", "filterText": "ST_NOSUID", "insertText": "ST_NOSUID", "insertTextFormat": 1}, {"label": "ST_RDONLY", "kind": 6, "sortText": "z", "filterText": "ST_RDONLY", "insertText": "ST_RDONLY", "insertTextFormat": 1}, {"label": "ST_RELATIME", "kind": 6, "sortText": "z", "filterText": "ST_RELATIME", "insertText": "ST_RELATIME", "insertTextFormat": 1}, {"label": "ST_SYNCHRONOUS", "kind": 6, "sortText": "z", "filterText": "ST_SYNCHRONOUS", "insertText": "ST_SYNCHRONOUS", "insertTextFormat": 1}, {"label": "ST_WRITE", "kind": 6, "sortText": "z", "filterText": "ST_WRITE", "insertText": "ST_WRITE", "insertTextFormat": 1}, {"label": "startfile", "kind": 3, "sortText": "z", "filterText": "startfile", "insertText": "startfile(${1:path})$0", "insertTextFormat": 2}, {"label": "stat", "kind": 3, "sortText": "z", "filterText": "stat", "insertText": "stat(${1:path})$0", "insertTextFormat": 2}, {"label": "stat_result", "kind": 7, "sortText": "z", "filterText": "stat_result", "insertText": "stat_result(${1:tuple})$0", "insertTextFormat": 2}, {"label": "statvfs", "kind": 3, "sortText": "z", "filterText": "statvfs", "insertText": "statvfs(${1:path})$0", "insertTextFormat": 2}, {"label": "statvfs_result", "kind": 7, "sortText": "z", "filterText": "statvfs_result", "insertText": "statvfs_result()$0", "insertTextFormat": 2}, {"label": "strerror", "kind": 3, "sortText": "z", "filterText": "strerror", "insertText": "strerror(${1:code})$0", "insertTextFormat": 2}, {"label": "supports_bytes_environ", "kind": 6, "sortText": "z", "filterText": "supports_bytes_environ", "insertText": "supports_bytes_environ", "insertTextFormat": 1}, {"label": "supports_dir_fd", "kind": 6, "sortText": "z", "filterText": "supports_dir_fd", "insertText": "supports_dir_fd", "insertTextFormat": 1}, {"label": "supports_effective_ids", "kind": 6, "sortText": "z", "filterText": "supports_effective_ids", "insertText": "supports_effective_ids", "insertTextFormat": 1}, {"label": "supports_fd", "kind": 6, "sortText": "z", "filterText": "supports_fd", "insertText": "supports_fd", "insertTextFormat": 1}, {"label": "supports_follow_symlinks", "kind": 6, "sortText": "z", "filterText": "supports_follow_symlinks", "insertText": "supports_follow_symlinks", "insertTextFormat": 1}, {"label": "symlink", "kind": 3, "sortText": "z", "filterText": "symlink", "insertText": "symlink(${1:source}, ${2:link_name})$0", "insertTextFormat": 2}, {"label": "sync", "kind": 3, "sortText": "z", "filterText": "sync", "insertText": "sync()$0", "insertTextFormat": 2}, {"label": "sys", "kind": 9, "sortText": "z", "filterText": "sys", "insertText": "sys", "insertTextFormat": 1}, {"label": "sysconf", "kind": 3, "sortText": "z", "filterText": "sysconf", "insertText": "sysconf(${1:name})$0", "insertTextFormat": 2}, {"label": "sysconf_names", "kind": 6, "sortText": "z", "filterText": "sysconf_names", "insertText": "sysconf_names", "insertTextFormat": 1}, {"label": "system", "kind": 3, "sortText": "z", "filterText": "system", "insertText": "system(${1:command})$0", "insertTextFormat": 2}, {"label": "tcgetpgrp", "kind": 3, "sortText": "z", "filterText": "tcgetpgrp", "insertText": "tcgetpgrp(${1:fd})$0", "insertTextFormat": 2}, {"label": "tcsetpgrp", "kind": 3, "sortText": "z", "filterText": "tcsetpgrp", "insertText": "tcsetpgrp(${1:fd}, ${2:pg})$0", "insertTextFormat": 2}, {"label": "terminal_size", "kind": 7, "sortText": "z", "filterText": "terminal_size", "insertText": "terminal_size()$0", "insertTextFormat": 2}, {"label": "times", "kind": 3, "sortText": "z", "filterText": "times", "insertText": "times()$0", "insertTextFormat": 2}, {"label": "times_result", "kind": 7, "sortText": "z", "filterText": "times_result", "insertText": "times_result(${1:typename})$0", "insertTextFormat": 2}, {"label": "TMP_MAX", "kind": 6, "sortText": "z", "filterText": "TMP_MAX", "insertText": "TMP_MAX", "insertTextFormat": 1}, {"label": "truncate", "kind": 3, "sortText": "z", "filterText": "truncate", "insertText": "truncate(${1:path}, ${2:length})$0", "insertTextFormat": 2}, {"label": "ttyname", "kind": 3, "sortText": "z", "filterText": "ttyname", "insertText": "ttyname(${1:fd})$0", "insertTextFormat": 2}, {"label": "umask", "kind": 3, "sortText": "z", "filterText": "umask", "insertText": "umask(${1:mask})$0", "insertTextFormat": 2}, {"label": "uname", "kind": 3, "sortText": "z", "filterText": "uname", "insertText": "uname()$0", "insertTextFormat": 2}, {"label": "uname_result", "kind": 7, "sortText": "z", "filterText": "uname_result", "insertText": "uname_result(${1:typename})$0", "insertTextFormat": 2}, {"label": "unlink", "kind": 3, "sortText": "z", "filterText": "unlink", "insertText": "unlink(${1:path})$0", "insertTextFormat": 2}, {"label": "unsetenv", "kind": 3, "sortText": "z", "filterText": "unsetenv", "insertText": "unsetenv(${1:key})$0", "insertTextFormat": 2}, {"label": "urandom", "kind": 3, "sortText": "z", "filterText": "urandom", "insertText": "urandom(${1:size})$0", "insertTextFormat": 2}, {"label": "utime", "kind": 3, "sortText": "z", "filterText": "utime", "insertText": "utime(${1:path})$0", "insertTextFormat": 2}, {"label": "W_OK", "kind": 6, "sortText": "z", "filterText": "W_OK", "insertText": "W_OK", "insertTextFormat": 1}, {"label": "wait", "kind": 3, "sortText": "z", "filterText": "wait", "insertText": "wait()$0", "insertTextFormat": 2}, {"label": "wait3", "kind": 3, "sortText": "z", "filterText": "wait3", "insertText": "wait3(${1:options})$0", "insertTextFormat": 2}, {"label": "wait4", "kind": 3, "sortText": "z", "filterText": "wait4", "insertText": "wait4(${1:pid}, ${2:options})$0", "insertTextFormat": 2}, {"label": "waitid", "kind": 3, "sortText": "z", "filterText": "waitid", "insertText": "waitid(${1:idtype}, ${2:ident}, ${3:options})$0", "insertTextFormat": 2}, {"label": "waitid_result", "kind": 7, "sortText": "z", "filterText": "waitid_result", "insertText": "waitid_result(${1:typename})$0", "insertTextFormat": 2}, {"label": "waitpid", "kind": 3, "sortText": "z", "filterText": "waitpid", "insertText": "waitpid(${1:pid}, ${2:options})$0", "insertTextFormat": 2}, {"label": "walk", "kind": 3, "sortText": "z", "filterText": "walk", "insertText": "walk(${1:top})$0", "insertTextFormat": 2}, {"label": "WCONTINUED", "kind": 6, "sortText": "z", "filterText": "WCONTINUED", "insertText": "WCONTINUED", "insertTextFormat": 1}, {"label": "WCOREDUMP", "kind": 3, "sortText": "z", "filterText": "WCOREDUMP", "insertText": "WCOREDUMP(${1:status})$0", "insertTextFormat": 2}, {"label": "WEXITED", "kind": 6, "sortText": "z", "filterText": "WEXITED", "insertText": "WEXITED", "insertTextFormat": 1}, {"label": "WEXITSTATUS", "kind": 3, "sortText": "z", "filterText": "WEXITSTATUS", "insertText": "WEXITSTATUS(${1:status})$0", "insertTextFormat": 2}, {"label": "WIFCONTINUED", "kind": 3, "sortText": "z", "filterText": "WIFCONTINUED", "insertText": "WIFCONTINUED(${1:status})$0", "insertTextFormat": 2}, {"label": "WIFEXITED", "kind": 3, "sortText": "z", "filterText": "WIFEXITED", "insertText": "WIFEXITED(${1:status})$0", "insertTextFormat": 2}, {"label": "WIFSIGNALED", "kind": 3, "sortText": "z", "filterText": "WIFSIGNALED", "insertText": "WIFSIGNALED(${1:status})$0", "insertTextFormat": 2}, {"label": "WIFSTOPPED", "kind": 3, "sortText": "z", "filterText": "WIFSTOPPED", "insertText": "WIFSTOPPED(${1:status})$0", "insertTextFormat": 2}, {"label": "WNOHANG", "kind": 6, "sortText": "z", "filterText": "WNOHANG", "insertText": "WNOHANG", "insertTextFormat": 1}, {"label": "WNOWAIT", "kind": 6, "sortText": "z", "filterText": "WNOWAIT", "insertText": "WNOWAIT", "insertTextFormat": 1}, {"label": "write", "kind": 3, "sortText": "z", "filterText": "write", "insertText": "write(${1:fd}, ${2:string})$0", "insertTextFormat": 2}, {"label": "writev", "kind": 3, "sortText": "z", "filterText": "writev", "insertText": "writev(${1:fd}, ${2:buffers})$0", "insertTextFormat": 2}, {"label": "WSTOPPED", "kind": 6, "sortText": "z", "filterText": "WSTOPPED", "insertText": "WSTOPPED", "insertTextFormat": 1}, {"label": "WSTOPSIG", "kind": 3, "sortText": "z", "filterText": "WSTOPSIG", "insertText": "WSTOPSIG(${1:status})$0", "insertTextFormat": 2}, {"label": "WTERMSIG", "kind": 3, "sortText": "z", "filterText": "WTERMSIG", "insertText": "WTERMSIG(${1:status})$0", "insertTextFormat": 2}, {"label": "WUNTRACED", "kind": 6, "sortText": "z", "filterText": "WUNTRACED", "insertText": "WUNTRACED", "insertTextFormat": 1}, {"label": "X_OK", "kind": 6, "sortText": "z", "filterText": "X_OK", "insertText": "X_OK", "insertTextFormat": 1}, {"label": "XATTR_CREATE", "kind": 6, "sortText": "z", "filterText": "XATTR_CREATE", "insertText": "XATTR_CREATE", "insertTextFormat": 1}, {"label": "XATTR_REPLACE", "kind": 6, "sortText": "z", "filterText": "XATTR_REPLACE", "insertText": "XATTR_REPLACE", "insertTextFormat": 1}, {"label": "XATTR_SIZE_MAX", "kind": 6, "sortText": "z", "filterText": "XATTR_SIZE_MAX", "insertText": "XATTR_SIZE_MAX", "insertTextFormat": 1}, {"label": "_AddedDllDirectory", "kind": 7, "sortText": "z", "filterText": "_AddedDllDirectory", "insertText": "_AddedDllDirectory(${1:path}, ${2:cookie}, ${3:remove_dll_directory})$0", "insertTextFormat": 2}, {"label": "_check_methods", "kind": 3, "sortText": "z", "filterText": "_check_methods", "insertText": "_check_methods(${1:C})$0", "insertTextFormat": 2}, {"label": "_Environ", "kind": 7, "sortText": "z", "filterText": "_Environ", "insertText": "_Environ(${1:data}, ${2:encodekey}, ${3:decodekey}, ${4:encodevalue}, ${5:decodevalue})$0", "insertTextFormat": 2}, {"label": "_execvpe", "kind": 3, "sortText": "z", "filterText": "_execvpe", "insertText": "_execvpe(${1:file}, ${2:args})$0", "insertTextFormat": 2}, {"label": "_exists", "kind": 3, "sortText": "z", "filterText": "_exists", "insertText": "_exists(${1:name})$0", "insertTextFormat": 2}, {"label": "_exit", "kind": 9, "sortText": "z", "filterText": "_exit", "insertText": "_exit", "insertTextFormat": 1}, {"label": "_fspath", "kind": 3, "sortText": "z", "filterText": "_fspath", "insertText": "_fspath(${1:path})$0", "insertTextFormat": 2}, {"label": "_fwalk", "kind": 3, "sortText": "z", "filterText": "_fwalk", "insertText": "_fwalk(${1:topfd}, ${2:toppath}, ${3:isbytes}, ${4:topdown}, ${5:onerror}, ${6:follow_symlinks})$0", "insertTextFormat": 2}, {"label": "_get_exports_list", "kind": 3, "sortText": "z", "filterText": "_get_exports_list", "insertText": "_get_exports_list(${1:module})$0", "insertTextFormat": 2}, {"label": "_spawnvef", "kind": 3, "sortText": "z", "filterText": "_spawnvef", "insertText": "_spawnvef(${1:mode}, ${2:file}, ${3:args}, ${4:env}, ${5:func})$0", "insertTextFormat": 2}, {"label": "_walk", "kind": 3, "sortText": "z", "filterText": "_walk", "insertText": "_walk(${1:top}, ${2:topdown}, ${3:onerror}, ${4:followlinks})$0", "insertTextFormat": 2}, {"label": "_wrap_close", "kind": 7, "sortText": "z", "filterText": "_wrap_close", "insertText": "_wrap_close(${1:stream}, ${2:proc})$0", "insertTextFormat": 2}, {"label": "__all__", "kind": 6, "sortText": "z", "filterText": "__all__", "insertText": "__all__", "insertTextFormat": 1}, {"label": "__doc__", "kind": 6, "sortText": "z", "filterText": "__doc__", "insertText": "__doc__", "insertTextFormat": 1}, {"label": "__file__", "kind": 6, "sortText": "z", "filterText": "__file__", "insertText": "__file__", "insertTextFormat": 1}, {"label": "__name__", "kind": 6, "sortText": "z", "filterText": "__name__", "insertText": "__name__", "insertTextFormat": 1}, {"label": "__package__", "kind": 6, "sortText": "z", "filterText": "__package__", "insertText": "__package__", "insertTextFormat": 1}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 682, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 683, "result": {"label": "CLD_CONTINUED", "kind": 6, "detail": "CLD_CONTINUED: int", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "CLD_CONTINUED", "insertText": "CLD_CONTINUED", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 684, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 685, "result": {"isIncomplete": false, "items": [{"label": "os", "kind": 9, "sortText": "z", "filterText": "os", "insertText": "os", "insertTextFormat": 1}, {"label": "OSError", "kind": 7, "sortText": "z", "filterText": "OSError", "insertText": "OSError($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 686, "result": {"label": "os", "kind": 9, "detail": "module os", "documentation": {"kind": "markdown", "value": "```text\nOS routines for NT or Posix depending on what system we're on.\n\nThis exports:\n  - all functions from posix or nt, e.g. unlink, stat, etc.\n  - os.path is either posixpath or ntpath\n  - os.name is either 'posix' or 'nt'\n  - os.curdir is a string representing the current directory (always '.')\n  - os.pardir is a string representing the parent directory (always '..')\n  - os.sep is the (or a most common) pathname separator ('/' or '\\\\')\n  - os.extsep is the extension separator (always '.')\n  - os.altsep is the alternate pathname separator (None or '/')\n  - os.pathsep is the component separator used in $PATH etc\n  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')\n  - os.defpath is the default search path for executables\n  - os.devnull is the file path of the null device ('/dev/null', etc.)\n\nPrograms that import and use 'os' stand a better chance of being\nportable between different platforms.  Of course, they must then\nonly use functions that are defined by all platforms (e.g., unlink\nand opendir), and leave all pathname manipulation to os.path\n(e.g., split and join).\n```"}, "sortText": "z", "filterText": "os", "insertText": "os", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 687, "result": {"isIncomplete": false, "items": [{"label": "object", "kind": 7, "sortText": "z", "filterText": "object", "insertText": "object()$0", "insertTextFormat": 2}, {"label": "oct", "kind": 3, "sortText": "z", "filterText": "oct", "insertText": "oct(${1:i})$0", "insertTextFormat": 2}, {"label": "open", "kind": 3, "sortText": "z", "filterText": "open", "insertText": "open(${1:file})$0", "insertTextFormat": 2}, {"label": "ord", "kind": 3, "sortText": "z", "filterText": "ord", "insertText": "ord(${1:c})$0", "insertTextFormat": 2}, {"label": "os", "kind": 9, "sortText": "z", "filterText": "os", "insertText": "os", "insertTextFormat": 1}, {"label": "OSError", "kind": 7, "sortText": "z", "filterText": "OSError", "insertText": "OSError($0)", "insertTextFormat": 2}, {"label": "OverflowError", "kind": 7, "sortText": "z", "filterText": "OverflowError", "insertText": "OverflowError($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 688, "result": {"label": "object", "kind": 7, "detail": "class object", "documentation": {"kind": "markdown", "value": "```text\nobject()\n\nThe base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.\n```"}, "sortText": "z", "filterText": "object", "insertText": "object()$0", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 3, "character": 11}, "end": {"line": 4, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 689, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 690, "result": {"isIncomplete": false, "items": [{"label": "object", "kind": 7, "sortText": "z", "filterText": "object", "insertText": "object()$0", "insertTextFormat": 2}, {"label": "oct", "kind": 3, "sortText": "z", "filterText": "oct", "insertText": "oct(${1:i})$0", "insertTextFormat": 2}, {"label": "open", "kind": 3, "sortText": "z", "filterText": "open", "insertText": "open(${1:file})$0", "insertTextFormat": 2}, {"label": "ord", "kind": 3, "sortText": "z", "filterText": "ord", "insertText": "ord(${1:c})$0", "insertTextFormat": 2}, {"label": "os", "kind": 9, "sortText": "z", "filterText": "os", "insertText": "os", "insertTextFormat": 1}, {"label": "OSError", "kind": 7, "sortText": "z", "filterText": "OSError", "insertText": "OSError($0)", "insertTextFormat": 2}, {"label": "OverflowError", "kind": 7, "sortText": "z", "filterText": "OverflowError", "insertText": "OverflowError($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 691, "result": {"label": "object", "kind": 7, "detail": "class object", "documentation": {"kind": "markdown", "value": "```text\nobject()\n\nThe base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.\n```"}, "sortText": "z", "filterText": "object", "insertText": "object()$0", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 692, "result": {"label": "os", "kind": 9, "detail": "module os", "documentation": {"kind": "markdown", "value": "```text\nOS routines for NT or Posix depending on what system we're on.\n\nThis exports:\n  - all functions from posix or nt, e.g. unlink, stat, etc.\n  - os.path is either posixpath or ntpath\n  - os.name is either 'posix' or 'nt'\n  - os.curdir is a string representing the current directory (always '.')\n  - os.pardir is a string representing the parent directory (always '..')\n  - os.sep is the (or a most common) pathname separator ('/' or '\\\\')\n  - os.extsep is the extension separator (always '.')\n  - os.altsep is the alternate pathname separator (None or '/')\n  - os.pathsep is the component separator used in $PATH etc\n  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')\n  - os.defpath is the default search path for executables\n  - os.devnull is the file path of the null device ('/dev/null', etc.)\n\nPrograms that import and use 'os' stand a better chance of being\nportable between different platforms.  Of course, they must then\nonly use functions that are defined by all platforms (e.g., unlink\nand opendir), and leave all pathname manipulation to os.path\n(e.g., split and join).\n```"}, "sortText": "z", "filterText": "os", "insertText": "os", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 3, "character": 14}, "end": {"line": 4, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 693, "result": {"isIncomplete": false, "items": [{"label": "abc", "kind": 9, "sortText": "z", "filterText": "abc", "insertText": "abc", "insertTextFormat": 1}, {"label": "abort", "kind": 3, "sortText": "z", "filterText": "abort", "insertText": "abort()$0", "insertTextFormat": 2}, {"label": "access", "kind": 3, "sortText": "z", "filterText": "access", "insertText": "access(${1:path}, ${2:mode})$0", "insertTextFormat": 2}, {"label": "add_dll_directory", "kind": 3, "sortText": "z", "filterText": "add_dll_directory", "insertText": "add_dll_directory(${1:path})$0", "insertTextFormat": 2}, {"label": "altsep", "kind": 6, "sortText": "z", "filterText": "altsep", "insertText": "altsep", "insertTextFormat": 1}, {"label": "chdir", "kind": 3, "sortText": "z", "filterText": "chdir", "insertText": "chdir(${1:path})$0", "insertTextFormat": 2}, {"label": "chflags", "kind": 3, "sortText": "z", "filterText": "chflags", "insertText": "chflags(${1:path}, ${2:flags})$0", "insertTextFormat": 2}, {"label": "chmod", "kind": 3, "sortText": "z", "filterText": "chmod", "insertText": "chmod(${1:path}, ${2:mode})$0", "insertTextFormat": 2}, {"label": "chown", "kind": 3, "sortText": "z", "filterText": "chown", "insertText": "chown(${1:path}, ${2:uid}, ${3:gid})$0", "insertTextFormat": 2}, {"label": "chroot", "kind": 3, "sortText": "z", "filterText": "chroot", "insertText": "chroot(${1:path})$0", "insertTextFormat": 2}, {"label": "CLD_CONTINUED", "kind": 6, "sortText": "z", "filterText": "CLD_CONTINUED", "insertText": "CLD_CONTINUED", "insertTextFormat": 1}, {"label": "CLD_DUMPED", "kind": 6, "sortText": "z", "filterText": "CLD_DUMPED", "insertText": "CLD_DUMPED", "insertTextFormat": 1}, {"label": "CLD_EXITED", "kind": 6, "sortText": "z", "filterText": "CLD_EXITED", "insertText": "CLD_EXITED", "insertTextFormat": 1}, {"label": "CLD_TRAPPED", "kind": 6, "sortText": "z", "filterText": "CLD_TRAPPED", "insertText": "CLD_TRAPPED", "insertTextFormat": 1}, {"label": "close", "kind": 3, "sortText": "z", "filterText": "close", "insertText": "close(${1:fd})$0", "insertTextFormat": 2}, {"label": "closerange", "kind": 3, "sortText": "z", "filterText": "closerange", "insertText": "closerange(${1:fd_low}, ${2:fd_high})$0", "insertTextFormat": 2}, {"label": "confstr", "kind": 3, "sortText": "z", "filterText": "confstr", "insertText": "confstr(${1:name})$0", "insertTextFormat": 2}, {"label": "confstr_names", "kind": 6, "sortText": "z", "filterText": "confstr_names", "insertText": "confstr_names", "insertTextFormat": 1}, {"label": "cpu_count", "kind": 3, "sortText": "z", "filterText": "cpu_count", "insertText": "cpu_count()$0", "insertTextFormat": 2}, {"label": "ctermid", "kind": 3, "sortText": "z", "filterText": "ctermid", "insertText": "ctermid()$0", "insertTextFormat": 2}, {"label": "curdir", "kind": 6, "sortText": "z", "filterText": "curdir", "insertText": "curdir", "insertTextFormat": 1}, {"label": "defpath", "kind": 6, "sortText": "z", "filterText": "defpath", "insertText": "defpath", "insertTextFormat": 1}, {"label": "device_encoding", "kind": 3, "sortText": "z", "filterText": "device_encoding", "insertText": "device_encoding(${1:fd})$0", "insertTextFormat": 2}, {"label": "devnull", "kind": 6, "sortText": "z", "filterText": "devnull", "insertText": "devnull", "insertTextFormat": 1}, {"label": "DirEntry", "kind": 7, "sortText": "z", "filterText": "DirEntry", "insertText": "DirEntry", "insertTextFormat": 1}, {"label": "dup", "kind": 3, "sortText": "z", "filterText": "dup", "insertText": "dup(${1:fd})$0", "insertTextFormat": 2}, {"label": "dup2", "kind": 3, "sortText": "z", "filterText": "dup2", "insertText": "dup2(${1:fd}, ${2:fd2})$0", "insertTextFormat": 2}, {"label": "environ", "kind": 6, "sortText": "z", "filterText": "environ", "insertText": "environ", "insertTextFormat": 1}, {"label": "environb", "kind": 6, "sortText": "z", "filterText": "environb", "insertText": "environb", "insertTextFormat": 1}, {"label": "error", "kind": 7, "sortText": "z", "filterText": "error", "insertText": "error($0)", "insertTextFormat": 2}, {"label": "EX_CANTCREAT", "kind": 6, "sortText": "z", "filterText": "EX_CANTCREAT", "insertText": "EX_CANTCREAT", "insertTextFormat": 1}, {"label": "EX_CONFIG", "kind": 6, "sortText": "z", "filterText": "EX_CONFIG", "insertText": "EX_CONFIG", "insertTextFormat": 1}, {"label": "EX_DATAERR", "kind": 6, "sortText": "z", "filterText": "EX_DATAERR", "insertText": "EX_DATAERR", "insertTextFormat": 1}, {"label": "EX_IOERR", "kind": 6, "sortText": "z", "filterText": "EX_IOERR", "insertText": "EX_IOERR", "insertTextFormat": 1}, {"label": "EX_NOHOST", "kind": 6, "sortText": "z", "filterText": "EX_NOHOST", "insertText": "EX_NOHOST", "insertTextFormat": 1}, {"label": "EX_NOINPUT", "kind": 6, "sortText": "z", "filterText": "EX_NOINPUT", "insertText": "EX_NOINPUT", "insertTextFormat": 1}, {"label": "EX_NOPERM", "kind": 6, "sortText": "z", "filterText": "EX_NOPERM", "insertText": "EX_NOPERM", "insertTextFormat": 1}, {"label": "EX_NOTFOUND", "kind": 6, "sortText": "z", "filterText": "EX_NOTFOUND", "insertText": "EX_NOTFOUND", "insertTextFormat": 1}, {"label": "EX_NOUSER", "kind": 6, "sortText": "z", "filterText": "EX_NOUSER", "insertText": "EX_NOUSER", "insertTextFormat": 1}, {"label": "EX_OK", "kind": 6, "sortText": "z", "filterText": "EX_OK", "insertText": "EX_OK", "insertTextFormat": 1}, {"label": "EX_OSERR", "kind": 6, "sortText": "z", "filterText": "EX_OSERR", "insertText": "EX_OSERR", "insertTextFormat": 1}, {"label": "EX_OSFILE", "kind": 6, "sortText": "z", "filterText": "EX_OSFILE", "insertText": "EX_OSFILE", "insertTextFormat": 1}, {"label": "EX_PROTOCOL", "kind": 6, "sortText": "z", "filterText": "EX_PROTOCOL", "insertText": "EX_PROTOCOL", "insertTextFormat": 1}, {"label": "EX_SOFTWARE", "kind": 6, "sortText": "z", "filterText": "EX_SOFTWARE", "insertText": "EX_SOFTWARE", "insertTextFormat": 1}, {"label": "EX_TEMPFAIL", "kind": 6, "sortText": "z", "filterText": "EX_TEMPFAIL", "insertText": "EX_TEMPFAIL", "insertTextFormat": 1}, {"label": "EX_UNAVAILABLE", "kind": 6, "sortText": "z", "filterText": "EX_UNAVAILABLE", "insertText": "EX_UNAVAILABLE", "insertTextFormat": 1}, {"label": "EX_USAGE", "kind": 6, "sortText": "z", "filterText": "EX_USAGE", "insertText": "EX_USAGE", "insertTextFormat": 1}, {"label": "execl", "kind": 3, "sortText": "z", "filterText": "execl", "insertText": "execl(${1:file}, ${2:arg0})$0", "insertTextFormat": 2}, {"label": "execle", "kind": 3, "sortText": "z", "filterText": "execle", "insertText": "execle(${1:file}, ${2:arg0})$0", "insertTextFormat": 2}, {"label": "execlp", "kind": 3, "sortText": "z", "filterText": "execlp", "insertText": "execlp(${1:file}, ${2:arg0})$0", "insertTextFormat": 2}, {"label": "execlpe", "kind": 3, "sortText": "z", "filterText": "execlpe", "insertText": "execlpe(${1:file}, ${2:arg0})$0", "insertTextFormat": 2}, {"label": "execv", "kind": 3, "sortText": "z", "filterText": "execv", "insertText": "execv(${1:path}, ${2:args})$0", "insertTextFormat": 2}, {"label": "execve", "kind": 3, "sortText": "z", "filterText": "execve", "insertText": "execve(${1:path}, ${2:args}, ${3:env})$0", "insertTextFormat": 2}, {"label": "execvp", "kind": 3, "sortText": "z", "filterText": "execvp", "insertText": "execvp(${1:file}, ${2:args})$0", "insertTextFormat": 2}, {"label": "execvpe", "kind": 3, "sortText": "z", "filterText": "execvpe", "insertText": "execvpe(${1:file}, ${2:args}, ${3:env})$0", "insertTextFormat": 2}, {"label": "extsep", "kind": 6, "sortText": "z", "filterText": "extsep", "insertText": "extsep", "insertTextFormat": 1}, {"label": "F_LOCK", "kind": 6, "sortText": "z", "filterText": "F_LOCK", "insertText": "F_LOCK", "insertTextFormat": 1}, {"label": "F_OK", "kind": 6, "sortText": "z", "filterText": "F_OK", "insertText": "F_OK", "insertTextFormat": 1}, {"label": "F_TEST", "kind": 6, "sortText": "z", "filterText": "F_TEST", "insertText": "F_TEST", "insertTextFormat": 1}, {"label": "F_TLOCK", "kind": 6, "sortText": "z", "filterText": "F_TLOCK", "insertText": "F_TLOCK", "insertTextFormat": 1}, {"label": "F_ULOCK", "kind": 6, "sortText": "z", "filterText": "F_ULOCK", "insertText": "F_ULOCK", "insertTextFormat": 1}, {"label": "fchdir", "kind": 3, "sortText": "z", "filterText": "fchdir", "insertText": "fchdir(${1:fd})$0", "insertTextFormat": 2}, {"label": "fchmod", "kind": 3, "sortText": "z", "filterText": "fchmod", "insertText": "fchmod(${1:fd}, ${2:mode})$0", "insertTextFormat": 2}, {"label": "fchown", "kind": 3, "sortText": "z", "filterText": "fchown", "insertText": "fchown(${1:fd}, ${2:uid}, ${3:gid})$0", "insertTextFormat": 2}, {"label": "fdatasync", "kind": 3, "sortText": "z", "filterText": "fdatasync", "insertText": "fdatasync(${1:fd})$0", "insertTextFormat": 2}, {"label": "fdopen", "kind": 3, "sortText": "z", "filterText": "fdopen", "insertText": "fdopen(${1:fd})$0", "insertTextFormat": 2}, {"label": "fork", "kind": 3, "sortText": "z", "filterText": "fork", "insertText": "fork()$0", "insertTextFormat": 2}, {"label": "forkpty", "kind": 3, "sortText": "z", "filterText": "forkpty", "insertText": "forkpty()$0", "insertTextFormat": 2}, {"label": "fpathconf", "kind": 3, "sortText": "z", "filterText": "fpathconf", "insertText": "fpathconf(${1:fd}, ${2:name})$0", "insertTextFormat": 2}, {"label": "fsdecode", "kind": 3, "sortText": "z", "filterText": "fsdecode", "insertText": "fsdecode(${1:filename})$0", "insertTextFormat": 2}, {"label": "fsencode", "kind": 3, "sortText": "z", "filterText": "fsencode", "insertText": "fsencode(${1:filename})$0", "insertTextFormat": 2}, {"label": "fspath", "kind": 3, "sortText": "z", "filterText": "fspath", "insertText": "fspath(${1:path})$0", "insertTextFormat": 2}, {"label": "fstat", "kind": 3, "sortText": "z", "filterText": "fstat", "insertText": "fstat(${1:fd})$0", "insertTextFormat": 2}, {"label": "fstatvfs", "kind": 3, "sortText": "z", "filterText": "fstatvfs", "insertText": "fstatvfs(${1:fd})$0", "insertTextFormat": 2}, {"label": "fsync", "kind": 3, "sortText": "z", "filterText": "fsync", "insertText": "fsync(${1:fd})$0", "insertTextFormat": 2}, {"label": "ftruncate", "kind": 3, "sortText": "z", "filterText": "ftruncate", "insertText": "ftruncate(${1:fd}, ${2:length})$0", "insertTextFormat": 2}, {"label": "fwalk", "kind": 3, "sortText": "z", "filterText": "fwalk", "insertText": "fwalk($0)", "insertTextFormat": 2}, {"label": "GenericAlias", "kind": 6, "sortText": "z", "filterText": "GenericAlias", "insertText": "GenericAlias", "insertTextFormat": 1}, {"label": "get_blocking", "kind": 3, "sortText": "z", "filterText": "get_blocking", "insertText": "get_blocking(${1:fd})$0", "insertTextFormat": 2}, {"label": "get_exec_path", "kind": 3, "sortText": "z", "filterText": "get_exec_path", "insertText": "get_exec_path($0)", "insertTextFormat": 2}, {"label": "get_inheritable", "kind": 3, "sortText": "z", "filterText": "get_inheritable", "insertText": "get_inheritable(${1:fd})$0", "insertTextFormat": 2}, {"label": "get_terminal_size", "kind": 3, "sortText": "z", "filterText": "get_terminal_size", "insertText": "get_terminal_size($0)", "insertTextFormat": 2}, {"label": "getcwd", "kind": 3, "sortText": "z", "filterText": "getcwd", "insertText": "getcwd()$0", "insertTextFormat": 2}, {"label": "getcwdb", "kind": 3, "sortText": "z", "filterText": "getcwdb", "insertText": "getcwdb()$0", "insertTextFormat": 2}, {"label": "getegid", "kind": 3, "sortText": "z", "filterText": "getegid", "insertText": "getegid()$0", "insertTextFormat": 2}, {"label": "getenv", "kind": 3, "sortText": "z", "filterText": "getenv", "insertText": "getenv(${1:key})$0", "insertTextFormat": 2}, {"label": "getenvb", "kind": 3, "sortText": "z", "filterText": "getenvb", "insertText": "getenvb(${1:key})$0", "insertTextFormat": 2}, {"label": "geteuid", "kind": 3, "sortText": "z", "filterText": "geteuid", "insertText": "geteuid()$0", "insertTextFormat": 2}, {"label": "getgid", "kind": 3, "sortText": "z", "filterText": "getgid", "insertText": "getgid()$0", "insertTextFormat": 2}, {"label": "getgrouplist", "kind": 3, "sortText": "z", "filterText": "getgrouplist", "insertText": "getgrouplist(${1:user}, ${2:gid})$0", "insertTextFormat": 2}, {"label": "getgroups", "kind": 3, "sortText": "z", "filterText": "getgroups", "insertText": "getgroups()$0", "insertTextFormat": 2}, {"label": "getloadavg", "kind": 3, "sortText": "z", "filterText": "getloadavg", "insertText": "getloadavg()$0", "insertTextFormat": 2}, {"label": "getlogin", "kind": 3, "sortText": "z", "filterText": "getlogin", "insertText": "getlogin()$0", "insertTextFormat": 2}, {"label": "getpgid", "kind": 3, "sortText": "z", "filterText": "getpgid", "insertText": "getpgid(${1:pid})$0", "insertTextFormat": 2}, {"label": "getpgrp", "kind": 3, "sortText": "z", "filterText": "getpgrp", "insertText": "getpgrp()$0", "insertTextFormat": 2}, {"label": "getpid", "kind": 3, "sortText": "z", "filterText": "getpid", "insertText": "getpid()$0", "insertTextFormat": 2}, {"label": "getppid", "kind": 3, "sortText": "z", "filterText": "getppid", "insertText": "getppid()$0", "insertTextFormat": 2}, {"label": "getpriority", "kind": 3, "sortText": "z", "filterText": "getpriority", "insertText": "getpriority(${1:which}, ${2:who})$0", "insertTextFormat": 2}, {"label": "getrandom", "kind": 3, "sortText": "z", "filterText": "getrandom", "insertText": "getrandom(${1:size})$0", "insertTextFormat": 2}, {"label": "getresgid", "kind": 3, "sortText": "z", "filterText": "getresgid", "insertText": "getresgid()$0", "insertTextFormat": 2}, {"label": "getresuid", "kind": 3, "sortText": "z", "filterText": "getresuid", "insertText": "getresuid()$0", "insertTextFormat": 2}, {"label": "getsid", "kind": 3, "sortText": "z", "filterText": "getsid", "insertText": "getsid(${1:pid})$0", "insertTextFormat": 2}, {"label": "getuid", "kind": 3, "sortText": "z", "filterText": "getuid", "insertText": "getuid()$0", "insertTextFormat": 2}, {"label": "getxattr", "kind": 3, "sortText": "z", "filterText": "getxattr", "insertText": "getxattr(${1:path}, ${2:attribute})$0", "insertTextFormat": 2}, {"label": "GRND_NONBLOCK", "kind": 6, "sortText": "z", "filterText": "GRND_NONBLOCK", "insertText": "GRND_NONBLOCK", "insertTextFormat": 1}, {"label": "GRND_RANDOM", "kind": 6, "sortText": "z", "filterText": "GRND_RANDOM", "insertText": "GRND_RANDOM", "insertTextFormat": 1}, {"label": "initgroups", "kind": 3, "sortText": "z", "filterText": "initgroups", "insertText": "initgroups(${1:username}, ${2:gid})$0", "insertTextFormat": 2}, {"label": "isatty", "kind": 3, "sortText": "z", "filterText": "isatty", "insertText": "isatty(${1:fd})$0", "insertTextFormat": 2}, {"label": "kill", "kind": 3, "sortText": "z", "filterText": "kill", "insertText": "kill(${1:pid}, ${2:sig})$0", "insertTextFormat": 2}, {"label": "killpg", "kind": 3, "sortText": "z", "filterText": "killpg", "insertText": "killpg(${1:pgid}, ${2:sig})$0", "insertTextFormat": 2}, {"label": "lchflags", "kind": 3, "sortText": "z", "filterText": "lchflags", "insertText": "lchflags(${1:path}, ${2:flags})$0", "insertTextFormat": 2}, {"label": "lchmod", "kind": 3, "sortText": "z", "filterText": "lchmod", "insertText": "lchmod(${1:path}, ${2:mode})$0", "insertTextFormat": 2}, {"label": "lchown", "kind": 3, "sortText": "z", "filterText": "lchown", "insertText": "lchown(${1:path}, ${2:uid}, ${3:gid})$0", "insertTextFormat": 2}, {"label": "linesep", "kind": 6, "sortText": "z", "filterText": "linesep", "insertText": "linesep", "insertTextFormat": 1}, {"label": "link", "kind": 3, "sortText": "z", "filterText": "link", "insertText": "link(${1:src}, ${2:link_name})$0", "insertTextFormat": 2}, {"label": "listdir", "kind": 3, "sortText": "z", "filterText": "listdir", "insertText": "listdir($0)", "insertTextFormat": 2}, {"label": "listxattr", "kind": 3, "sortText": "z", "filterText": "listxattr", "insertText": "listxattr(${1:path})$0", "insertTextFormat": 2}, {"label": "lockf", "kind": 3, "sortText": "z", "filterText": "lockf", "insertText": "lockf(${1:fd}, ${2:cmd}, ${3:length})$0", "insertTextFormat": 2}, {"label": "lseek", "kind": 3, "sortText": "z", "filterText": "lseek", "insertText": "lseek(${1:fd}, ${2:pos}, ${3:how})$0", "insertTextFormat": 2}, {"label": "lstat", "kind": 3, "sortText": "z", "filterText": "lstat", "insertText": "lstat(${1:path})$0", "insertTextFormat": 2}, {"label": "major", "kind": 3, "sortText": "z", "filterText": "major", "insertText": "major(${1:device})$0", "insertTextFormat": 2}, {"label": "makedev", "kind": 3, "sortText": "z", "filterText": "makedev", "insertText": "makedev(${1:major}, ${2:minor})$0", "insertTextFormat": 2}, {"label": "makedirs", "kind": 3, "sortText": "z", "filterText": "makedirs", "insertText": "makedirs(${1:name})$0", "insertTextFormat": 2}, {"label": "Mapping", "kind": 7, "sortText": "z", "filterText": "Mapping", "insertText": "Mapping()$0", "insertTextFormat": 2}, {"label": "memfd_create", "kind": 3, "sortText": "z", "filterText": "memfd_create", "insertText": "memfd_create(${1:name})$0", "insertTextFormat": 2}, {"label": "MFD_ALLOW_SEALING", "kind": 6, "sortText": "z", "filterText": "MFD_ALLOW_SEALING", "insertText": "MFD_ALLOW_SEALING", "insertTextFormat": 1}, {"label": "MFD_CLOEXEC", "kind": 6, "sortText": "z", "filterText": "MFD_CLOEXEC", "insertText": "MFD_CLOEXEC", "insertTextFormat": 1}, {"label": "MFD_HUGE_16GB", "kind": 6, "sortText": "z", "filterText": "MFD_HUGE_16GB", "insertText": "MFD_HUGE_16GB", "insertTextFormat": 1}, {"label": "MFD_HUGE_16MB", "kind": 6, "sortText": "z", "filterText": "MFD_HUGE_16MB", "insertText": "MFD_HUGE_16MB", "insertTextFormat": 1}, {"label": "MFD_HUGE_1GB", "kind": 6, "sortText": "z", "filterText": "MFD_HUGE_1GB", "insertText": "MFD_HUGE_1GB", "insertTextFormat": 1}, {"label": "MFD_HUGE_1MB", "kind": 6, "sortText": "z", "filterText": "MFD_HUGE_1MB", "insertText": "MFD_HUGE_1MB", "insertTextFormat": 1}, {"label": "MFD_HUGE_256MB", "kind": 6, "sortText": "z", "filterText": "MFD_HUGE_256MB", "insertText": "MFD_HUGE_256MB", "insertTextFormat": 1}, {"label": "MFD_HUGE_2GB", "kind": 6, "sortText": "z", "filterText": "MFD_HUGE_2GB", "insertText": "MFD_HUGE_2GB", "insertTextFormat": 1}, {"label": "MFD_HUGE_2MB", "kind": 6, "sortText": "z", "filterText": "MFD_HUGE_2MB", "insertText": "MFD_HUGE_2MB", "insertTextFormat": 1}, {"label": "MFD_HUGE_32MB", "kind": 6, "sortText": "z", "filterText": "MFD_HUGE_32MB", "insertText": "MFD_HUGE_32MB", "insertTextFormat": 1}, {"label": "MFD_HUGE_512KB", "kind": 6, "sortText": "z", "filterText": "MFD_HUGE_512KB", "insertText": "MFD_HUGE_512KB", "insertTextFormat": 1}, {"label": "MFD_HUGE_512MB", "kind": 6, "sortText": "z", "filterText": "MFD_HUGE_512MB", "insertText": "MFD_HUGE_512MB", "insertTextFormat": 1}, {"label": "MFD_HUGE_64KB", "kind": 6, "sortText": "z", "filterText": "MFD_HUGE_64KB", "insertText": "MFD_HUGE_64KB", "insertTextFormat": 1}, {"label": "MFD_HUGE_8MB", "kind": 6, "sortText": "z", "filterText": "MFD_HUGE_8MB", "insertText": "MFD_HUGE_8MB", "insertTextFormat": 1}, {"label": "MFD_HUGE_MASK", "kind": 6, "sortText": "z", "filterText": "MFD_HUGE_MASK", "insertText": "MFD_HUGE_MASK", "insertTextFormat": 1}, {"label": "MFD_HUGE_SHIFT", "kind": 6, "sortText": "z", "filterText": "MFD_HUGE_SHIFT", "insertText": "MFD_HUGE_SHIFT", "insertTextFormat": 1}, {"label": "MFD_HUGETLB", "kind": 6, "sortText": "z", "filterText": "MFD_HUGETLB", "insertText": "MFD_HUGETLB", "insertTextFormat": 1}, {"label": "minor", "kind": 3, "sortText": "z", "filterText": "minor", "insertText": "minor(${1:device})$0", "insertTextFormat": 2}, {"label": "mkdir", "kind": 3, "sortText": "z", "filterText": "mkdir", "insertText": "mkdir(${1:path})$0", "insertTextFormat": 2}, {"label": "mkfifo", "kind": 3, "sortText": "z", "filterText": "mkfifo", "insertText": "mkfifo(${1:path})$0", "insertTextFormat": 2}, {"label": "mknod", "kind": 3, "sortText": "z", "filterText": "mknod", "insertText": "mknod(${1:path})$0", "insertTextFormat": 2}, {"label": "MutableMapping", "kind": 7, "sortText": "z", "filterText": "MutableMapping", "insertText": "MutableMapping()$0", "insertTextFormat": 2}, {"label": "name", "kind": 6, "sortText": "z", "filterText": "name", "insertText": "name", "insertTextFormat": 1}, {"label": "NGROUPS_MAX", "kind": 6, "sortText": "z", "filterText": "NGROUPS_MAX", "insertText": "NGROUPS_MAX", "insertTextFormat": 1}, {"label": "nice", "kind": 3, "sortText": "z", "filterText": "nice", "insertText": "nice(${1:increment})$0", "insertTextFormat": 2}, {"label": "O_ACCMODE", "kind": 6, "sortText": "z", "filterText": "O_ACCMODE", "insertText": "O_ACCMODE", "insertTextFormat": 1}, {"label": "O_APPEND", "kind": 6, "sortText": "z", "filterText": "O_APPEND", "insertText": "O_APPEND", "insertTextFormat": 1}, {"label": "O_ASYNC", "kind": 6, "sortText": "z", "filterText": "O_ASYNC", "insertText": "O_ASYNC", "insertTextFormat": 1}, {"label": "O_BINARY", "kind": 6, "sortText": "z", "filterText": "O_BINARY", "insertText": "O_BINARY", "insertTextFormat": 1}, {"label": "O_CLOEXEC", "kind": 6, "sortText": "z", "filterText": "O_CLOEXEC", "insertText": "O_CLOEXEC", "insertTextFormat": 1}, {"label": "O_CREAT", "kind": 6, "sortText": "z", "filterText": "O_CREAT", "insertText": "O_CREAT", "insertTextFormat": 1}, {"label": "O_DIRECT", "kind": 6, "sortText": "z", "filterText": "O_DIRECT", "insertText": "O_DIRECT", "insertTextFormat": 1}, {"label": "O_DIRECTORY", "kind": 6, "sortText": "z", "filterText": "O_DIRECTORY", "insertText": "O_DIRECTORY", "insertTextFormat": 1}, {"label": "O_DSYNC", "kind": 6, "sortText": "z", "filterText": "O_DSYNC", "insertText": "O_DSYNC", "insertTextFormat": 1}, {"label": "O_EXCL", "kind": 6, "sortText": "z", "filterText": "O_EXCL", "insertText": "O_EXCL", "insertTextFormat": 1}, {"label": "O_EXLOCK", "kind": 6, "sortText": "z", "filterText": "O_EXLOCK", "insertText": "O_EXLOCK", "insertTextFormat": 1}, {"label": "O_LARGEFILE", "kind": 6, "sortText": "z", "filterText": "O_LARGEFILE", "insertText": "O_LARGEFILE", "insertTextFormat": 1}, {"label": "O_NDELAY", "kind": 6, "sortText": "z", "filterText": "O_NDELAY", "insertText": "O_NDELAY", "insertTextFormat": 1}, {"label": "O_NOATIME", "kind": 6, "sortText": "z", "filterText": "O_NOATIME", "insertText": "O_NOATIME", "insertTextFormat": 1}, {"label": "O_NOCTTY", "kind": 6, "sortText": "z", "filterText": "O_NOCTTY", "insertText": "O_NOCTTY", "insertTextFormat": 1}, {"label": "O_NOFOLLOW", "kind": 6, "sortText": "z", "filterText": "O_NOFOLLOW", "insertText": "O_NOFOLLOW", "insertTextFormat": 1}, {"label": "O_NOINHERIT", "kind": 6, "sortText": "z", "filterText": "O_NOINHERIT", "insertText": "O_NOINHERIT", "insertTextFormat": 1}, {"label": "O_NONBLOCK", "kind": 6, "sortText": "z", "filterText": "O_NONBLOCK", "insertText": "O_NONBLOCK", "insertTextFormat": 1}, {"label": "O_PATH", "kind": 6, "sortText": "z", "filterText": "O_PATH", "insertText": "O_PATH", "insertTextFormat": 1}, {"label": "O_RANDOM", "kind": 6, "sortText": "z", "filterText": "O_RANDOM", "insertText": "O_RANDOM", "insertTextFormat": 1}, {"label": "O_RDONLY", "kind": 6, "sortText": "z", "filterText": "O_RDONLY", "insertText": "O_RDONLY", "insertTextFormat": 1}, {"label": "O_RDWR", "kind": 6, "sortText": "z", "filterText": "O_RDWR", "insertText": "O_RDWR", "insertTextFormat": 1}, {"label": "O_RSYNC", "kind": 6, "sortText": "z", "filterText": "O_RSYNC", "insertText": "O_RSYNC", "insertTextFormat": 1}, {"label": "O_SEQUENTIAL", "kind": 6, "sortText": "z", "filterText": "O_SEQUENTIAL", "insertText": "O_SEQUENTIAL", "insertTextFormat": 1}, {"label": "O_SHLOCK", "kind": 6, "sortText": "z", "filterText": "O_SHLOCK", "insertText": "O_SHLOCK", "insertTextFormat": 1}, {"label": "O_SHORT_LIVED", "kind": 6, "sortText": "z", "filterText": "O_SHORT_LIVED", "insertText": "O_SHORT_LIVED", "insertTextFormat": 1}, {"label": "O_SYNC", "kind": 6, "sortText": "z", "filterText": "O_SYNC", "insertText": "O_SYNC", "insertTextFormat": 1}, {"label": "O_TEMPORARY", "kind": 6, "sortText": "z", "filterText": "O_TEMPORARY", "insertText": "O_TEMPORARY", "insertTextFormat": 1}, {"label": "O_TEXT", "kind": 6, "sortText": "z", "filterText": "O_TEXT", "insertText": "O_TEXT", "insertTextFormat": 1}, {"label": "O_TMPFILE", "kind": 6, "sortText": "z", "filterText": "O_TMPFILE", "insertText": "O_TMPFILE", "insertTextFormat": 1}, {"label": "O_TRUNC", "kind": 6, "sortText": "z", "filterText": "O_TRUNC", "insertText": "O_TRUNC", "insertTextFormat": 1}, {"label": "O_WRONLY", "kind": 6, "sortText": "z", "filterText": "O_WRONLY", "insertText": "O_WRONLY", "insertTextFormat": 1}, {"label": "open", "kind": 3, "sortText": "z", "filterText": "open", "insertText": "open(${1:file}, ${2:flags})$0", "insertTextFormat": 2}, {"label": "openpty", "kind": 3, "sortText": "z", "filterText": "openpty", "insertText": "openpty()$0", "insertTextFormat": 2}, {"label": "P_ALL", "kind": 6, "sortText": "z", "filterText": "P_ALL", "insertText": "P_ALL", "insertTextFormat": 1}, {"label": "P_DETACH", "kind": 6, "sortText": "z", "filterText": "P_DETACH", "insertText": "P_DETACH", "insertTextFormat": 1}, {"label": "P_NOWAIT", "kind": 6, "sortText": "z", "filterText": "P_NOWAIT", "insertText": "P_NOWAIT", "insertTextFormat": 1}, {"label": "P_NOWAITO", "kind": 6, "sortText": "z", "filterText": "P_NOWAITO", "insertText": "P_NOWAITO", "insertTextFormat": 1}, {"label": "P_OVERLAY", "kind": 6, "sortText": "z", "filterText": "P_OVERLAY", "insertText": "P_OVERLAY", "insertTextFormat": 1}, {"label": "P_PGID", "kind": 6, "sortText": "z", "filterText": "P_PGID", "insertText": "P_PGID", "insertTextFormat": 1}, {"label": "P_PID", "kind": 6, "sortText": "z", "filterText": "P_PID", "insertText": "P_PID", "insertTextFormat": 1}, {"label": "P_WAIT", "kind": 6, "sortText": "z", "filterText": "P_WAIT", "insertText": "P_WAIT", "insertTextFormat": 1}, {"label": "pardir", "kind": 6, "sortText": "z", "filterText": "pardir", "insertText": "pardir", "insertTextFormat": 1}, {"label": "path", "kind": 9, "sortText": "z", "filterText": "path", "insertText": "path", "insertTextFormat": 1}, {"label": "pathconf", "kind": 3, "sortText": "z", "filterText": "pathconf", "insertText": "pathconf(${1:path}, ${2:name})$0", "insertTextFormat": 2}, {"label": "pathconf_names", "kind": 6, "sortText": "z", "filterText": "pathconf_names", "insertText": "pathconf_names", "insertTextFormat": 1}, {"label": "PathLike", "kind": 9, "sortText": "z", "filterText": "PathLike", "insertText": "PathLike", "insertTextFormat": 1}, {"label": "pathsep", "kind": 6, "sortText": "z", "filterText": "pathsep", "insertText": "pathsep", "insertTextFormat": 1}, {"label": "pipe", "kind": 3, "sortText": "z", "filterText": "pipe", "insertText": "pipe()$0", "insertTextFormat": 2}, {"label": "pipe2", "kind": 3, "sortText": "z", "filterText": "pipe2", "insertText": "pipe2(${1:flags})$0", "insertTextFormat": 2}, {"label": "plock", "kind": 3, "sortText": "z", "filterText": "plock", "insertText": "plock(${1:op})$0", "insertTextFormat": 2}, {"label": "popen", "kind": 3, "sortText": "z", "filterText": "popen", "insertText": "popen(${1:command})$0", "insertTextFormat": 2}, {"label": "POSIX_FADV_DONTNEED", "kind": 6, "sortText": "z", "filterText": "POSIX_FADV_DONTNEED", "insertText": "POSIX_FADV_DONTNEED", "insertTextFormat": 1}, {"label": "POSIX_FADV_NOREUSE", "kind": 6, "sortText": "z", "filterText": "POSIX_FADV_NOREUSE", "insertText": "POSIX_FADV_NOREUSE", "insertTextFormat": 1}, {"label": "POSIX_FADV_NORMAL", "kind": 6, "sortText": "z", "filterText": "POSIX_FADV_NORMAL", "insertText": "POSIX_FADV_NORMAL", "insertTextFormat": 1}, {"label": "POSIX_FADV_RANDOM", "kind": 6, "sortText": "z", "filterText": "POSIX_FADV_RANDOM", "insertText": "POSIX_FADV_RANDOM", "insertTextFormat": 1}, {"label": "POSIX_FADV_SEQUENTIAL", "kind": 6, "sortText": "z", "filterText": "POSIX_FADV_SEQUENTIAL", "insertText": "POSIX_FADV_SEQUENTIAL", "insertTextFormat": 1}, {"label": "POSIX_FADV_WILLNEED", "kind": 6, "sortText": "z", "filterText": "POSIX_FADV_WILLNEED", "insertText": "POSIX_FADV_WILLNEED", "insertTextFormat": 1}, {"label": "posix_fadvise", "kind": 3, "sortText": "z", "filterText": "posix_fadvise", "insertText": "posix_fadvise(${1:fd}, ${2:offset}, ${3:length}, ${4:advice})$0", "insertTextFormat": 2}, {"label": "posix_fallocate", "kind": 3, "sortText": "z", "filterText": "posix_fallocate", "insertText": "posix_fallocate(${1:fd}, ${2:offset}, ${3:length})$0", "insertTextFormat": 2}, {"label": "pread", "kind": 3, "sortText": "z", "filterText": "pread", "insertText": "pread(${1:fd}, ${2:buffersize}, ${3:offset})$0", "insertTextFormat": 2}, {"label": "PRIO_PGRP", "kind": 6, "sortText": "z", "filterText": "PRIO_PGRP", "insertText": "PRIO_PGRP", "insertTextFormat": 1}, {"label": "PRIO_PROCESS", "kind": 6, "sortText": "z", "filterText": "PRIO_PROCESS", "insertText": "PRIO_PROCESS", "insertTextFormat": 1}, {"label": "PRIO_USER", "kind": 6, "sortText": "z", "filterText": "PRIO_USER", "insertText": "PRIO_USER", "insertTextFormat": 1}, {"label": "putenv", "kind": 3, "sortText": "z", "filterText": "putenv", "insertText": "putenv(${1:key}, ${2:value})$0", "insertTextFormat": 2}, {"label": "pwrite", "kind": 3, "sortText": "z", "filterText": "pwrite", "insertText": "pwrite(${1:fd}, ${2:string}, ${3:offset})$0", "insertTextFormat": 2}, {"label": "R_OK", "kind": 6, "sortText": "z", "filterText": "R_OK", "insertText": "R_OK", "insertTextFormat": 1}, {"label": "read", "kind": 3, "sortText": "z", "filterText": "read", "insertText": "read(${1:fd}, ${2:n})$0", "insertTextFormat": 2}, {"label": "readlink", "kind": 3, "sortText": "z", "filterText": "readlink", "insertText": "readlink(${1:path})$0", "insertTextFormat": 2}, {"label": "readv", "kind": 3, "sortText": "z", "filterText": "readv", "insertText": "readv(${1:fd}, ${2:buffers})$0", "insertTextFormat": 2}, {"label": "register_at_fork", "kind": 3, "sortText": "z", "filterText": "register_at_fork", "insertText": "register_at_fork(${1:func}, ${2:when})$0", "insertTextFormat": 2}, {"label": "remove", "kind": 3, "sortText": "z", "filterText": "remove", "insertText": "remove(${1:path})$0", "insertTextFormat": 2}, {"label": "removedirs", "kind": 3, "sortText": "z", "filterText": "removedirs", "insertText": "removedirs(${1:name})$0", "insertTextFormat": 2}, {"label": "removexattr", "kind": 3, "sortText": "z", "filterText": "removexattr", "insertText": "removexattr(${1:path}, ${2:attribute})$0", "insertTextFormat": 2}, {"label": "rename", "kind": 3, "sortText": "z", "filterText": "rename", "insertText": "rename(${1:src}, ${2:dst})$0", "insertTextFormat": 2}, {"label": "renames", "kind": 3, "sortText": "z", "filterText": "renames", "insertText": "renames(${1:old}, ${2:new})$0", "insertTextFormat": 2}, {"label": "replace", "kind": 3, "sortText": "z", "filterText": "replace", "insertText": "replace(${1:src}, ${2:dst})$0", "insertTextFormat": 2}, {"label": "rmdir", "kind": 3, "sortText": "z", "filterText": "rmdir", "insertText": "rmdir(${1:path})$0", "insertTextFormat": 2}, {"label": "RTLD_DEEPBIND", "kind": 6, "sortText": "z", "filterText": "RTLD_DEEPBIND", "insertText": "RTLD_DEEPBIND", "insertTextFormat": 1}, {"label": "RTLD_GLOBAL", "kind": 6, "sortText": "z", "filterText": "RTLD_GLOBAL", "insertText": "RTLD_GLOBAL", "insertTextFormat": 1}, {"label": "RTLD_LAZY", "kind": 6, "sortText": "z", "filterText": "RTLD_LAZY", "insertText": "RTLD_LAZY", "insertTextFormat": 1}, {"label": "RTLD_LOCAL", "kind": 6, "sortText": "z", "filterText": "RTLD_LOCAL", "insertText": "RTLD_LOCAL", "insertTextFormat": 1}, {"label": "RTLD_NODELETE", "kind": 6, "sortText": "z", "filterText": "RTLD_NODELETE", "insertText": "RTLD_NODELETE", "insertTextFormat": 1}, {"label": "RTLD_NOLOAD", "kind": 6, "sortText": "z", "filterText": "RTLD_NOLOAD", "insertText": "RTLD_NOLOAD", "insertTextFormat": 1}, {"label": "RTLD_NOW", "kind": 6, "sortText": "z", "filterText": "RTLD_NOW", "insertText": "RTLD_NOW", "insertTextFormat": 1}, {"label": "scandir", "kind": 3, "sortText": "z", "filterText": "scandir", "insertText": "scandir()$0", "insertTextFormat": 2}, {"label": "SCHED_BATCH", "kind": 6, "sortText": "z", "filterText": "SCHED_BATCH", "insertText": "SCHED_BATCH", "insertTextFormat": 1}, {"label": "SCHED_FIFO", "kind": 6, "sortText": "z", "filterText": "SCHED_FIFO", "insertText": "SCHED_FIFO", "insertTextFormat": 1}, {"label": "sched_get_priority_max", "kind": 3, "sortText": "z", "filterText": "sched_get_priority_max", "insertText": "sched_get_priority_max(${1:policy})$0", "insertTextFormat": 2}, {"label": "sched_get_priority_min", "kind": 3, "sortText": "z", "filterText": "sched_get_priority_min", "insertText": "sched_get_priority_min(${1:policy})$0", "insertTextFormat": 2}, {"label": "sched_getaffinity", "kind": 3, "sortText": "z", "filterText": "sched_getaffinity", "insertText": "sched_getaffinity(${1:pid})$0", "insertTextFormat": 2}, {"label": "sched_getparam", "kind": 3, "sortText": "z", "filterText": "sched_getparam", "insertText": "sched_getparam(${1:pid})$0", "insertTextFormat": 2}, {"label": "sched_getscheduler", "kind": 3, "sortText": "z", "filterText": "sched_getscheduler", "insertText": "sched_getscheduler(${1:pid})$0", "insertTextFormat": 2}, {"label": "SCHED_IDLE", "kind": 6, "sortText": "z", "filterText": "SCHED_IDLE", "insertText": "SCHED_IDLE", "insertTextFormat": 1}, {"label": "SCHED_OTHER", "kind": 6, "sortText": "z", "filterText": "SCHED_OTHER", "insertText": "SCHED_OTHER", "insertTextFormat": 1}, {"label": "sched_param", "kind": 7, "sortText": "z", "filterText": "sched_param", "insertText": "sched_param(${1:typename})$0", "insertTextFormat": 2}, {"label": "SCHED_RESET_ON_FORK", "kind": 6, "sortText": "z", "filterText": "SCHED_RESET_ON_FORK", "insertText": "SCHED_RESET_ON_FORK", "insertTextFormat": 1}, {"label": "SCHED_RR", "kind": 6, "sortText": "z", "filterText": "SCHED_RR", "insertText": "SCHED_RR", "insertTextFormat": 1}, {"label": "sched_rr_get_interval", "kind": 3, "sortText": "z", "filterText": "sched_rr_get_interval", "insertText": "sched_rr_get_interval(${1:pid})$0", "insertTextFormat": 2}, {"label": "sched_setaffinity", "kind": 3, "sortText": "z", "filterText": "sched_setaffinity", "insertText": "sched_setaffinity(${1:pid}, ${2:mask})$0", "insertTextFormat": 2}, {"label": "sched_setparam", "kind": 3, "sortText": "z", "filterText": "sched_setparam", "insertText": "sched_setparam(${1:pid}, ${2:param})$0", "insertTextFormat": 2}, {"label": "sched_setscheduler", "kind": 3, "sortText": "z", "filterText": "sched_setscheduler", "insertText": "sched_setscheduler(${1:pid}, ${2:policy}, ${3:param})$0", "insertTextFormat": 2}, {"label": "SCHED_SPORADIC", "kind": 6, "sortText": "z", "filterText": "SCHED_SPORADIC", "insertText": "SCHED_SPORADIC", "insertTextFormat": 1}, {"label": "sched_yield", "kind": 3, "sortText": "z", "filterText": "sched_yield", "insertText": "sched_yield()$0", "insertTextFormat": 2}, {"label": "SEEK_CUR", "kind": 6, "sortText": "z", "filterText": "SEEK_CUR", "insertText": "SEEK_CUR", "insertTextFormat": 1}, {"label": "SEEK_DATA", "kind": 6, "sortText": "z", "filterText": "SEEK_DATA", "insertText": "SEEK_DATA", "insertTextFormat": 1}, {"label": "SEEK_END", "kind": 6, "sortText": "z", "filterText": "SEEK_END", "insertText": "SEEK_END", "insertTextFormat": 1}, {"label": "SEEK_HOLE", "kind": 6, "sortText": "z", "filterText": "SEEK_HOLE", "insertText": "SEEK_HOLE", "insertTextFormat": 1}, {"label": "SEEK_SET", "kind": 6, "sortText": "z", "filterText": "SEEK_SET", "insertText": "SEEK_SET", "insertTextFormat": 1}, {"label": "sendfile", "kind": 3, "sortText": "z", "filterText": "sendfile", "insertText": "sendfile(${1:out_fd}, ${2:in_fd}, ${3:offset}, ${4:count})$0", "insertTextFormat": 2}, {"label": "sep", "kind": 6, "sortText": "z", "filterText": "sep", "insertText": "sep", "insertTextFormat": 1}, {"label": "set_blocking", "kind": 3, "sortText": "z", "filterText": "set_blocking", "insertText": "set_blocking(${1:fd}, ${2:blocking})$0", "insertTextFormat": 2}, {"label": "set_inheritable", "kind": 3, "sortText": "z", "filterText": "set_inheritable", "insertText": "set_inheritable(${1:fd}, ${2:inheritable})$0", "insertTextFormat": 2}, {"label": "setegid", "kind": 3, "sortText": "z", "filterText": "setegid", "insertText": "setegid(${1:egid})$0", "insertTextFormat": 2}, {"label": "seteuid", "kind": 3, "sortText": "z", "filterText": "seteuid", "insertText": "seteuid(${1:euid})$0", "insertTextFormat": 2}, {"label": "setgid", "kind": 3, "sortText": "z", "filterText": "setgid", "insertText": "setgid(${1:gid})$0", "insertTextFormat": 2}, {"label": "setgroups", "kind": 3, "sortText": "z", "filterText": "setgroups", "insertText": "setgroups(${1:groups})$0", "insertTextFormat": 2}, {"label": "setpgid", "kind": 3, "sortText": "z", "filterText": "setpgid", "insertText": "setpgid(${1:pid}, ${2:pgrp})$0", "insertTextFormat": 2}, {"label": "setpgrp", "kind": 3, "sortText": "z", "filterText": "setpgrp", "insertText": "setpgrp()$0", "insertTextFormat": 2}, {"label": "setpriority", "kind": 3, "sortText": "z", "filterText": "setpriority", "insertText": "setpriority(${1:which}, ${2:who}, ${3:priority})$0", "insertTextFormat": 2}, {"label": "setregid", "kind": 3, "sortText": "z", "filterText": "setregid", "insertText": "setregid(${1:rgid}, ${2:egid})$0", "insertTextFormat": 2}, {"label": "setresgid", "kind": 3, "sortText": "z", "filterText": "setresgid", "insertText": "setresgid(${1:rgid}, ${2:egid}, ${3:sgid})$0", "insertTextFormat": 2}, {"label": "setresuid", "kind": 3, "sortText": "z", "filterText": "setresuid", "insertText": "setresuid(${1:ruid}, ${2:euid}, ${3:suid})$0", "insertTextFormat": 2}, {"label": "setreuid", "kind": 3, "sortText": "z", "filterText": "setreuid", "insertText": "setreuid(${1:ruid}, ${2:euid})$0", "insertTextFormat": 2}, {"label": "setsid", "kind": 3, "sortText": "z", "filterText": "setsid", "insertText": "setsid()$0", "insertTextFormat": 2}, {"label": "setuid", "kind": 3, "sortText": "z", "filterText": "setuid", "insertText": "setuid(${1:uid})$0", "insertTextFormat": 2}, {"label": "setxattr", "kind": 3, "sortText": "z", "filterText": "setxattr", "insertText": "setxattr(${1:path}, ${2:attribute}, ${3:value})$0", "insertTextFormat": 2}, {"label": "SF_MNOWAIT", "kind": 6, "sortText": "z", "filterText": "SF_MNOWAIT", "insertText": "SF_MNOWAIT", "insertTextFormat": 1}, {"label": "SF_NODISKIO", "kind": 6, "sortText": "z", "filterText": "SF_NODISKIO", "insertText": "SF_NODISKIO", "insertTextFormat": 1}, {"label": "SF_SYNC", "kind": 6, "sortText": "z", "filterText": "SF_SYNC", "insertText": "SF_SYNC", "insertTextFormat": 1}, {"label": "spawnl", "kind": 3, "sortText": "z", "filterText": "spawnl", "insertText": "spawnl(${1:mode}, ${2:path}, ${3:arg0})$0", "insertTextFormat": 2}, {"label": "spawnle", "kind": 3, "sortText": "z", "filterText": "spawnle", "insertText": "spawnle(${1:mode}, ${2:path}, ${3:arg0})$0", "insertTextFormat": 2}, {"label": "spawnlp", "kind": 3, "sortText": "z", "filterText": "spawnlp", "insertText": "spawnlp(${1:mode}, ${2:file}, ${3:arg0})$0", "insertTextFormat": 2}, {"label": "spawnlpe", "kind": 3, "sortText": "z", "filterText": "spawnlpe", "insertText": "spawnlpe(${1:mode}, ${2:file}, ${3:arg0})$0", "insertTextFormat": 2}, {"label": "spawnv", "kind": 3, "sortText": "z", "filterText": "spawnv", "insertText": "spawnv(${1:mode}, ${2:path}, ${3:args})$0", "insertTextFormat": 2}, {"label": "spawnve", "kind": 3, "sortText": "z", "filterText": "spawnve", "insertText": "spawnve(${1:mode}, ${2:path}, ${3:args}, ${4:env})$0", "insertTextFormat": 2}, {"label": "spawnvp", "kind": 3, "sortText": "z", "filterText": "spawnvp", "insertText": "spawnvp(${1:mode}, ${2:file}, ${3:args})$0", "insertTextFormat": 2}, {"label": "spawnvpe", "kind": 3, "sortText": "z", "filterText": "spawnvpe", "insertText": "spawnvpe(${1:mode}, ${2:file}, ${3:args}, ${4:env})$0", "insertTextFormat": 2}, {"label": "st", "kind": 9, "sortText": "z", "filterText": "st", "insertText": "st", "insertTextFormat": 1}, {"label": "ST_APPEND", "kind": 6, "sortText": "z", "filterText": "ST_APPEND", "insertText": "ST_APPEND", "insertTextFormat": 1}, {"label": "ST_MANDLOCK", "kind": 6, "sortText": "z", "filterText": "ST_MANDLOCK", "insertText": "ST_MANDLOCK", "insertTextFormat": 1}, {"label": "ST_NOATIME", "kind": 6, "sortText": "z", "filterText": "ST_NOATIME", "insertText": "ST_NOATIME", "insertTextFormat": 1}, {"label": "ST_NODEV", "kind": 6, "sortText": "z", "filterText": "ST_NODEV", "insertText": "ST_NODEV", "insertTextFormat": 1}, {"label": "ST_NODIRATIME", "kind": 6, "sortText": "z", "filterText": "ST_NODIRATIME", "insertText": "ST_NODIRATIME", "insertTextFormat": 1}, {"label": "ST_NOEXEC", "kind": 6, "sortText": "z", "filterText": "ST_NOEXEC", "insertText": "ST_NOEXEC", "insertTextFormat": 1}, {"label": "ST_NOSUID", "kind": 6, "sortText": "z", "filterText": "ST_NOSUID", "insertText": "ST_NOSUID", "insertTextFormat": 1}, {"label": "ST_RDONLY", "kind": 6, "sortText": "z", "filterText": "ST_RDONLY", "insertText": "ST_RDONLY", "insertTextFormat": 1}, {"label": "ST_RELATIME", "kind": 6, "sortText": "z", "filterText": "ST_RELATIME", "insertText": "ST_RELATIME", "insertTextFormat": 1}, {"label": "ST_SYNCHRONOUS", "kind": 6, "sortText": "z", "filterText": "ST_SYNCHRONOUS", "insertText": "ST_SYNCHRONOUS", "insertTextFormat": 1}, {"label": "ST_WRITE", "kind": 6, "sortText": "z", "filterText": "ST_WRITE", "insertText": "ST_WRITE", "insertTextFormat": 1}, {"label": "startfile", "kind": 3, "sortText": "z", "filterText": "startfile", "insertText": "startfile(${1:path})$0", "insertTextFormat": 2}, {"label": "stat", "kind": 3, "sortText": "z", "filterText": "stat", "insertText": "stat(${1:path})$0", "insertTextFormat": 2}, {"label": "stat_result", "kind": 7, "sortText": "z", "filterText": "stat_result", "insertText": "stat_result(${1:tuple})$0", "insertTextFormat": 2}, {"label": "statvfs", "kind": 3, "sortText": "z", "filterText": "statvfs", "insertText": "statvfs(${1:path})$0", "insertTextFormat": 2}, {"label": "statvfs_result", "kind": 7, "sortText": "z", "filterText": "statvfs_result", "insertText": "statvfs_result()$0", "insertTextFormat": 2}, {"label": "strerror", "kind": 3, "sortText": "z", "filterText": "strerror", "insertText": "strerror(${1:code})$0", "insertTextFormat": 2}, {"label": "supports_bytes_environ", "kind": 6, "sortText": "z", "filterText": "supports_bytes_environ", "insertText": "supports_bytes_environ", "insertTextFormat": 1}, {"label": "supports_dir_fd", "kind": 6, "sortText": "z", "filterText": "supports_dir_fd", "insertText": "supports_dir_fd", "insertTextFormat": 1}, {"label": "supports_effective_ids", "kind": 6, "sortText": "z", "filterText": "supports_effective_ids", "insertText": "supports_effective_ids", "insertTextFormat": 1}, {"label": "supports_fd", "kind": 6, "sortText": "z", "filterText": "supports_fd", "insertText": "supports_fd", "insertTextFormat": 1}, {"label": "supports_follow_symlinks", "kind": 6, "sortText": "z", "filterText": "supports_follow_symlinks", "insertText": "supports_follow_symlinks", "insertTextFormat": 1}, {"label": "symlink", "kind": 3, "sortText": "z", "filterText": "symlink", "insertText": "symlink(${1:source}, ${2:link_name})$0", "insertTextFormat": 2}, {"label": "sync", "kind": 3, "sortText": "z", "filterText": "sync", "insertText": "sync()$0", "insertTextFormat": 2}, {"label": "sys", "kind": 9, "sortText": "z", "filterText": "sys", "insertText": "sys", "insertTextFormat": 1}, {"label": "sysconf", "kind": 3, "sortText": "z", "filterText": "sysconf", "insertText": "sysconf(${1:name})$0", "insertTextFormat": 2}, {"label": "sysconf_names", "kind": 6, "sortText": "z", "filterText": "sysconf_names", "insertText": "sysconf_names", "insertTextFormat": 1}, {"label": "system", "kind": 3, "sortText": "z", "filterText": "system", "insertText": "system(${1:command})$0", "insertTextFormat": 2}, {"label": "tcgetpgrp", "kind": 3, "sortText": "z", "filterText": "tcgetpgrp", "insertText": "tcgetpgrp(${1:fd})$0", "insertTextFormat": 2}, {"label": "tcsetpgrp", "kind": 3, "sortText": "z", "filterText": "tcsetpgrp", "insertText": "tcsetpgrp(${1:fd}, ${2:pg})$0", "insertTextFormat": 2}, {"label": "terminal_size", "kind": 7, "sortText": "z", "filterText": "terminal_size", "insertText": "terminal_size()$0", "insertTextFormat": 2}, {"label": "times", "kind": 3, "sortText": "z", "filterText": "times", "insertText": "times()$0", "insertTextFormat": 2}, {"label": "times_result", "kind": 7, "sortText": "z", "filterText": "times_result", "insertText": "times_result(${1:typename})$0", "insertTextFormat": 2}, {"label": "TMP_MAX", "kind": 6, "sortText": "z", "filterText": "TMP_MAX", "insertText": "TMP_MAX", "insertTextFormat": 1}, {"label": "truncate", "kind": 3, "sortText": "z", "filterText": "truncate", "insertText": "truncate(${1:path}, ${2:length})$0", "insertTextFormat": 2}, {"label": "ttyname", "kind": 3, "sortText": "z", "filterText": "ttyname", "insertText": "ttyname(${1:fd})$0", "insertTextFormat": 2}, {"label": "umask", "kind": 3, "sortText": "z", "filterText": "umask", "insertText": "umask(${1:mask})$0", "insertTextFormat": 2}, {"label": "uname", "kind": 3, "sortText": "z", "filterText": "uname", "insertText": "uname()$0", "insertTextFormat": 2}, {"label": "uname_result", "kind": 7, "sortText": "z", "filterText": "uname_result", "insertText": "uname_result(${1:typename})$0", "insertTextFormat": 2}, {"label": "unlink", "kind": 3, "sortText": "z", "filterText": "unlink", "insertText": "unlink(${1:path})$0", "insertTextFormat": 2}, {"label": "unsetenv", "kind": 3, "sortText": "z", "filterText": "unsetenv", "insertText": "unsetenv(${1:key})$0", "insertTextFormat": 2}, {"label": "urandom", "kind": 3, "sortText": "z", "filterText": "urandom", "insertText": "urandom(${1:size})$0", "insertTextFormat": 2}, {"label": "utime", "kind": 3, "sortText": "z", "filterText": "utime", "insertText": "utime(${1:path})$0", "insertTextFormat": 2}, {"label": "W_OK", "kind": 6, "sortText": "z", "filterText": "W_OK", "insertText": "W_OK", "insertTextFormat": 1}, {"label": "wait", "kind": 3, "sortText": "z", "filterText": "wait", "insertText": "wait()$0", "insertTextFormat": 2}, {"label": "wait3", "kind": 3, "sortText": "z", "filterText": "wait3", "insertText": "wait3(${1:options})$0", "insertTextFormat": 2}, {"label": "wait4", "kind": 3, "sortText": "z", "filterText": "wait4", "insertText": "wait4(${1:pid}, ${2:options})$0", "insertTextFormat": 2}, {"label": "waitid", "kind": 3, "sortText": "z", "filterText": "waitid", "insertText": "waitid(${1:idtype}, ${2:ident}, ${3:options})$0", "insertTextFormat": 2}, {"label": "waitid_result", "kind": 7, "sortText": "z", "filterText": "waitid_result", "insertText": "waitid_result(${1:typename})$0", "insertTextFormat": 2}, {"label": "waitpid", "kind": 3, "sortText": "z", "filterText": "waitpid", "insertText": "waitpid(${1:pid}, ${2:options})$0", "insertTextFormat": 2}, {"label": "walk", "kind": 3, "sortText": "z", "filterText": "walk", "insertText": "walk(${1:top})$0", "insertTextFormat": 2}, {"label": "WCONTINUED", "kind": 6, "sortText": "z", "filterText": "WCONTINUED", "insertText": "WCONTINUED", "insertTextFormat": 1}, {"label": "WCOREDUMP", "kind": 3, "sortText": "z", "filterText": "WCOREDUMP", "insertText": "WCOREDUMP(${1:status})$0", "insertTextFormat": 2}, {"label": "WEXITED", "kind": 6, "sortText": "z", "filterText": "WEXITED", "insertText": "WEXITED", "insertTextFormat": 1}, {"label": "WEXITSTATUS", "kind": 3, "sortText": "z", "filterText": "WEXITSTATUS", "insertText": "WEXITSTATUS(${1:status})$0", "insertTextFormat": 2}, {"label": "WIFCONTINUED", "kind": 3, "sortText": "z", "filterText": "WIFCONTINUED", "insertText": "WIFCONTINUED(${1:status})$0", "insertTextFormat": 2}, {"label": "WIFEXITED", "kind": 3, "sortText": "z", "filterText": "WIFEXITED", "insertText": "WIFEXITED(${1:status})$0", "insertTextFormat": 2}, {"label": "WIFSIGNALED", "kind": 3, "sortText": "z", "filterText": "WIFSIGNALED", "insertText": "WIFSIGNALED(${1:status})$0", "insertTextFormat": 2}, {"label": "WIFSTOPPED", "kind": 3, "sortText": "z", "filterText": "WIFSTOPPED", "insertText": "WIFSTOPPED(${1:status})$0", "insertTextFormat": 2}, {"label": "WNOHANG", "kind": 6, "sortText": "z", "filterText": "WNOHANG", "insertText": "WNOHANG", "insertTextFormat": 1}, {"label": "WNOWAIT", "kind": 6, "sortText": "z", "filterText": "WNOWAIT", "insertText": "WNOWAIT", "insertTextFormat": 1}, {"label": "write", "kind": 3, "sortText": "z", "filterText": "write", "insertText": "write(${1:fd}, ${2:string})$0", "insertTextFormat": 2}, {"label": "writev", "kind": 3, "sortText": "z", "filterText": "writev", "insertText": "writev(${1:fd}, ${2:buffers})$0", "insertTextFormat": 2}, {"label": "WSTOPPED", "kind": 6, "sortText": "z", "filterText": "WSTOPPED", "insertText": "WSTOPPED", "insertTextFormat": 1}, {"label": "WSTOPSIG", "kind": 3, "sortText": "z", "filterText": "WSTOPSIG", "insertText": "WSTOPSIG(${1:status})$0", "insertTextFormat": 2}, {"label": "WTERMSIG", "kind": 3, "sortText": "z", "filterText": "WTERMSIG", "insertText": "WTERMSIG(${1:status})$0", "insertTextFormat": 2}, {"label": "WUNTRACED", "kind": 6, "sortText": "z", "filterText": "WUNTRACED", "insertText": "WUNTRACED", "insertTextFormat": 1}, {"label": "X_OK", "kind": 6, "sortText": "z", "filterText": "X_OK", "insertText": "X_OK", "insertTextFormat": 1}, {"label": "XATTR_CREATE", "kind": 6, "sortText": "z", "filterText": "XATTR_CREATE", "insertText": "XATTR_CREATE", "insertTextFormat": 1}, {"label": "XATTR_REPLACE", "kind": 6, "sortText": "z", "filterText": "XATTR_REPLACE", "insertText": "XATTR_REPLACE", "insertTextFormat": 1}, {"label": "XATTR_SIZE_MAX", "kind": 6, "sortText": "z", "filterText": "XATTR_SIZE_MAX", "insertText": "XATTR_SIZE_MAX", "insertTextFormat": 1}, {"label": "_AddedDllDirectory", "kind": 7, "sortText": "z", "filterText": "_AddedDllDirectory", "insertText": "_AddedDllDirectory(${1:path}, ${2:cookie}, ${3:remove_dll_directory})$0", "insertTextFormat": 2}, {"label": "_check_methods", "kind": 3, "sortText": "z", "filterText": "_check_methods", "insertText": "_check_methods(${1:C})$0", "insertTextFormat": 2}, {"label": "_Environ", "kind": 7, "sortText": "z", "filterText": "_Environ", "insertText": "_Environ(${1:data}, ${2:encodekey}, ${3:decodekey}, ${4:encodevalue}, ${5:decodevalue})$0", "insertTextFormat": 2}, {"label": "_execvpe", "kind": 3, "sortText": "z", "filterText": "_execvpe", "insertText": "_execvpe(${1:file}, ${2:args})$0", "insertTextFormat": 2}, {"label": "_exists", "kind": 3, "sortText": "z", "filterText": "_exists", "insertText": "_exists(${1:name})$0", "insertTextFormat": 2}, {"label": "_exit", "kind": 9, "sortText": "z", "filterText": "_exit", "insertText": "_exit", "insertTextFormat": 1}, {"label": "_fspath", "kind": 3, "sortText": "z", "filterText": "_fspath", "insertText": "_fspath(${1:path})$0", "insertTextFormat": 2}, {"label": "_fwalk", "kind": 3, "sortText": "z", "filterText": "_fwalk", "insertText": "_fwalk(${1:topfd}, ${2:toppath}, ${3:isbytes}, ${4:topdown}, ${5:onerror}, ${6:follow_symlinks})$0", "insertTextFormat": 2}, {"label": "_get_exports_list", "kind": 3, "sortText": "z", "filterText": "_get_exports_list", "insertText": "_get_exports_list(${1:module})$0", "insertTextFormat": 2}, {"label": "_spawnvef", "kind": 3, "sortText": "z", "filterText": "_spawnvef", "insertText": "_spawnvef(${1:mode}, ${2:file}, ${3:args}, ${4:env}, ${5:func})$0", "insertTextFormat": 2}, {"label": "_walk", "kind": 3, "sortText": "z", "filterText": "_walk", "insertText": "_walk(${1:top}, ${2:topdown}, ${3:onerror}, ${4:followlinks})$0", "insertTextFormat": 2}, {"label": "_wrap_close", "kind": 7, "sortText": "z", "filterText": "_wrap_close", "insertText": "_wrap_close(${1:stream}, ${2:proc})$0", "insertTextFormat": 2}, {"label": "__all__", "kind": 6, "sortText": "z", "filterText": "__all__", "insertText": "__all__", "insertTextFormat": 1}, {"label": "__doc__", "kind": 6, "sortText": "z", "filterText": "__doc__", "insertText": "__doc__", "insertTextFormat": 1}, {"label": "__file__", "kind": 6, "sortText": "z", "filterText": "__file__", "insertText": "__file__", "insertTextFormat": 1}, {"label": "__name__", "kind": 6, "sortText": "z", "filterText": "__name__", "insertText": "__name__", "insertTextFormat": 1}, {"label": "__package__", "kind": 6, "sortText": "z", "filterText": "__package__", "insertText": "__package__", "insertTextFormat": 1}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 694, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 695, "result": {"label": "CLD_CONTINUED", "kind": 6, "detail": "CLD_CONTINUED: int", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "CLD_CONTINUED", "insertText": "CLD_CONTINUED", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 696, "result": {"label": "pardir", "kind": 6, "detail": "pardir: str", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "pardir", "insertText": "pardir", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 697, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 698, "result": {"label": "path", "kind": 9, "detail": "module path", "documentation": {"kind": "markdown", "value": "```text\nCommon operations on Posix pathnames.\n\nInstead of importing this module directly, import os and refer to\nthis module as os.path.  The \"os.path\" name is an alias for this\nmodule on Posix systems; on other systems (e.g. Windows),\nos.path provides the same operations in a manner specific to that\nplatform, and is an alias to another module (e.g. ntpath).\n\nSome of this can actually be useful on non-Posix systems too, e.g.\nfor manipulation of the pathname component of URLs.\n------------------------------\nCommon pathname manipulations, WindowsNT/95 version.\n\nInstead of importing this module directly, import os and refer to this\nmodule as os.path.\n```"}, "sortText": "z", "filterText": "path", "insertText": "path", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 699, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 700, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 18}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 3, "character": 19}, "end": {"line": 4, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 701, "result": {"isIncomplete": false, "items": [{"label": "abspath", "kind": 3, "sortText": "z", "filterText": "abspath", "insertText": "abspath(${1:path})$0", "insertTextFormat": 2}, {"label": "altsep", "kind": 6, "sortText": "z", "filterText": "altsep", "insertText": "altsep", "insertTextFormat": 1}, {"label": "basename", "kind": 3, "sortText": "z", "filterText": "basename", "insertText": "basename(${1:path})$0", "insertTextFormat": 2}, {"label": "commonpath", "kind": 3, "sortText": "z", "filterText": "commonpath", "insertText": "commonpath(${1:paths})$0", "insertTextFormat": 2}, {"label": "commonprefix", "kind": 3, "sortText": "z", "filterText": "commonprefix", "insertText": "commonprefix(${1:list})$0", "insertTextFormat": 2}, {"label": "curdir", "kind": 6, "sortText": "z", "filterText": "curdir", "insertText": "curdir", "insertTextFormat": 1}, {"label": "defpath", "kind": 6, "sortText": "z", "filterText": "defpath", "insertText": "defpath", "insertTextFormat": 1}, {"label": "devnull", "kind": 6, "sortText": "z", "filterText": "devnull", "insertText": "devnull", "insertTextFormat": 1}, {"label": "dirname", "kind": 3, "sortText": "z", "filterText": "dirname", "insertText": "dirname(${1:path})$0", "insertTextFormat": 2}, {"label": "exists", "kind": 3, "sortText": "z", "filterText": "exists", "insertText": "exists(${1:path})$0", "insertTextFormat": 2}, {"label": "expanduser", "kind": 3, "sortText": "z", "filterText": "expanduser", "insertText": "expanduser(${1:path})$0", "insertTextFormat": 2}, {"label": "expandvars", "kind": 3, "sortText": "z", "filterText": "expandvars", "insertText": "expandvars(${1:path})$0", "insertTextFormat": 2}, {"label": "extsep", "kind": 6, "sortText": "z", "filterText": "extsep", "insertText": "extsep", "insertTextFormat": 1}, {"label": "genericpath", "kind": 9, "sortText": "z", "filterText": "genericpath", "insertText": "genericpath", "insertTextFormat": 1}, {"label": "getatime", "kind": 3, "sortText": "z", "filterText": "getatime", "insertText": "getatime(${1:path})$0", "insertTextFormat": 2}, {"label": "getctime", "kind": 3, "sortText": "z", "filterText": "getctime", "insertText": "getctime(${1:path})$0", "insertTextFormat": 2}, {"label": "getmtime", "kind": 3, "sortText": "z", "filterText": "getmtime", "insertText": "getmtime(${1:path})$0", "insertTextFormat": 2}, {"label": "getsize", "kind": 3, "sortText": "z", "filterText": "getsize", "insertText": "getsize(${1:path})$0", "insertTextFormat": 2}, {"label": "isabs", "kind": 3, "sortText": "z", "filterText": "isabs", "insertText": "isabs(${1:path})$0", "insertTextFormat": 2}, {"label": "isdir", "kind": 3, "sortText": "z", "filterText": "isdir", "insertText": "isdir(${1:path})$0", "insertTextFormat": 2}, {"label": "isfile", "kind": 3, "sortText": "z", "filterText": "isfile", "insertText": "isfile(${1:path})$0", "insertTextFormat": 2}, {"label": "islink", "kind": 3, "sortText": "z", "filterText": "islink", "insertText": "islink(${1:path})$0", "insertTextFormat": 2}, {"label": "ismount", "kind": 3, "sortText": "z", "filterText": "ismount", "insertText": "ismount(${1:path})$0", "insertTextFormat": 2}, {"label": "join", "kind": 3, "sortText": "z", "filterText": "join", "insertText": "join(${1:path})$0", "insertTextFormat": 2}, {"label": "lexists", "kind": 3, "sortText": "z", "filterText": "lexists", "insertText": "lexists(${1:path})$0", "insertTextFormat": 2}, {"label": "normcase", "kind": 3, "sortText": "z", "filterText": "normcase", "insertText": "normcase(${1:path})$0", "insertTextFormat": 2}, {"label": "normpath", "kind": 3, "sortText": "z", "filterText": "normpath", "insertText": "normpath(${1:path})$0", "insertTextFormat": 2}, {"label": "os", "kind": 9, "sortText": "z", "filterText": "os", "insertText": "os", "insertTextFormat": 1}, {"label": "pardir", "kind": 6, "sortText": "z", "filterText": "pardir", "insertText": "pardir", "insertTextFormat": 1}, {"label": "pathsep", "kind": 6, "sortText": "z", "filterText": "pathsep", "insertText": "pathsep", "insertTextFormat": 1}, {"label": "realpath", "kind": 3, "sortText": "z", "filterText": "realpath", "insertText": "realpath(${1:path})$0", "insertTextFormat": 2}, {"label": "relpath", "kind": 3, "sortText": "z", "filterText": "relpath", "insertText": "relpath(${1:path})$0", "insertTextFormat": 2}, {"label": "samefile", "kind": 3, "sortText": "z", "filterText": "samefile", "insertText": "samefile(${1:path1}, ${2:path2})$0", "insertTextFormat": 2}, {"label": "sameopenfile", "kind": 3, "sortText": "z", "filterText": "sameopenfile", "insertText": "sameopenfile(${1:fp1}, ${2:fp2})$0", "insertTextFormat": 2}, {"label": "samestat", "kind": 3, "sortText": "z", "filterText": "samestat", "insertText": "samestat(${1:stat1}, ${2:stat2})$0", "insertTextFormat": 2}, {"label": "sep", "kind": 6, "sortText": "z", "filterText": "sep", "insertText": "sep", "insertTextFormat": 1}, {"label": "split", "kind": 3, "sortText": "z", "filterText": "split", "insertText": "split(${1:path})$0", "insertTextFormat": 2}, {"label": "splitdrive", "kind": 3, "sortText": "z", "filterText": "splitdrive", "insertText": "splitdrive(${1:path})$0", "insertTextFormat": 2}, {"label": "splitext", "kind": 3, "sortText": "z", "filterText": "splitext", "insertText": "splitext(${1:path})$0", "insertTextFormat": 2}, {"label": "splitunc", "kind": 3, "sortText": "z", "filterText": "splitunc", "insertText": "splitunc(${1:path})$0", "insertTextFormat": 2}, {"label": "stat", "kind": 9, "sortText": "z", "filterText": "stat", "insertText": "stat", "insertTextFormat": 1}, {"label": "supports_unicode_filenames", "kind": 6, "sortText": "z", "filterText": "supports_unicode_filenames", "insertText": "supports_unicode_filenames", "insertTextFormat": 1}, {"label": "sys", "kind": 9, "sortText": "z", "filterText": "sys", "insertText": "sys", "insertTextFormat": 1}, {"label": "_abspath_fallback", "kind": 3, "sortText": "z", "filterText": "_abspath_fallback", "insertText": "_abspath_fallback(${1:path})$0", "insertTextFormat": 2}, {"label": "_get_bothseps", "kind": 3, "sortText": "z", "filterText": "_get_bothseps", "insertText": "_get_bothseps(${1:path})$0", "insertTextFormat": 2}, {"label": "_get_sep", "kind": 3, "sortText": "z", "filterText": "_get_sep", "insertText": "_get_sep(${1:path})$0", "insertTextFormat": 2}, {"label": "_getfinalpathname", "kind": 9, "sortText": "z", "filterText": "_getfinalpathname", "insertText": "_getfinalpathname", "insertTextFormat": 1}, {"label": "_getfinalpathname_nonstrict", "kind": 3, "sortText": "z", "filterText": "_getfinalpathname_nonstrict", "insertText": "_getfinalpathname_nonstrict(${1:path})$0", "insertTextFormat": 2}, {"label": "_getfullpathname", "kind": 9, "sortText": "z", "filterText": "_getfullpathname", "insertText": "_getfullpathname", "insertTextFormat": 1}, {"label": "_getvolumepathname", "kind": 6, "sortText": "z", "filterText": "_getvolumepathname", "insertText": "_getvolumepathname", "insertTextFormat": 1}, {"label": "_joinrealpath", "kind": 3, "sortText": "z", "filterText": "_joinrealpath", "insertText": "_joinrealpath(${1:path}, ${2:rest}, ${3:seen})$0", "insertTextFormat": 2}, {"label": "_nt_readlink", "kind": 9, "sortText": "z", "filterText": "_nt_readlink", "insertText": "_nt_readlink", "insertTextFormat": 1}, {"label": "_readlink_deep", "kind": 3, "sortText": "z", "filterText": "_readlink_deep", "insertText": "_readlink_deep(${1:path})$0", "insertTextFormat": 2}, {"label": "_varprog", "kind": 6, "sortText": "z", "filterText": "_varprog", "insertText": "_varprog", "insertTextFormat": 1}, {"label": "_varprogb", "kind": 6, "sortText": "z", "filterText": "_varprogb", "insertText": "_varprogb", "insertTextFormat": 1}, {"label": "__all__", "kind": 6, "sortText": "z", "filterText": "__all__", "insertText": "__all__", "insertTextFormat": 1}, {"label": "__doc__", "kind": 6, "sortText": "z", "filterText": "__doc__", "insertText": "__doc__", "insertTextFormat": 1}, {"label": "__file__", "kind": 6, "sortText": "z", "filterText": "__file__", "insertText": "__file__", "insertTextFormat": 1}, {"label": "__name__", "kind": 6, "sortText": "z", "filterText": "__name__", "insertText": "__name__", "insertTextFormat": 1}, {"label": "__package__", "kind": 6, "sortText": "z", "filterText": "__package__", "insertText": "__package__", "insertTextFormat": 1}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 702, "result": {"label": "__all__", "kind": 6, "detail": "__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\", \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\", \"getatime\",\"getctime\", \"islink\",\"exists\",\"lexists\",\"isdir\",\"isfile\", \"ismount\", \"expanduser\",\"expandvars\",\"normpath\",\"abspath\", \"curdir\",\"pardir\",\"sep\",\"pathsep\",\"defpath\",\"altsep\", \"extsep\",\"devnull\",\"realpath\",\"supports_unicode_filenames\",\"relpath\", \"samefile\", \"sameopenfile\", \"samestat\", \"commonpath\"]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "__all__", "insertText": "__all__", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 703, "result": {"label": "realpath", "kind": 3, "detail": "def realpath", "documentation": {"kind": "markdown", "value": "```text\nrealpath(path: _PathLike[AnyStr]) -> AnyStr\nrealpath(path: AnyStr) -> AnyStr\nrealpath(filename: _PathLike[AnyStr]) -> AnyStr\nrealpath(filename: AnyStr) -> AnyStr\n\nReturn the canonical path of the specified filename, eliminating any\nsymbolic links encountered in the path.\n```"}, "sortText": "z", "filterText": "realpath", "insertText": "realpath(${1:path})$0", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 704, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 705, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 23}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.real", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 706, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 707, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 33}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath(path)", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 708, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 709, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 29}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath()", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 710, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 3, "character": 30}, "end": {"line": 3, "character": 31}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 711, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 712, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 713, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 31}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath(__)", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 714, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 715, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 35}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file)", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 716, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 717, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 37}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__)", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 718, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 3, "character": 39}, "end": {"line": 4, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 3, "character": 40}, "end": {"line": 4, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 719, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 3, "character": 40}, "end": {"line": 3, "character": 41}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 720, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 721, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 3, "character": 40}, "end": {"line": 4, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 722, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 723, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 724, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 3, "character": 40}, "end": {"line": 4, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 3, "character": 39}, "end": {"line": 4, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 725, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 726, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 37}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__)", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 727, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 37}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__)", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 3, "character": 39}, "end": {"line": 4, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 728, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 729, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 3, "character": 40}, "end": {"line": 4, "character": 0}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 730, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 731, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement contains_directory\n```\n---\n```python\ncontains_directory = True\n```\n**Full name:** `fixer.get_songs.contains_directory`"}, "range": {"start": {"line": 15, "character": 12}, "end": {"line": 15, "character": 30}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 732, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement filename\n```\n---\n```python\nfor filename in os.scandir(directory): if filename.endswith(\".flac\" or \".jpg\" or \".png\"): set.add(filename) if filename.is_dir: dirs.add(filename) contains_directory = True\n```\n**Full name:** `fixer.get_songs.filename`"}, "range": {"start": {"line": 11, "character": 20}, "end": {"line": 11, "character": 28}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 733, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 734, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 735, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 42}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__) + ''", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 736, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 737, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 43}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__) + '/'", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 738, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 739, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 740, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 741, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 742, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 743, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 744, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 745, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 746, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 54}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__) + '/test_flacs/'", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 747, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 748, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 749, "result": {"contents": {"kind": "markdown", "value": "```python\nkeyword and\n```\n---\n```text\nBoolean operations\n******************\n\n   or_test  ::= and_test | or_test \"or\" and_test\n   and_test ::= not_test | and_test \"and\" not_test\n   not_test ::= comparison | \"not\" not_test\n\nIn the context of Boolean operations, and also when expressions are\nused by control flow statements, the following values are interpreted\nas false: \"False\", \"None\", numeric zero of all types, and empty\nstrings and containers (including strings, tuples, lists,\ndictionaries, sets and frozensets).  All other values are interpreted\nas true.  User-defined objects can customize their truth value by\nproviding a \"__bool__()\" method.\n\nThe operator \"not\" yields \"True\" if its argument is false, \"False\"\notherwise.\n\nThe expression \"x and y\" first evaluates *x*; if *x* is false, its\nvalue is returned; otherwise, *y* is evaluated and the resulting value\nis returned.\n\nThe expression \"x or y\" first evaluates *x*; if *x* is true, its value\nis returned; otherwise, *y* is evaluated and the resulting value is\nreturned.\n\nNote that neither \"and\" nor \"or\" restrict the value and type they\nreturn to \"False\" and \"True\", but rather return the last evaluated\nargument.  This is sometimes useful, e.g., if \"s\" is a string that\nshould be replaced by a default value if it is empty, the expression\n\"s or 'foo'\" yields the desired value.  Because \"not\" has to create a\nnew value, it returns a boolean value regardless of the type of its\nargument (for example, \"not 'foo'\" produces \"False\" rather than \"''\".)\n```"}, "range": {"start": {"line": 22, "character": 30}, "end": {"line": 22, "character": 33}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 750, "result": {"contents": {"kind": "markdown", "value": "```python\nkeyword from\n```\n---\n```text\nThe \"import\" statement\n**********************\n\n   import_stmt     ::= \"import\" module [\"as\" identifier] (\",\" module [\"as\" identifier])*\n                   | \"from\" relative_module \"import\" identifier [\"as\" identifier]\n                   (\",\" identifier [\"as\" identifier])*\n                   | \"from\" relative_module \"import\" \"(\" identifier [\"as\" identifier]\n                   (\",\" identifier [\"as\" identifier])* [\",\"] \")\"\n                   | \"from\" relative_module \"import\" \"*\"\n   module          ::= (identifier \".\")* identifier\n   relative_module ::= \".\"* module | \".\"+\n\nThe basic import statement (no \"from\" clause) is executed in two\nsteps:\n\n1. find a module, loading and initializing it if necessary\n\n2. define a name or names in the local namespace for the scope where\n   the \"import\" statement occurs.\n\nWhen the statement contains multiple clauses (separated by commas) the\ntwo steps are carried out separately for each clause, just as though\nthe clauses had been separated out into individual import statements.\n\nThe details of the first step, finding and loading modules are\ndescribed in greater detail in the section on the import system, which\nalso describes the various types of packages and modules that can be\nimported, as well as all the hooks that can be used to customize the\nimport system. Note that failures in this step may indicate either\nthat the module could not be located, *or* that an error occurred\nwhile initializing the module, which includes execution of the\nmodule\u2019s code.\n\nIf the requested module is retrieved successfully, it will be made\navailable in the local namespace in one of three ways:\n\n* If the module name is followed by \"as\", then the name following \"as\"\n  is bound directly to the imported module.\n\n* If no other name is specified, and the module being imported is a\n  top level module, the module\u2019s name is bound in the local namespace\n  as a reference to the imported module\n\n* If the module being imported is *not* a top level module, then the\n  name of the top level package that contains the module is bound in\n  the local namespace as a reference to the top level package. The\n  imported module must be accessed using its full qualified name\n  rather than directly\n\nThe \"from\" form uses a slightly more complex process:\n\n1. find the module specified in the \"from\" clause, loading and\n   initializing it if necessary;\n\n2. for each of the identifiers specified in the \"import\" clauses:\n\n   1. check if the imported module has an attribute by that name\n\n   2. if not, attempt to import a submodule with that name and then\n      check the imported module again for that attribute\n\n   3. if the attribute is not found, \"ImportError\" is raised.\n\n   4. otherwise, a reference to that value is stored in the local\n      namespace, using the name in the \"as\" clause if it is present,\n      otherwise using the attribute name\n\nExamples:\n\n   import foo                 # foo imported and bound locally\n   import foo.bar.baz         # foo.bar.baz imported, foo bound locally\n   import foo.bar.baz as fbb  # foo.bar.baz imported and bound as fbb\n   from foo.bar import baz    # foo.bar.baz imported and bound as baz\n   from foo import attr       # foo imported and foo.attr bound as attr\n\nIf the list of identifiers is replaced by a star (\"'*'\"), all public\nnames defined in the module are bound in the local namespace for the\nscope where the \"import\" statement occurs.\n\nThe *public names* defined by a module are determined by checking the\nmodule\u2019s namespace for a variable named \"__all__\"; if defined, it must\nbe a sequence of strings which are names defined or imported by that\nmodule.  The names given in \"__all__\" are all considered public and\nare required to exist.  If \"__all__\" is not defined, the set of public\nnames includes all names found in the module\u2019s namespace which do not\nbegin with an underscore character (\"'_'\").  \"__all__\" should contain\nthe entire public API. It is intended to avoid accidentally exporting\nitems that are not part of the API (such as library modules which were\nimported and used within the module).\n\nThe wild card form of import \u2014 \"from module import *\" \u2014 is only\nallowed at the module level.  Attempting to use it in class or\nfunction definitions will raise a \"SyntaxError\".\n\nWhen specifying what module to import you do not have to specify the\nabsolute name of the module. When a module or package is contained\nwithin another package it is possible to make a relative import within\nthe same top package without having to mention the package name. By\nusing leading dots in the specified module or package after \"from\" you\ncan specify how high to traverse up the current package hierarchy\nwithout specifying exact names. One leading dot means the current\npackage where the module making the import exists. Two dots means up\none package level. Three dots is up two levels, etc. So if you execute\n\"from . import mod\" from a module in the \"pkg\" package then you will\nend up importing \"pkg.mod\". If you execute \"from ..subpkg2 import mod\"\nfrom within \"pkg.subpkg1\" you will import \"pkg.subpkg2.mod\". The\nspecification for relative imports is contained in the Package\nRelative Imports section.\n\n\"importlib.import_module()\" is provided to support applications that\ndetermine dynamically the modules to be loaded.\n\nRaises an auditing event \"import\" with arguments \"module\", \"filename\",\n\"sys.path\", \"sys.meta_path\", \"sys.path_hooks\".\n\n\nFuture statements\n=================\n\nA *future statement* is a directive to the compiler that a particular\nmodule should be compiled using syntax or semantics that will be\navailable in a specified future release of Python where the feature\nbecomes standard.\n\nThe future statement is intended to ease migration to future versions\nof Python that introduce incompatible changes to the language.  It\nallows use of the new features on a per-module basis before the\nrelease in which the feature becomes standard.\n\n   future_stmt ::= \"from\" \"__future__\" \"import\" feature [\"as\" identifier]\n                   (\",\" feature [\"as\" identifier])*\n                   | \"from\" \"__future__\" \"import\" \"(\" feature [\"as\" identifier]\n                   (\",\" feature [\"as\" identifier])* [\",\"] \")\"\n   feature     ::= identifier\n\nA future statement must appear near the top of the module.  The only\nlines that can appear before a future statement are:\n\n* the module docstring (if any),\n\n* comments,\n\n* blank lines, and\n\n* other future statements.\n\nThe only feature that requires using the future statement is\n\"annotations\" (see **PEP 563**).\n\nAll historical features enabled by the future statement are still\nrecognized by Python 3.  The list includes \"absolute_import\",\n\"division\", \"generators\", \"generator_stop\", \"unicode_literals\",\n\"print_function\", \"nested_scopes\" and \"with_statement\".  They are all\nredundant because they are always enabled, and only kept for backwards\ncompatibility.\n\nA future statement is recognized and treated specially at compile\ntime: Changes to the semantics of core constructs are often\nimplemented by generating different code.  It may even be the case\nthat a new feature introduces new incompatible syntax (such as a new\nreserved word), in which case the compiler may need to parse the\nmodule differently.  Such decisions cannot be pushed off until\nruntime.\n\nFor any given release, the compiler knows which feature names have\nbeen defined, and raises a compile-time error if a future statement\ncontains a feature not known to it.\n\nThe direct runtime semantics are the same as for any import statement:\nthere is a standard module \"__future__\", described later, and it will\nbe imported in the usual way at the time the future statement is\nexecuted.\n\nThe interesting runtime semantics depend on the specific feature\nenabled by the future statement.\n\nNote that there is nothing special about the statement:\n\n   import __future__ [as name]\n\nThat is not a future statement; it\u2019s an ordinary import statement with\nno special semantics or syntax restrictions.\n\nCode compiled by calls to the built-in functions \"exec()\" and\n\"compile()\" that occur in a module \"M\" containing a future statement\nwill, by default, use the new syntax or semantics associated with the\nfuture statement.  This can be controlled by optional arguments to\n\"compile()\" \u2014 see the documentation of that function for details.\n\nA future statement typed at an interactive interpreter prompt will\ntake effect for the rest of the interpreter session.  If an\ninterpreter is started with the \"-i\" option, is passed a script name\nto execute, and the script includes a future statement, it will be in\neffect in the interactive session started after the script is\nexecuted.\n\nSee also:\n\n  **PEP 236** - Back to the __future__\n     The original proposal for the __future__ mechanism.\n```"}, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 4}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 0}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 15}, "end": {"line": 29, "character": 15}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 751, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 14}, "end": {"line": 29, "character": 14}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 752, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 13}, "end": {"line": 29, "character": 13}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 12}, "end": {"line": 29, "character": 12}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 11}, "end": {"line": 29, "character": 11}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 10}, "end": {"line": 29, "character": 10}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 9}, "end": {"line": 29, "character": 9}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 8}, "end": {"line": 29, "character": 8}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 7}, "end": {"line": 29, "character": 7}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 6}, "end": {"line": 29, "character": 6}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 5}, "end": {"line": 29, "character": 5}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 4}, "end": {"line": 29, "character": 4}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 3}, "end": {"line": 29, "character": 3}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 753, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 54}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__) + '/test_flacs/'", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 754, "result": {"isIncomplete": false, "items": [{"label": "abs", "kind": 3, "sortText": "z", "filterText": "abs", "insertText": "abs(${1:n})$0", "insertTextFormat": 2}, {"label": "all", "kind": 3, "sortText": "z", "filterText": "all", "insertText": "all(${1:i})$0", "insertTextFormat": 2}, {"label": "any", "kind": 3, "sortText": "z", "filterText": "any", "insertText": "any(${1:i})$0", "insertTextFormat": 2}, {"label": "ArithmeticError", "kind": 7, "sortText": "z", "filterText": "ArithmeticError", "insertText": "ArithmeticError($0)", "insertTextFormat": 2}, {"label": "ascii", "kind": 3, "sortText": "z", "filterText": "ascii", "insertText": "ascii(${1:o})$0", "insertTextFormat": 2}, {"label": "assert", "kind": 14, "sortText": "z", "filterText": "assert", "insertText": "assert", "insertTextFormat": 1}, {"label": "AssertionError", "kind": 7, "sortText": "z", "filterText": "AssertionError", "insertText": "AssertionError($0)", "insertTextFormat": 2}, {"label": "async", "kind": 14, "sortText": "z", "filterText": "async", "insertText": "async", "insertTextFormat": 1}, {"label": "AttributeError", "kind": 7, "sortText": "z", "filterText": "AttributeError", "insertText": "AttributeError($0)", "insertTextFormat": 2}, {"label": "await", "kind": 14, "sortText": "z", "filterText": "await", "insertText": "await", "insertTextFormat": 1}, {"label": "BaseException", "kind": 7, "sortText": "z", "filterText": "BaseException", "insertText": "BaseException($0)", "insertTextFormat": 2}, {"label": "bin", "kind": 3, "sortText": "z", "filterText": "bin", "insertText": "bin(${1:number})$0", "insertTextFormat": 2}, {"label": "BlockingIOError", "kind": 7, "sortText": "z", "filterText": "BlockingIOError", "insertText": "BlockingIOError($0)", "insertTextFormat": 2}, {"label": "bool", "kind": 7, "sortText": "z", "filterText": "bool", "insertText": "bool($0)", "insertTextFormat": 2}, {"label": "break", "kind": 14, "sortText": "z", "filterText": "break", "insertText": "break", "insertTextFormat": 1}, {"label": "breakpoint", "kind": 3, "sortText": "z", "filterText": "breakpoint", "insertText": "breakpoint($0)", "insertTextFormat": 2}, {"label": "BrokenPipeError", "kind": 7, "sortText": "z", "filterText": "BrokenPipeError", "insertText": "BrokenPipeError($0)", "insertTextFormat": 2}, {"label": "BufferError", "kind": 7, "sortText": "z", "filterText": "BufferError", "insertText": "BufferError($0)", "insertTextFormat": 2}, {"label": "bytearray", "kind": 7, "sortText": "z", "filterText": "bytearray", "insertText": "bytearray()$0", "insertTextFormat": 2}, {"label": "bytes", "kind": 7, "sortText": "z", "filterText": "bytes", "insertText": "bytes(${1:ints})$0", "insertTextFormat": 2}, {"label": "BytesWarning", "kind": 7, "sortText": "z", "filterText": "BytesWarning", "insertText": "BytesWarning($0)", "insertTextFormat": 2}, {"label": "callable", "kind": 3, "sortText": "z", "filterText": "callable", "insertText": "callable(${1:o})$0", "insertTextFormat": 2}, {"label": "ChildProcessError", "kind": 7, "sortText": "z", "filterText": "ChildProcessError", "insertText": "ChildProcessError($0)", "insertTextFormat": 2}, {"label": "chr", "kind": 3, "sortText": "z", "filterText": "chr", "insertText": "chr(${1:code})$0", "insertTextFormat": 2}, {"label": "class", "kind": 14, "sortText": "z", "filterText": "class", "insertText": "class", "insertTextFormat": 1}, {"label": "classmethod", "kind": 7, "sortText": "z", "filterText": "classmethod", "insertText": "classmethod(${1:f})$0", "insertTextFormat": 2}, {"label": "compile", "kind": 3, "sortText": "z", "filterText": "compile", "insertText": "compile(${1:source}, ${2:filename}, ${3:mode})$0", "insertTextFormat": 2}, {"label": "complex", "kind": 7, "sortText": "z", "filterText": "complex", "insertText": "complex($0)", "insertTextFormat": 2}, {"label": "ConnectionAbortedError", "kind": 7, "sortText": "z", "filterText": "ConnectionAbortedError", "insertText": "ConnectionAbortedError($0)", "insertTextFormat": 2}, {"label": "ConnectionError", "kind": 7, "sortText": "z", "filterText": "ConnectionError", "insertText": "ConnectionError($0)", "insertTextFormat": 2}, {"label": "ConnectionRefusedError", "kind": 7, "sortText": "z", "filterText": "ConnectionRefusedError", "insertText": "ConnectionRefusedError($0)", "insertTextFormat": 2}, {"label": "ConnectionResetError", "kind": 7, "sortText": "z", "filterText": "ConnectionResetError", "insertText": "ConnectionResetError($0)", "insertTextFormat": 2}, {"label": "continue", "kind": 14, "sortText": "z", "filterText": "continue", "insertText": "continue", "insertTextFormat": 1}, {"label": "copyright", "kind": 3, "sortText": "z", "filterText": "copyright", "insertText": "copyright()$0", "insertTextFormat": 2}, {"label": "credits", "kind": 3, "sortText": "z", "filterText": "credits", "insertText": "credits()$0", "insertTextFormat": 2}, {"label": "def", "kind": 14, "sortText": "z", "filterText": "def", "insertText": "def", "insertTextFormat": 1}, {"label": "del", "kind": 14, "sortText": "z", "filterText": "del", "insertText": "del", "insertTextFormat": 1}, {"label": "delattr", "kind": 3, "sortText": "z", "filterText": "delattr", "insertText": "delattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "DeprecationWarning", "kind": 7, "sortText": "z", "filterText": "DeprecationWarning", "insertText": "DeprecationWarning($0)", "insertTextFormat": 2}, {"label": "dict", "kind": 7, "sortText": "z", "filterText": "dict", "insertText": "dict($0)", "insertTextFormat": 2}, {"label": "dir", "kind": 3, "sortText": "z", "filterText": "dir", "insertText": "dir($0)", "insertTextFormat": 2}, {"label": "divmod", "kind": 3, "sortText": "z", "filterText": "divmod", "insertText": "divmod(${1:a}, ${2:b})$0", "insertTextFormat": 2}, {"label": "ellipsis", "kind": 7, "sortText": "z", "filterText": "ellipsis", "insertText": "ellipsis()$0", "insertTextFormat": 2}, {"label": "Ellipsis", "kind": 6, "sortText": "z", "filterText": "Ellipsis", "insertText": "Ellipsis", "insertTextFormat": 1}, {"label": "enumerate", "kind": 7, "sortText": "z", "filterText": "enumerate", "insertText": "enumerate(${1:iterable})$0", "insertTextFormat": 2}, {"label": "EnvironmentError", "kind": 6, "sortText": "z", "filterText": "EnvironmentError", "insertText": "EnvironmentError", "insertTextFormat": 1}, {"label": "EOFError", "kind": 7, "sortText": "z", "filterText": "EOFError", "insertText": "EOFError($0)", "insertTextFormat": 2}, {"label": "eval", "kind": 3, "sortText": "z", "filterText": "eval", "insertText": "eval(${1:source})$0", "insertTextFormat": 2}, {"label": "Exception", "kind": 7, "sortText": "z", "filterText": "Exception", "insertText": "Exception($0)", "insertTextFormat": 2}, {"label": "exec", "kind": 3, "sortText": "z", "filterText": "exec", "insertText": "exec(${1:object})$0", "insertTextFormat": 2}, {"label": "exit", "kind": 3, "sortText": "z", "filterText": "exit", "insertText": "exit($0)", "insertTextFormat": 2}, {"label": "False", "kind": 14, "sortText": "z", "filterText": "False", "insertText": "False", "insertTextFormat": 1}, {"label": "FileExistsError", "kind": 7, "sortText": "z", "filterText": "FileExistsError", "insertText": "FileExistsError($0)", "insertTextFormat": 2}, {"label": "FileNotFoundError", "kind": 7, "sortText": "z", "filterText": "FileNotFoundError", "insertText": "FileNotFoundError($0)", "insertTextFormat": 2}, {"label": "filter", "kind": 3, "sortText": "z", "filterText": "filter", "insertText": "filter(${1:function}, ${2:iterable})$0", "insertTextFormat": 2}, {"label": "FLAC", "kind": 9, "sortText": "z", "filterText": "FLAC", "insertText": "FLAC", "insertTextFormat": 1}, {"label": "flac_dir", "kind": 6, "sortText": "z", "filterText": "flac_dir", "insertText": "flac_dir", "insertTextFormat": 1}, {"label": "float", "kind": 7, "sortText": "z", "filterText": "float", "insertText": "float($0)", "insertTextFormat": 2}, {"label": "FloatingPointError", "kind": 7, "sortText": "z", "filterText": "FloatingPointError", "insertText": "FloatingPointError($0)", "insertTextFormat": 2}, {"label": "for", "kind": 14, "sortText": "z", "filterText": "for", "insertText": "for", "insertTextFormat": 1}, {"label": "format", "kind": 3, "sortText": "z", "filterText": "format", "insertText": "format(${1:o})$0", "insertTextFormat": 2}, {"label": "from", "kind": 14, "sortText": "z", "filterText": "from", "insertText": "from", "insertTextFormat": 1}, {"label": "frozenset", "kind": 7, "sortText": "z", "filterText": "frozenset", "insertText": "frozenset($0)", "insertTextFormat": 2}, {"label": "FutureWarning", "kind": 7, "sortText": "z", "filterText": "FutureWarning", "insertText": "FutureWarning($0)", "insertTextFormat": 2}, {"label": "GeneratorExit", "kind": 7, "sortText": "z", "filterText": "GeneratorExit", "insertText": "GeneratorExit($0)", "insertTextFormat": 2}, {"label": "get_songs", "kind": 3, "sortText": "z", "filterText": "get_songs", "insertText": "get_songs(${1:directory}, ${2:albums})$0", "insertTextFormat": 2}, {"label": "getattr", "kind": 3, "sortText": "z", "filterText": "getattr", "insertText": "getattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "global", "kind": 14, "sortText": "z", "filterText": "global", "insertText": "global", "insertTextFormat": 1}, {"label": "globals", "kind": 3, "sortText": "z", "filterText": "globals", "insertText": "globals()$0", "insertTextFormat": 2}, {"label": "hasattr", "kind": 3, "sortText": "z", "filterText": "hasattr", "insertText": "hasattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "hash", "kind": 3, "sortText": "z", "filterText": "hash", "insertText": "hash(${1:o})$0", "insertTextFormat": 2}, {"label": "help", "kind": 3, "sortText": "z", "filterText": "help", "insertText": "help($0)", "insertTextFormat": 2}, {"label": "hex", "kind": 3, "sortText": "z", "filterText": "hex", "insertText": "hex(${1:i})$0", "insertTextFormat": 2}, {"label": "id", "kind": 3, "sortText": "z", "filterText": "id", "insertText": "id(${1:o})$0", "insertTextFormat": 2}, {"label": "if", "kind": 14, "sortText": "z", "filterText": "if", "insertText": "if", "insertTextFormat": 1}, {"label": "import", "kind": 14, "sortText": "z", "filterText": "import", "insertText": "import", "insertTextFormat": 1}, {"label": "ImportError", "kind": 7, "sortText": "z", "filterText": "ImportError", "insertText": "ImportError($0)", "insertTextFormat": 2}, {"label": "ImportWarning", "kind": 7, "sortText": "z", "filterText": "ImportWarning", "insertText": "ImportWarning($0)", "insertTextFormat": 2}, {"label": "IndentationError", "kind": 7, "sortText": "z", "filterText": "IndentationError", "insertText": "IndentationError($0)", "insertTextFormat": 2}, {"label": "IndexError", "kind": 7, "sortText": "z", "filterText": "IndexError", "insertText": "IndexError($0)", "insertTextFormat": 2}, {"label": "input", "kind": 3, "sortText": "z", "filterText": "input", "insertText": "input($0)", "insertTextFormat": 2}, {"label": "int", "kind": 7, "sortText": "z", "filterText": "int", "insertText": "int($0)", "insertTextFormat": 2}, {"label": "InterruptedError", "kind": 7, "sortText": "z", "filterText": "InterruptedError", "insertText": "InterruptedError($0)", "insertTextFormat": 2}, {"label": "IOError", "kind": 6, "sortText": "z", "filterText": "IOError", "insertText": "IOError", "insertTextFormat": 1}, {"label": "IsADirectoryError", "kind": 7, "sortText": "z", "filterText": "IsADirectoryError", "insertText": "IsADirectoryError($0)", "insertTextFormat": 2}, {"label": "isinstance", "kind": 3, "sortText": "z", "filterText": "isinstance", "insertText": "isinstance(${1:o}, ${2:t})$0", "insertTextFormat": 2}, {"label": "issubclass", "kind": 3, "sortText": "z", "filterText": "issubclass", "insertText": "issubclass(${1:cls}, ${2:classinfo})$0", "insertTextFormat": 2}, {"label": "iter", "kind": 3, "sortText": "z", "filterText": "iter", "insertText": "iter(${1:iterable})$0", "insertTextFormat": 2}, {"label": "KeyboardInterrupt", "kind": 7, "sortText": "z", "filterText": "KeyboardInterrupt", "insertText": "KeyboardInterrupt($0)", "insertTextFormat": 2}, {"label": "KeyError", "kind": 7, "sortText": "z", "filterText": "KeyError", "insertText": "KeyError($0)", "insertTextFormat": 2}, {"label": "lambda", "kind": 14, "sortText": "z", "filterText": "lambda", "insertText": "lambda", "insertTextFormat": 1}, {"label": "len", "kind": 3, "sortText": "z", "filterText": "len", "insertText": "len(${1:o})$0", "insertTextFormat": 2}, {"label": "license", "kind": 3, "sortText": "z", "filterText": "license", "insertText": "license()$0", "insertTextFormat": 2}, {"label": "list", "kind": 7, "sortText": "z", "filterText": "list", "insertText": "list()$0", "insertTextFormat": 2}, {"label": "locals", "kind": 3, "sortText": "z", "filterText": "locals", "insertText": "locals()$0", "insertTextFormat": 2}, {"label": "LookupError", "kind": 7, "sortText": "z", "filterText": "LookupError", "insertText": "LookupError($0)", "insertTextFormat": 2}, {"label": "map", "kind": 3, "sortText": "z", "filterText": "map", "insertText": "map(${1:func}, ${2:iter1})$0", "insertTextFormat": 2}, {"label": "max", "kind": 3, "sortText": "z", "filterText": "max", "insertText": "max(${1:arg1}, ${2:arg2})$0", "insertTextFormat": 2}, {"label": "MemoryError", "kind": 7, "sortText": "z", "filterText": "MemoryError", "insertText": "MemoryError($0)", "insertTextFormat": 2}, {"label": "memoryview", "kind": 7, "sortText": "z", "filterText": "memoryview", "insertText": "memoryview(${1:obj})$0", "insertTextFormat": 2}, {"label": "min", "kind": 3, "sortText": "z", "filterText": "min", "insertText": "min(${1:arg1}, ${2:arg2})$0", "insertTextFormat": 2}, {"label": "ModuleNotFoundError", "kind": 7, "sortText": "z", "filterText": "ModuleNotFoundError", "insertText": "ModuleNotFoundError($0)", "insertTextFormat": 2}, {"label": "NameError", "kind": 7, "sortText": "z", "filterText": "NameError", "insertText": "NameError($0)", "insertTextFormat": 2}, {"label": "next", "kind": 3, "sortText": "z", "filterText": "next", "insertText": "next(${1:i})$0", "insertTextFormat": 2}, {"label": "None", "kind": 14, "sortText": "z", "filterText": "None", "insertText": "None", "insertTextFormat": 1}, {"label": "nonlocal", "kind": 14, "sortText": "z", "filterText": "nonlocal", "insertText": "nonlocal", "insertTextFormat": 1}, {"label": "not", "kind": 14, "sortText": "z", "filterText": "not", "insertText": "not", "insertTextFormat": 1}, {"label": "NotADirectoryError", "kind": 7, "sortText": "z", "filterText": "NotADirectoryError", "insertText": "NotADirectoryError($0)", "insertTextFormat": 2}, {"label": "NotImplemented", "kind": 6, "sortText": "z", "filterText": "NotImplemented", "insertText": "NotImplemented", "insertTextFormat": 1}, {"label": "NotImplementedError", "kind": 7, "sortText": "z", "filterText": "NotImplementedError", "insertText": "NotImplementedError($0)", "insertTextFormat": 2}, {"label": "object", "kind": 7, "sortText": "z", "filterText": "object", "insertText": "object()$0", "insertTextFormat": 2}, {"label": "oct", "kind": 3, "sortText": "z", "filterText": "oct", "insertText": "oct(${1:i})$0", "insertTextFormat": 2}, {"label": "open", "kind": 3, "sortText": "z", "filterText": "open", "insertText": "open(${1:file})$0", "insertTextFormat": 2}, {"label": "ord", "kind": 3, "sortText": "z", "filterText": "ord", "insertText": "ord(${1:c})$0", "insertTextFormat": 2}, {"label": "os", "kind": 9, "sortText": "z", "filterText": "os", "insertText": "os", "insertTextFormat": 1}, {"label": "OSError", "kind": 7, "sortText": "z", "filterText": "OSError", "insertText": "OSError($0)", "insertTextFormat": 2}, {"label": "OverflowError", "kind": 7, "sortText": "z", "filterText": "OverflowError", "insertText": "OverflowError($0)", "insertTextFormat": 2}, {"label": "pass", "kind": 14, "sortText": "z", "filterText": "pass", "insertText": "pass", "insertTextFormat": 1}, {"label": "PendingDeprecationWarning", "kind": 7, "sortText": "z", "filterText": "PendingDeprecationWarning", "insertText": "PendingDeprecationWarning($0)", "insertTextFormat": 2}, {"label": "PermissionError", "kind": 7, "sortText": "z", "filterText": "PermissionError", "insertText": "PermissionError($0)", "insertTextFormat": 2}, {"label": "pow", "kind": 3, "sortText": "z", "filterText": "pow", "insertText": "pow(${1:x}, ${2:y})$0", "insertTextFormat": 2}, {"label": "print", "kind": 3, "sortText": "z", "filterText": "print", "insertText": "print($0)", "insertTextFormat": 2}, {"label": "ProcessLookupError", "kind": 7, "sortText": "z", "filterText": "ProcessLookupError", "insertText": "ProcessLookupError($0)", "insertTextFormat": 2}, {"label": "property", "kind": 7, "sortText": "z", "filterText": "property", "insertText": "property($0)", "insertTextFormat": 2}, {"label": "quit", "kind": 3, "sortText": "z", "filterText": "quit", "insertText": "quit($0)", "insertTextFormat": 2}, {"label": "raise", "kind": 14, "sortText": "z", "filterText": "raise", "insertText": "raise", "insertTextFormat": 1}, {"label": "range", "kind": 7, "sortText": "z", "filterText": "range", "insertText": "range(${1:stop})$0", "insertTextFormat": 2}, {"label": "read_metadata", "kind": 3, "sortText": "z", "filterText": "read_metadata", "insertText": "read_metadata(${1:flac_filename})$0", "insertTextFormat": 2}, {"label": "RecursionError", "kind": 7, "sortText": "z", "filterText": "RecursionError", "insertText": "RecursionError($0)", "insertTextFormat": 2}, {"label": "ReferenceError", "kind": 7, "sortText": "z", "filterText": "ReferenceError", "insertText": "ReferenceError($0)", "insertTextFormat": 2}, {"label": "repr", "kind": 3, "sortText": "z", "filterText": "repr", "insertText": "repr(${1:o})$0", "insertTextFormat": 2}, {"label": "ResourceWarning", "kind": 7, "sortText": "z", "filterText": "ResourceWarning", "insertText": "ResourceWarning($0)", "insertTextFormat": 2}, {"label": "return", "kind": 14, "sortText": "z", "filterText": "return", "insertText": "return", "insertTextFormat": 1}, {"label": "reversed", "kind": 3, "sortText": "z", "filterText": "reversed", "insertText": "reversed(${1:object})$0", "insertTextFormat": 2}, {"label": "round", "kind": 3, "sortText": "z", "filterText": "round", "insertText": "round(${1:number})$0", "insertTextFormat": 2}, {"label": "RuntimeError", "kind": 7, "sortText": "z", "filterText": "RuntimeError", "insertText": "RuntimeError($0)", "insertTextFormat": 2}, {"label": "RuntimeWarning", "kind": 7, "sortText": "z", "filterText": "RuntimeWarning", "insertText": "RuntimeWarning($0)", "insertTextFormat": 2}, {"label": "set", "kind": 7, "sortText": "z", "filterText": "set", "insertText": "set($0)", "insertTextFormat": 2}, {"label": "setattr", "kind": 3, "sortText": "z", "filterText": "setattr", "insertText": "setattr(${1:object}, ${2:name}, ${3:value})$0", "insertTextFormat": 2}, {"label": "slice", "kind": 7, "sortText": "z", "filterText": "slice", "insertText": "slice(${1:stop})$0", "insertTextFormat": 2}, {"label": "sorted", "kind": 3, "sortText": "z", "filterText": "sorted", "insertText": "sorted(${1:iterable})$0", "insertTextFormat": 2}, {"label": "staticmethod", "kind": 7, "sortText": "z", "filterText": "staticmethod", "insertText": "staticmethod(${1:f})$0", "insertTextFormat": 2}, {"label": "StopAsyncIteration", "kind": 7, "sortText": "z", "filterText": "StopAsyncIteration", "insertText": "StopAsyncIteration($0)", "insertTextFormat": 2}, {"label": "StopIteration", "kind": 7, "sortText": "z", "filterText": "StopIteration", "insertText": "StopIteration($0)", "insertTextFormat": 2}, {"label": "str", "kind": 7, "sortText": "z", "filterText": "str", "insertText": "str($0)", "insertTextFormat": 2}, {"label": "sum", "kind": 3, "sortText": "z", "filterText": "sum", "insertText": "sum(${1:iterable})$0", "insertTextFormat": 2}, {"label": "super", "kind": 7, "sortText": "z", "filterText": "super", "insertText": "super(${1:t}, ${2:obj})$0", "insertTextFormat": 2}, {"label": "SyntaxError", "kind": 7, "sortText": "z", "filterText": "SyntaxError", "insertText": "SyntaxError($0)", "insertTextFormat": 2}, {"label": "SyntaxWarning", "kind": 7, "sortText": "z", "filterText": "SyntaxWarning", "insertText": "SyntaxWarning($0)", "insertTextFormat": 2}, {"label": "SystemError", "kind": 7, "sortText": "z", "filterText": "SystemError", "insertText": "SystemError($0)", "insertTextFormat": 2}, {"label": "SystemExit", "kind": 7, "sortText": "z", "filterText": "SystemExit", "insertText": "SystemExit($0)", "insertTextFormat": 2}, {"label": "TabError", "kind": 7, "sortText": "z", "filterText": "TabError", "insertText": "TabError($0)", "insertTextFormat": 2}, {"label": "TimeoutError", "kind": 7, "sortText": "z", "filterText": "TimeoutError", "insertText": "TimeoutError($0)", "insertTextFormat": 2}, {"label": "True", "kind": 14, "sortText": "z", "filterText": "True", "insertText": "True", "insertTextFormat": 1}, {"label": "try", "kind": 14, "sortText": "z", "filterText": "try", "insertText": "try", "insertTextFormat": 1}, {"label": "tuple", "kind": 7, "sortText": "z", "filterText": "tuple", "insertText": "tuple($0)", "insertTextFormat": 2}, {"label": "type", "kind": 7, "sortText": "z", "filterText": "type", "insertText": "type(${1:o})$0", "insertTextFormat": 2}, {"label": "TypeError", "kind": 7, "sortText": "z", "filterText": "TypeError", "insertText": "TypeError($0)", "insertTextFormat": 2}, {"label": "UnboundLocalError", "kind": 7, "sortText": "z", "filterText": "UnboundLocalError", "insertText": "UnboundLocalError($0)", "insertTextFormat": 2}, {"label": "UnicodeDecodeError", "kind": 7, "sortText": "z", "filterText": "UnicodeDecodeError", "insertText": "UnicodeDecodeError(${1:encoding}, ${2:object}, ${3:start}, ${4:end}, ${5:reason})$0", "insertTextFormat": 2}, {"label": "UnicodeEncodeError", "kind": 7, "sortText": "z", "filterText": "UnicodeEncodeError", "insertText": "UnicodeEncodeError(${1:encoding}, ${2:object}, ${3:start}, ${4:end}, ${5:reason})$0", "insertTextFormat": 2}, {"label": "UnicodeError", "kind": 7, "sortText": "z", "filterText": "UnicodeError", "insertText": "UnicodeError($0)", "insertTextFormat": 2}, {"label": "UnicodeTranslateError", "kind": 7, "sortText": "z", "filterText": "UnicodeTranslateError", "insertText": "UnicodeTranslateError($0)", "insertTextFormat": 2}, {"label": "UnicodeWarning", "kind": 7, "sortText": "z", "filterText": "UnicodeWarning", "insertText": "UnicodeWarning($0)", "insertTextFormat": 2}, {"label": "UserWarning", "kind": 7, "sortText": "z", "filterText": "UserWarning", "insertText": "UserWarning($0)", "insertTextFormat": 2}, {"label": "ValueError", "kind": 7, "sortText": "z", "filterText": "ValueError", "insertText": "ValueError($0)", "insertTextFormat": 2}, {"label": "vars", "kind": 3, "sortText": "z", "filterText": "vars", "insertText": "vars($0)", "insertTextFormat": 2}, {"label": "Warning", "kind": 7, "sortText": "z", "filterText": "Warning", "insertText": "Warning($0)", "insertTextFormat": 2}, {"label": "while", "kind": 14, "sortText": "z", "filterText": "while", "insertText": "while", "insertTextFormat": 1}, {"label": "WindowsError", "kind": 7, "sortText": "z", "filterText": "WindowsError", "insertText": "WindowsError($0)", "insertTextFormat": 2}, {"label": "with", "kind": 14, "sortText": "z", "filterText": "with", "insertText": "with", "insertTextFormat": 1}, {"label": "yield", "kind": 14, "sortText": "z", "filterText": "yield", "insertText": "yield", "insertTextFormat": 1}, {"label": "ZeroDivisionError", "kind": 7, "sortText": "z", "filterText": "ZeroDivisionError", "insertText": "ZeroDivisionError($0)", "insertTextFormat": 2}, {"label": "zip", "kind": 3, "sortText": "z", "filterText": "zip", "insertText": "zip(${1:iter1})$0", "insertTextFormat": 2}, {"label": "__doc__", "kind": 6, "sortText": "z", "filterText": "__doc__", "insertText": "__doc__", "insertTextFormat": 1}, {"label": "__file__", "kind": 6, "sortText": "z", "filterText": "__file__", "insertText": "__file__", "insertTextFormat": 1}, {"label": "__import__", "kind": 3, "sortText": "z", "filterText": "__import__", "insertText": "__import__(${1:name})$0", "insertTextFormat": 2}, {"label": "__name__", "kind": 6, "sortText": "z", "filterText": "__name__", "insertText": "__name__", "insertTextFormat": 1}, {"label": "__package__", "kind": 6, "sortText": "z", "filterText": "__package__", "insertText": "__package__", "insertTextFormat": 1}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 3}, "end": {"line": 29, "character": 3}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 755, "result": {"label": "for", "kind": 14, "detail": "keyword for", "documentation": {"kind": "markdown", "value": "```text\nThe \"for\" statement\n*******************\n\nThe \"for\" statement is used to iterate over the elements of a sequence\n(such as a string, tuple or list) or other iterable object:\n\n   for_stmt ::= \"for\" target_list \"in\" expression_list \":\" suite\n                [\"else\" \":\" suite]\n\nThe expression list is evaluated once; it should yield an iterable\nobject.  An iterator is created for the result of the\n\"expression_list\".  The suite is then executed once for each item\nprovided by the iterator, in the order returned by the iterator.  Each\nitem in turn is assigned to the target list using the standard rules\nfor assignments (see Assignment statements), and then the suite is\nexecuted.  When the items are exhausted (which is immediately when the\nsequence is empty or an iterator raises a \"StopIteration\" exception),\nthe suite in the \"else\" clause, if present, is executed, and the loop\nterminates.\n\nA \"break\" statement executed in the first suite terminates the loop\nwithout executing the \"else\" clause\u2019s suite.  A \"continue\" statement\nexecuted in the first suite skips the rest of the suite and continues\nwith the next item, or with the \"else\" clause if there is no next\nitem.\n\nThe for-loop makes assignments to the variables in the target list.\nThis overwrites all previous assignments to those variables including\nthose made in the suite of the for-loop:\n\n   for i in range(10):\n       print(i)\n       i = 5             # this will not affect the for-loop\n                         # because i will be overwritten with the next\n                         # index in the range\n\nNames in the target list are not deleted when the loop is finished,\nbut if the sequence is empty, they will not have been assigned to at\nall by the loop.  Hint: the built-in function \"range()\" returns an\niterator of integers suitable to emulate the effect of Pascal\u2019s \"for i\n:= a to b do\"; e.g., \"list(range(3))\" returns the list \"[0, 1, 2]\".\n\nNote:\n\n  There is a subtlety when the sequence is being modified by the loop\n  (this can only occur for mutable sequences, e.g. lists).  An\n  internal counter is used to keep track of which item is used next,\n  and this is incremented on each iteration.  When this counter has\n  reached the length of the sequence the loop terminates.  This means\n  that if the suite deletes the current (or a previous) item from the\n  sequence, the next item will be skipped (since it gets the index of\n  the current item which has already been treated).  Likewise, if the\n  suite inserts an item in the sequence before the current item, the\n  current item will be treated again the next time through the loop.\n  This can lead to nasty bugs that can be avoided by making a\n  temporary copy using a slice of the whole sequence, e.g.,\n\n     for x in a[:]:\n         if x < 0: a.remove(x)\n```"}, "sortText": "z", "filterText": "for", "insertText": "for", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 756, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 757, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 54}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__) + '/test_flacs/'", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 4}, "end": {"line": 29, "character": 4}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 5}, "end": {"line": 29, "character": 5}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 758, "result": {"isIncomplete": false, "items": [{"label": "abs", "kind": 3, "sortText": "z", "filterText": "abs", "insertText": "abs(${1:n})$0", "insertTextFormat": 2}, {"label": "all", "kind": 3, "sortText": "z", "filterText": "all", "insertText": "all(${1:i})$0", "insertTextFormat": 2}, {"label": "any", "kind": 3, "sortText": "z", "filterText": "any", "insertText": "any(${1:i})$0", "insertTextFormat": 2}, {"label": "ArithmeticError", "kind": 7, "sortText": "z", "filterText": "ArithmeticError", "insertText": "ArithmeticError($0)", "insertTextFormat": 2}, {"label": "ascii", "kind": 3, "sortText": "z", "filterText": "ascii", "insertText": "ascii(${1:o})$0", "insertTextFormat": 2}, {"label": "AssertionError", "kind": 7, "sortText": "z", "filterText": "AssertionError", "insertText": "AssertionError($0)", "insertTextFormat": 2}, {"label": "AttributeError", "kind": 7, "sortText": "z", "filterText": "AttributeError", "insertText": "AttributeError($0)", "insertTextFormat": 2}, {"label": "await", "kind": 14, "sortText": "z", "filterText": "await", "insertText": "await", "insertTextFormat": 1}, {"label": "BaseException", "kind": 7, "sortText": "z", "filterText": "BaseException", "insertText": "BaseException($0)", "insertTextFormat": 2}, {"label": "bin", "kind": 3, "sortText": "z", "filterText": "bin", "insertText": "bin(${1:number})$0", "insertTextFormat": 2}, {"label": "BlockingIOError", "kind": 7, "sortText": "z", "filterText": "BlockingIOError", "insertText": "BlockingIOError($0)", "insertTextFormat": 2}, {"label": "bool", "kind": 7, "sortText": "z", "filterText": "bool", "insertText": "bool($0)", "insertTextFormat": 2}, {"label": "breakpoint", "kind": 3, "sortText": "z", "filterText": "breakpoint", "insertText": "breakpoint($0)", "insertTextFormat": 2}, {"label": "BrokenPipeError", "kind": 7, "sortText": "z", "filterText": "BrokenPipeError", "insertText": "BrokenPipeError($0)", "insertTextFormat": 2}, {"label": "BufferError", "kind": 7, "sortText": "z", "filterText": "BufferError", "insertText": "BufferError($0)", "insertTextFormat": 2}, {"label": "bytearray", "kind": 7, "sortText": "z", "filterText": "bytearray", "insertText": "bytearray()$0", "insertTextFormat": 2}, {"label": "bytes", "kind": 7, "sortText": "z", "filterText": "bytes", "insertText": "bytes(${1:ints})$0", "insertTextFormat": 2}, {"label": "BytesWarning", "kind": 7, "sortText": "z", "filterText": "BytesWarning", "insertText": "BytesWarning($0)", "insertTextFormat": 2}, {"label": "callable", "kind": 3, "sortText": "z", "filterText": "callable", "insertText": "callable(${1:o})$0", "insertTextFormat": 2}, {"label": "ChildProcessError", "kind": 7, "sortText": "z", "filterText": "ChildProcessError", "insertText": "ChildProcessError($0)", "insertTextFormat": 2}, {"label": "chr", "kind": 3, "sortText": "z", "filterText": "chr", "insertText": "chr(${1:code})$0", "insertTextFormat": 2}, {"label": "classmethod", "kind": 7, "sortText": "z", "filterText": "classmethod", "insertText": "classmethod(${1:f})$0", "insertTextFormat": 2}, {"label": "compile", "kind": 3, "sortText": "z", "filterText": "compile", "insertText": "compile(${1:source}, ${2:filename}, ${3:mode})$0", "insertTextFormat": 2}, {"label": "complex", "kind": 7, "sortText": "z", "filterText": "complex", "insertText": "complex($0)", "insertTextFormat": 2}, {"label": "ConnectionAbortedError", "kind": 7, "sortText": "z", "filterText": "ConnectionAbortedError", "insertText": "ConnectionAbortedError($0)", "insertTextFormat": 2}, {"label": "ConnectionError", "kind": 7, "sortText": "z", "filterText": "ConnectionError", "insertText": "ConnectionError($0)", "insertTextFormat": 2}, {"label": "ConnectionRefusedError", "kind": 7, "sortText": "z", "filterText": "ConnectionRefusedError", "insertText": "ConnectionRefusedError($0)", "insertTextFormat": 2}, {"label": "ConnectionResetError", "kind": 7, "sortText": "z", "filterText": "ConnectionResetError", "insertText": "ConnectionResetError($0)", "insertTextFormat": 2}, {"label": "copyright", "kind": 3, "sortText": "z", "filterText": "copyright", "insertText": "copyright()$0", "insertTextFormat": 2}, {"label": "credits", "kind": 3, "sortText": "z", "filterText": "credits", "insertText": "credits()$0", "insertTextFormat": 2}, {"label": "delattr", "kind": 3, "sortText": "z", "filterText": "delattr", "insertText": "delattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "DeprecationWarning", "kind": 7, "sortText": "z", "filterText": "DeprecationWarning", "insertText": "DeprecationWarning($0)", "insertTextFormat": 2}, {"label": "dict", "kind": 7, "sortText": "z", "filterText": "dict", "insertText": "dict($0)", "insertTextFormat": 2}, {"label": "dir", "kind": 3, "sortText": "z", "filterText": "dir", "insertText": "dir($0)", "insertTextFormat": 2}, {"label": "divmod", "kind": 3, "sortText": "z", "filterText": "divmod", "insertText": "divmod(${1:a}, ${2:b})$0", "insertTextFormat": 2}, {"label": "ellipsis", "kind": 7, "sortText": "z", "filterText": "ellipsis", "insertText": "ellipsis()$0", "insertTextFormat": 2}, {"label": "Ellipsis", "kind": 6, "sortText": "z", "filterText": "Ellipsis", "insertText": "Ellipsis", "insertTextFormat": 1}, {"label": "enumerate", "kind": 7, "sortText": "z", "filterText": "enumerate", "insertText": "enumerate(${1:iterable})$0", "insertTextFormat": 2}, {"label": "EnvironmentError", "kind": 6, "sortText": "z", "filterText": "EnvironmentError", "insertText": "EnvironmentError", "insertTextFormat": 1}, {"label": "EOFError", "kind": 7, "sortText": "z", "filterText": "EOFError", "insertText": "EOFError($0)", "insertTextFormat": 2}, {"label": "eval", "kind": 3, "sortText": "z", "filterText": "eval", "insertText": "eval(${1:source})$0", "insertTextFormat": 2}, {"label": "Exception", "kind": 7, "sortText": "z", "filterText": "Exception", "insertText": "Exception($0)", "insertTextFormat": 2}, {"label": "exec", "kind": 3, "sortText": "z", "filterText": "exec", "insertText": "exec(${1:object})$0", "insertTextFormat": 2}, {"label": "exit", "kind": 3, "sortText": "z", "filterText": "exit", "insertText": "exit($0)", "insertTextFormat": 2}, {"label": "False", "kind": 14, "sortText": "z", "filterText": "False", "insertText": "False", "insertTextFormat": 1}, {"label": "FileExistsError", "kind": 7, "sortText": "z", "filterText": "FileExistsError", "insertText": "FileExistsError($0)", "insertTextFormat": 2}, {"label": "FileNotFoundError", "kind": 7, "sortText": "z", "filterText": "FileNotFoundError", "insertText": "FileNotFoundError($0)", "insertTextFormat": 2}, {"label": "filter", "kind": 3, "sortText": "z", "filterText": "filter", "insertText": "filter(${1:function}, ${2:iterable})$0", "insertTextFormat": 2}, {"label": "FLAC", "kind": 9, "sortText": "z", "filterText": "FLAC", "insertText": "FLAC", "insertTextFormat": 1}, {"label": "flac_dir", "kind": 6, "sortText": "z", "filterText": "flac_dir", "insertText": "flac_dir", "insertTextFormat": 1}, {"label": "float", "kind": 7, "sortText": "z", "filterText": "float", "insertText": "float($0)", "insertTextFormat": 2}, {"label": "FloatingPointError", "kind": 7, "sortText": "z", "filterText": "FloatingPointError", "insertText": "FloatingPointError($0)", "insertTextFormat": 2}, {"label": "format", "kind": 3, "sortText": "z", "filterText": "format", "insertText": "format(${1:o})$0", "insertTextFormat": 2}, {"label": "frozenset", "kind": 7, "sortText": "z", "filterText": "frozenset", "insertText": "frozenset($0)", "insertTextFormat": 2}, {"label": "FutureWarning", "kind": 7, "sortText": "z", "filterText": "FutureWarning", "insertText": "FutureWarning($0)", "insertTextFormat": 2}, {"label": "GeneratorExit", "kind": 7, "sortText": "z", "filterText": "GeneratorExit", "insertText": "GeneratorExit($0)", "insertTextFormat": 2}, {"label": "get_songs", "kind": 3, "sortText": "z", "filterText": "get_songs", "insertText": "get_songs(${1:directory}, ${2:albums})$0", "insertTextFormat": 2}, {"label": "getattr", "kind": 3, "sortText": "z", "filterText": "getattr", "insertText": "getattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "globals", "kind": 3, "sortText": "z", "filterText": "globals", "insertText": "globals()$0", "insertTextFormat": 2}, {"label": "hasattr", "kind": 3, "sortText": "z", "filterText": "hasattr", "insertText": "hasattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "hash", "kind": 3, "sortText": "z", "filterText": "hash", "insertText": "hash(${1:o})$0", "insertTextFormat": 2}, {"label": "help", "kind": 3, "sortText": "z", "filterText": "help", "insertText": "help($0)", "insertTextFormat": 2}, {"label": "hex", "kind": 3, "sortText": "z", "filterText": "hex", "insertText": "hex(${1:i})$0", "insertTextFormat": 2}, {"label": "id", "kind": 3, "sortText": "z", "filterText": "id", "insertText": "id(${1:o})$0", "insertTextFormat": 2}, {"label": "ImportError", "kind": 7, "sortText": "z", "filterText": "ImportError", "insertText": "ImportError($0)", "insertTextFormat": 2}, {"label": "ImportWarning", "kind": 7, "sortText": "z", "filterText": "ImportWarning", "insertText": "ImportWarning($0)", "insertTextFormat": 2}, {"label": "IndentationError", "kind": 7, "sortText": "z", "filterText": "IndentationError", "insertText": "IndentationError($0)", "insertTextFormat": 2}, {"label": "IndexError", "kind": 7, "sortText": "z", "filterText": "IndexError", "insertText": "IndexError($0)", "insertTextFormat": 2}, {"label": "input", "kind": 3, "sortText": "z", "filterText": "input", "insertText": "input($0)", "insertTextFormat": 2}, {"label": "int", "kind": 7, "sortText": "z", "filterText": "int", "insertText": "int($0)", "insertTextFormat": 2}, {"label": "InterruptedError", "kind": 7, "sortText": "z", "filterText": "InterruptedError", "insertText": "InterruptedError($0)", "insertTextFormat": 2}, {"label": "IOError", "kind": 6, "sortText": "z", "filterText": "IOError", "insertText": "IOError", "insertTextFormat": 1}, {"label": "IsADirectoryError", "kind": 7, "sortText": "z", "filterText": "IsADirectoryError", "insertText": "IsADirectoryError($0)", "insertTextFormat": 2}, {"label": "isinstance", "kind": 3, "sortText": "z", "filterText": "isinstance", "insertText": "isinstance(${1:o}, ${2:t})$0", "insertTextFormat": 2}, {"label": "issubclass", "kind": 3, "sortText": "z", "filterText": "issubclass", "insertText": "issubclass(${1:cls}, ${2:classinfo})$0", "insertTextFormat": 2}, {"label": "iter", "kind": 3, "sortText": "z", "filterText": "iter", "insertText": "iter(${1:iterable})$0", "insertTextFormat": 2}, {"label": "KeyboardInterrupt", "kind": 7, "sortText": "z", "filterText": "KeyboardInterrupt", "insertText": "KeyboardInterrupt($0)", "insertTextFormat": 2}, {"label": "KeyError", "kind": 7, "sortText": "z", "filterText": "KeyError", "insertText": "KeyError($0)", "insertTextFormat": 2}, {"label": "len", "kind": 3, "sortText": "z", "filterText": "len", "insertText": "len(${1:o})$0", "insertTextFormat": 2}, {"label": "license", "kind": 3, "sortText": "z", "filterText": "license", "insertText": "license()$0", "insertTextFormat": 2}, {"label": "list", "kind": 7, "sortText": "z", "filterText": "list", "insertText": "list()$0", "insertTextFormat": 2}, {"label": "locals", "kind": 3, "sortText": "z", "filterText": "locals", "insertText": "locals()$0", "insertTextFormat": 2}, {"label": "LookupError", "kind": 7, "sortText": "z", "filterText": "LookupError", "insertText": "LookupError($0)", "insertTextFormat": 2}, {"label": "map", "kind": 3, "sortText": "z", "filterText": "map", "insertText": "map(${1:func}, ${2:iter1})$0", "insertTextFormat": 2}, {"label": "max", "kind": 3, "sortText": "z", "filterText": "max", "insertText": "max(${1:arg1}, ${2:arg2})$0", "insertTextFormat": 2}, {"label": "MemoryError", "kind": 7, "sortText": "z", "filterText": "MemoryError", "insertText": "MemoryError($0)", "insertTextFormat": 2}, {"label": "memoryview", "kind": 7, "sortText": "z", "filterText": "memoryview", "insertText": "memoryview(${1:obj})$0", "insertTextFormat": 2}, {"label": "min", "kind": 3, "sortText": "z", "filterText": "min", "insertText": "min(${1:arg1}, ${2:arg2})$0", "insertTextFormat": 2}, {"label": "ModuleNotFoundError", "kind": 7, "sortText": "z", "filterText": "ModuleNotFoundError", "insertText": "ModuleNotFoundError($0)", "insertTextFormat": 2}, {"label": "NameError", "kind": 7, "sortText": "z", "filterText": "NameError", "insertText": "NameError($0)", "insertTextFormat": 2}, {"label": "next", "kind": 3, "sortText": "z", "filterText": "next", "insertText": "next(${1:i})$0", "insertTextFormat": 2}, {"label": "None", "kind": 14, "sortText": "z", "filterText": "None", "insertText": "None", "insertTextFormat": 1}, {"label": "NotADirectoryError", "kind": 7, "sortText": "z", "filterText": "NotADirectoryError", "insertText": "NotADirectoryError($0)", "insertTextFormat": 2}, {"label": "NotImplemented", "kind": 6, "sortText": "z", "filterText": "NotImplemented", "insertText": "NotImplemented", "insertTextFormat": 1}, {"label": "NotImplementedError", "kind": 7, "sortText": "z", "filterText": "NotImplementedError", "insertText": "NotImplementedError($0)", "insertTextFormat": 2}, {"label": "object", "kind": 7, "sortText": "z", "filterText": "object", "insertText": "object()$0", "insertTextFormat": 2}, {"label": "oct", "kind": 3, "sortText": "z", "filterText": "oct", "insertText": "oct(${1:i})$0", "insertTextFormat": 2}, {"label": "open", "kind": 3, "sortText": "z", "filterText": "open", "insertText": "open(${1:file})$0", "insertTextFormat": 2}, {"label": "ord", "kind": 3, "sortText": "z", "filterText": "ord", "insertText": "ord(${1:c})$0", "insertTextFormat": 2}, {"label": "os", "kind": 9, "sortText": "z", "filterText": "os", "insertText": "os", "insertTextFormat": 1}, {"label": "OSError", "kind": 7, "sortText": "z", "filterText": "OSError", "insertText": "OSError($0)", "insertTextFormat": 2}, {"label": "OverflowError", "kind": 7, "sortText": "z", "filterText": "OverflowError", "insertText": "OverflowError($0)", "insertTextFormat": 2}, {"label": "PendingDeprecationWarning", "kind": 7, "sortText": "z", "filterText": "PendingDeprecationWarning", "insertText": "PendingDeprecationWarning($0)", "insertTextFormat": 2}, {"label": "PermissionError", "kind": 7, "sortText": "z", "filterText": "PermissionError", "insertText": "PermissionError($0)", "insertTextFormat": 2}, {"label": "pow", "kind": 3, "sortText": "z", "filterText": "pow", "insertText": "pow(${1:x}, ${2:y})$0", "insertTextFormat": 2}, {"label": "print", "kind": 3, "sortText": "z", "filterText": "print", "insertText": "print($0)", "insertTextFormat": 2}, {"label": "ProcessLookupError", "kind": 7, "sortText": "z", "filterText": "ProcessLookupError", "insertText": "ProcessLookupError($0)", "insertTextFormat": 2}, {"label": "property", "kind": 7, "sortText": "z", "filterText": "property", "insertText": "property($0)", "insertTextFormat": 2}, {"label": "quit", "kind": 3, "sortText": "z", "filterText": "quit", "insertText": "quit($0)", "insertTextFormat": 2}, {"label": "range", "kind": 7, "sortText": "z", "filterText": "range", "insertText": "range(${1:stop})$0", "insertTextFormat": 2}, {"label": "read_metadata", "kind": 3, "sortText": "z", "filterText": "read_metadata", "insertText": "read_metadata(${1:flac_filename})$0", "insertTextFormat": 2}, {"label": "RecursionError", "kind": 7, "sortText": "z", "filterText": "RecursionError", "insertText": "RecursionError($0)", "insertTextFormat": 2}, {"label": "ReferenceError", "kind": 7, "sortText": "z", "filterText": "ReferenceError", "insertText": "ReferenceError($0)", "insertTextFormat": 2}, {"label": "repr", "kind": 3, "sortText": "z", "filterText": "repr", "insertText": "repr(${1:o})$0", "insertTextFormat": 2}, {"label": "ResourceWarning", "kind": 7, "sortText": "z", "filterText": "ResourceWarning", "insertText": "ResourceWarning($0)", "insertTextFormat": 2}, {"label": "reversed", "kind": 3, "sortText": "z", "filterText": "reversed", "insertText": "reversed(${1:object})$0", "insertTextFormat": 2}, {"label": "round", "kind": 3, "sortText": "z", "filterText": "round", "insertText": "round(${1:number})$0", "insertTextFormat": 2}, {"label": "RuntimeError", "kind": 7, "sortText": "z", "filterText": "RuntimeError", "insertText": "RuntimeError($0)", "insertTextFormat": 2}, {"label": "RuntimeWarning", "kind": 7, "sortText": "z", "filterText": "RuntimeWarning", "insertText": "RuntimeWarning($0)", "insertTextFormat": 2}, {"label": "set", "kind": 7, "sortText": "z", "filterText": "set", "insertText": "set($0)", "insertTextFormat": 2}, {"label": "setattr", "kind": 3, "sortText": "z", "filterText": "setattr", "insertText": "setattr(${1:object}, ${2:name}, ${3:value})$0", "insertTextFormat": 2}, {"label": "slice", "kind": 7, "sortText": "z", "filterText": "slice", "insertText": "slice(${1:stop})$0", "insertTextFormat": 2}, {"label": "sorted", "kind": 3, "sortText": "z", "filterText": "sorted", "insertText": "sorted(${1:iterable})$0", "insertTextFormat": 2}, {"label": "staticmethod", "kind": 7, "sortText": "z", "filterText": "staticmethod", "insertText": "staticmethod(${1:f})$0", "insertTextFormat": 2}, {"label": "StopAsyncIteration", "kind": 7, "sortText": "z", "filterText": "StopAsyncIteration", "insertText": "StopAsyncIteration($0)", "insertTextFormat": 2}, {"label": "StopIteration", "kind": 7, "sortText": "z", "filterText": "StopIteration", "insertText": "StopIteration($0)", "insertTextFormat": 2}, {"label": "str", "kind": 7, "sortText": "z", "filterText": "str", "insertText": "str($0)", "insertTextFormat": 2}, {"label": "sum", "kind": 3, "sortText": "z", "filterText": "sum", "insertText": "sum(${1:iterable})$0", "insertTextFormat": 2}, {"label": "super", "kind": 7, "sortText": "z", "filterText": "super", "insertText": "super(${1:t}, ${2:obj})$0", "insertTextFormat": 2}, {"label": "SyntaxError", "kind": 7, "sortText": "z", "filterText": "SyntaxError", "insertText": "SyntaxError($0)", "insertTextFormat": 2}, {"label": "SyntaxWarning", "kind": 7, "sortText": "z", "filterText": "SyntaxWarning", "insertText": "SyntaxWarning($0)", "insertTextFormat": 2}, {"label": "SystemError", "kind": 7, "sortText": "z", "filterText": "SystemError", "insertText": "SystemError($0)", "insertTextFormat": 2}, {"label": "SystemExit", "kind": 7, "sortText": "z", "filterText": "SystemExit", "insertText": "SystemExit($0)", "insertTextFormat": 2}, {"label": "TabError", "kind": 7, "sortText": "z", "filterText": "TabError", "insertText": "TabError($0)", "insertTextFormat": 2}, {"label": "TimeoutError", "kind": 7, "sortText": "z", "filterText": "TimeoutError", "insertText": "TimeoutError($0)", "insertTextFormat": 2}, {"label": "True", "kind": 14, "sortText": "z", "filterText": "True", "insertText": "True", "insertTextFormat": 1}, {"label": "tuple", "kind": 7, "sortText": "z", "filterText": "tuple", "insertText": "tuple($0)", "insertTextFormat": 2}, {"label": "type", "kind": 7, "sortText": "z", "filterText": "type", "insertText": "type(${1:o})$0", "insertTextFormat": 2}, {"label": "TypeError", "kind": 7, "sortText": "z", "filterText": "TypeError", "insertText": "TypeError($0)", "insertTextFormat": 2}, {"label": "UnboundLocalError", "kind": 7, "sortText": "z", "filterText": "UnboundLocalError", "insertText": "UnboundLocalError($0)", "insertTextFormat": 2}, {"label": "UnicodeDecodeError", "kind": 7, "sortText": "z", "filterText": "UnicodeDecodeError", "insertText": "UnicodeDecodeError(${1:encoding}, ${2:object}, ${3:start}, ${4:end}, ${5:reason})$0", "insertTextFormat": 2}, {"label": "UnicodeEncodeError", "kind": 7, "sortText": "z", "filterText": "UnicodeEncodeError", "insertText": "UnicodeEncodeError(${1:encoding}, ${2:object}, ${3:start}, ${4:end}, ${5:reason})$0", "insertTextFormat": 2}, {"label": "UnicodeError", "kind": 7, "sortText": "z", "filterText": "UnicodeError", "insertText": "UnicodeError($0)", "insertTextFormat": 2}, {"label": "UnicodeTranslateError", "kind": 7, "sortText": "z", "filterText": "UnicodeTranslateError", "insertText": "UnicodeTranslateError($0)", "insertTextFormat": 2}, {"label": "UnicodeWarning", "kind": 7, "sortText": "z", "filterText": "UnicodeWarning", "insertText": "UnicodeWarning($0)", "insertTextFormat": 2}, {"label": "UserWarning", "kind": 7, "sortText": "z", "filterText": "UserWarning", "insertText": "UserWarning($0)", "insertTextFormat": 2}, {"label": "ValueError", "kind": 7, "sortText": "z", "filterText": "ValueError", "insertText": "ValueError($0)", "insertTextFormat": 2}, {"label": "vars", "kind": 3, "sortText": "z", "filterText": "vars", "insertText": "vars($0)", "insertTextFormat": 2}, {"label": "Warning", "kind": 7, "sortText": "z", "filterText": "Warning", "insertText": "Warning($0)", "insertTextFormat": 2}, {"label": "WindowsError", "kind": 7, "sortText": "z", "filterText": "WindowsError", "insertText": "WindowsError($0)", "insertTextFormat": 2}, {"label": "ZeroDivisionError", "kind": 7, "sortText": "z", "filterText": "ZeroDivisionError", "insertText": "ZeroDivisionError($0)", "insertTextFormat": 2}, {"label": "zip", "kind": 3, "sortText": "z", "filterText": "zip", "insertText": "zip(${1:iter1})$0", "insertTextFormat": 2}, {"label": "__doc__", "kind": 6, "sortText": "z", "filterText": "__doc__", "insertText": "__doc__", "insertTextFormat": 1}, {"label": "__file__", "kind": 6, "sortText": "z", "filterText": "__file__", "insertText": "__file__", "insertTextFormat": 1}, {"label": "__import__", "kind": 3, "sortText": "z", "filterText": "__import__", "insertText": "__import__(${1:name})$0", "insertTextFormat": 2}, {"label": "__name__", "kind": 6, "sortText": "z", "filterText": "__name__", "insertText": "__name__", "insertTextFormat": 1}, {"label": "__package__", "kind": 6, "sortText": "z", "filterText": "__package__", "insertText": "__package__", "insertTextFormat": 1}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 6}, "end": {"line": 29, "character": 6}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 7}, "end": {"line": 29, "character": 7}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 8}, "end": {"line": 29, "character": 8}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 759, "result": {"label": "FileExistsError", "kind": 7, "detail": "class FileExistsError", "documentation": {"kind": "markdown", "value": "```text\nFileExistsError(*args: object)\n\nFile already exists.\n```"}, "sortText": "z", "filterText": "FileExistsError", "insertText": "FileExistsError($0)", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 760, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 9}, "end": {"line": 29, "character": 9}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 761, "result": {"label": "FileNotFoundError", "kind": 7, "detail": "class FileNotFoundError", "documentation": {"kind": "markdown", "value": "```text\nFileNotFoundError(*args: object)\n\nFile not found.\n```"}, "sortText": "z", "filterText": "FileNotFoundError", "insertText": "FileNotFoundError($0)", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 10}, "end": {"line": 29, "character": 10}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 11}, "end": {"line": 29, "character": 11}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 762, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 12}, "end": {"line": 29, "character": 12}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 763, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 764, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 54}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__) + '/test_flacs/'", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 13}, "end": {"line": 29, "character": 13}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 13}, "end": {"line": 29, "character": 14}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 765, "result": {"isIncomplete": false, "items": [{"label": "in", "kind": 14, "sortText": "z", "filterText": "in", "insertText": "in", "insertTextFormat": 1}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 15}, "end": {"line": 29, "character": 15}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 16}, "end": {"line": 29, "character": 16}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 17}, "end": {"line": 29, "character": 17}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 18}, "end": {"line": 29, "character": 18}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 19}, "end": {"line": 29, "character": 19}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 766, "result": {"isIncomplete": false, "items": [{"label": "os", "kind": 9, "sortText": "z", "filterText": "os", "insertText": "os", "insertTextFormat": 1}, {"label": "OSError", "kind": 7, "sortText": "z", "filterText": "OSError", "insertText": "OSError($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 767, "result": {"label": "OSError", "kind": 7, "detail": "class OSError", "documentation": {"kind": "markdown", "value": "```text\nOSError(*args: object)\n\nBase class for I/O related errors.\n```"}, "sortText": "z", "filterText": "OSError", "insertText": "OSError($0)", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 20}, "end": {"line": 29, "character": 20}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 768, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 21}, "end": {"line": 29, "character": 21}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 769, "result": {"isIncomplete": false, "items": [{"label": "scandir", "kind": 3, "sortText": "z", "filterText": "scandir", "insertText": "scandir()$0", "insertTextFormat": 2}, {"label": "SCHED_BATCH", "kind": 6, "sortText": "z", "filterText": "SCHED_BATCH", "insertText": "SCHED_BATCH", "insertTextFormat": 1}, {"label": "SCHED_FIFO", "kind": 6, "sortText": "z", "filterText": "SCHED_FIFO", "insertText": "SCHED_FIFO", "insertTextFormat": 1}, {"label": "sched_get_priority_max", "kind": 3, "sortText": "z", "filterText": "sched_get_priority_max", "insertText": "sched_get_priority_max(${1:policy})$0", "insertTextFormat": 2}, {"label": "sched_get_priority_min", "kind": 3, "sortText": "z", "filterText": "sched_get_priority_min", "insertText": "sched_get_priority_min(${1:policy})$0", "insertTextFormat": 2}, {"label": "sched_getaffinity", "kind": 3, "sortText": "z", "filterText": "sched_getaffinity", "insertText": "sched_getaffinity(${1:pid})$0", "insertTextFormat": 2}, {"label": "sched_getparam", "kind": 3, "sortText": "z", "filterText": "sched_getparam", "insertText": "sched_getparam(${1:pid})$0", "insertTextFormat": 2}, {"label": "sched_getscheduler", "kind": 3, "sortText": "z", "filterText": "sched_getscheduler", "insertText": "sched_getscheduler(${1:pid})$0", "insertTextFormat": 2}, {"label": "SCHED_IDLE", "kind": 6, "sortText": "z", "filterText": "SCHED_IDLE", "insertText": "SCHED_IDLE", "insertTextFormat": 1}, {"label": "SCHED_OTHER", "kind": 6, "sortText": "z", "filterText": "SCHED_OTHER", "insertText": "SCHED_OTHER", "insertTextFormat": 1}, {"label": "sched_param", "kind": 7, "sortText": "z", "filterText": "sched_param", "insertText": "sched_param(${1:typename})$0", "insertTextFormat": 2}, {"label": "SCHED_RESET_ON_FORK", "kind": 6, "sortText": "z", "filterText": "SCHED_RESET_ON_FORK", "insertText": "SCHED_RESET_ON_FORK", "insertTextFormat": 1}, {"label": "SCHED_RR", "kind": 6, "sortText": "z", "filterText": "SCHED_RR", "insertText": "SCHED_RR", "insertTextFormat": 1}, {"label": "sched_rr_get_interval", "kind": 3, "sortText": "z", "filterText": "sched_rr_get_interval", "insertText": "sched_rr_get_interval(${1:pid})$0", "insertTextFormat": 2}, {"label": "sched_setaffinity", "kind": 3, "sortText": "z", "filterText": "sched_setaffinity", "insertText": "sched_setaffinity(${1:pid}, ${2:mask})$0", "insertTextFormat": 2}, {"label": "sched_setparam", "kind": 3, "sortText": "z", "filterText": "sched_setparam", "insertText": "sched_setparam(${1:pid}, ${2:param})$0", "insertTextFormat": 2}, {"label": "sched_setscheduler", "kind": 3, "sortText": "z", "filterText": "sched_setscheduler", "insertText": "sched_setscheduler(${1:pid}, ${2:policy}, ${3:param})$0", "insertTextFormat": 2}, {"label": "SCHED_SPORADIC", "kind": 6, "sortText": "z", "filterText": "SCHED_SPORADIC", "insertText": "SCHED_SPORADIC", "insertTextFormat": 1}, {"label": "sched_yield", "kind": 3, "sortText": "z", "filterText": "sched_yield", "insertText": "sched_yield()$0", "insertTextFormat": 2}, {"label": "SEEK_CUR", "kind": 6, "sortText": "z", "filterText": "SEEK_CUR", "insertText": "SEEK_CUR", "insertTextFormat": 1}, {"label": "SEEK_DATA", "kind": 6, "sortText": "z", "filterText": "SEEK_DATA", "insertText": "SEEK_DATA", "insertTextFormat": 1}, {"label": "SEEK_END", "kind": 6, "sortText": "z", "filterText": "SEEK_END", "insertText": "SEEK_END", "insertTextFormat": 1}, {"label": "SEEK_HOLE", "kind": 6, "sortText": "z", "filterText": "SEEK_HOLE", "insertText": "SEEK_HOLE", "insertTextFormat": 1}, {"label": "SEEK_SET", "kind": 6, "sortText": "z", "filterText": "SEEK_SET", "insertText": "SEEK_SET", "insertTextFormat": 1}, {"label": "sendfile", "kind": 3, "sortText": "z", "filterText": "sendfile", "insertText": "sendfile(${1:out_fd}, ${2:in_fd}, ${3:offset}, ${4:count})$0", "insertTextFormat": 2}, {"label": "sep", "kind": 6, "sortText": "z", "filterText": "sep", "insertText": "sep", "insertTextFormat": 1}, {"label": "set_blocking", "kind": 3, "sortText": "z", "filterText": "set_blocking", "insertText": "set_blocking(${1:fd}, ${2:blocking})$0", "insertTextFormat": 2}, {"label": "set_inheritable", "kind": 3, "sortText": "z", "filterText": "set_inheritable", "insertText": "set_inheritable(${1:fd}, ${2:inheritable})$0", "insertTextFormat": 2}, {"label": "setegid", "kind": 3, "sortText": "z", "filterText": "setegid", "insertText": "setegid(${1:egid})$0", "insertTextFormat": 2}, {"label": "seteuid", "kind": 3, "sortText": "z", "filterText": "seteuid", "insertText": "seteuid(${1:euid})$0", "insertTextFormat": 2}, {"label": "setgid", "kind": 3, "sortText": "z", "filterText": "setgid", "insertText": "setgid(${1:gid})$0", "insertTextFormat": 2}, {"label": "setgroups", "kind": 3, "sortText": "z", "filterText": "setgroups", "insertText": "setgroups(${1:groups})$0", "insertTextFormat": 2}, {"label": "setpgid", "kind": 3, "sortText": "z", "filterText": "setpgid", "insertText": "setpgid(${1:pid}, ${2:pgrp})$0", "insertTextFormat": 2}, {"label": "setpgrp", "kind": 3, "sortText": "z", "filterText": "setpgrp", "insertText": "setpgrp()$0", "insertTextFormat": 2}, {"label": "setpriority", "kind": 3, "sortText": "z", "filterText": "setpriority", "insertText": "setpriority(${1:which}, ${2:who}, ${3:priority})$0", "insertTextFormat": 2}, {"label": "setregid", "kind": 3, "sortText": "z", "filterText": "setregid", "insertText": "setregid(${1:rgid}, ${2:egid})$0", "insertTextFormat": 2}, {"label": "setresgid", "kind": 3, "sortText": "z", "filterText": "setresgid", "insertText": "setresgid(${1:rgid}, ${2:egid}, ${3:sgid})$0", "insertTextFormat": 2}, {"label": "setresuid", "kind": 3, "sortText": "z", "filterText": "setresuid", "insertText": "setresuid(${1:ruid}, ${2:euid}, ${3:suid})$0", "insertTextFormat": 2}, {"label": "setreuid", "kind": 3, "sortText": "z", "filterText": "setreuid", "insertText": "setreuid(${1:ruid}, ${2:euid})$0", "insertTextFormat": 2}, {"label": "setsid", "kind": 3, "sortText": "z", "filterText": "setsid", "insertText": "setsid()$0", "insertTextFormat": 2}, {"label": "setuid", "kind": 3, "sortText": "z", "filterText": "setuid", "insertText": "setuid(${1:uid})$0", "insertTextFormat": 2}, {"label": "setxattr", "kind": 3, "sortText": "z", "filterText": "setxattr", "insertText": "setxattr(${1:path}, ${2:attribute}, ${3:value})$0", "insertTextFormat": 2}, {"label": "SF_MNOWAIT", "kind": 6, "sortText": "z", "filterText": "SF_MNOWAIT", "insertText": "SF_MNOWAIT", "insertTextFormat": 1}, {"label": "SF_NODISKIO", "kind": 6, "sortText": "z", "filterText": "SF_NODISKIO", "insertText": "SF_NODISKIO", "insertTextFormat": 1}, {"label": "SF_SYNC", "kind": 6, "sortText": "z", "filterText": "SF_SYNC", "insertText": "SF_SYNC", "insertTextFormat": 1}, {"label": "spawnl", "kind": 3, "sortText": "z", "filterText": "spawnl", "insertText": "spawnl(${1:mode}, ${2:path}, ${3:arg0})$0", "insertTextFormat": 2}, {"label": "spawnle", "kind": 3, "sortText": "z", "filterText": "spawnle", "insertText": "spawnle(${1:mode}, ${2:path}, ${3:arg0})$0", "insertTextFormat": 2}, {"label": "spawnlp", "kind": 3, "sortText": "z", "filterText": "spawnlp", "insertText": "spawnlp(${1:mode}, ${2:file}, ${3:arg0})$0", "insertTextFormat": 2}, {"label": "spawnlpe", "kind": 3, "sortText": "z", "filterText": "spawnlpe", "insertText": "spawnlpe(${1:mode}, ${2:file}, ${3:arg0})$0", "insertTextFormat": 2}, {"label": "spawnv", "kind": 3, "sortText": "z", "filterText": "spawnv", "insertText": "spawnv(${1:mode}, ${2:path}, ${3:args})$0", "insertTextFormat": 2}, {"label": "spawnve", "kind": 3, "sortText": "z", "filterText": "spawnve", "insertText": "spawnve(${1:mode}, ${2:path}, ${3:args}, ${4:env})$0", "insertTextFormat": 2}, {"label": "spawnvp", "kind": 3, "sortText": "z", "filterText": "spawnvp", "insertText": "spawnvp(${1:mode}, ${2:file}, ${3:args})$0", "insertTextFormat": 2}, {"label": "spawnvpe", "kind": 3, "sortText": "z", "filterText": "spawnvpe", "insertText": "spawnvpe(${1:mode}, ${2:file}, ${3:args}, ${4:env})$0", "insertTextFormat": 2}, {"label": "st", "kind": 9, "sortText": "z", "filterText": "st", "insertText": "st", "insertTextFormat": 1}, {"label": "ST_APPEND", "kind": 6, "sortText": "z", "filterText": "ST_APPEND", "insertText": "ST_APPEND", "insertTextFormat": 1}, {"label": "ST_MANDLOCK", "kind": 6, "sortText": "z", "filterText": "ST_MANDLOCK", "insertText": "ST_MANDLOCK", "insertTextFormat": 1}, {"label": "ST_NOATIME", "kind": 6, "sortText": "z", "filterText": "ST_NOATIME", "insertText": "ST_NOATIME", "insertTextFormat": 1}, {"label": "ST_NODEV", "kind": 6, "sortText": "z", "filterText": "ST_NODEV", "insertText": "ST_NODEV", "insertTextFormat": 1}, {"label": "ST_NODIRATIME", "kind": 6, "sortText": "z", "filterText": "ST_NODIRATIME", "insertText": "ST_NODIRATIME", "insertTextFormat": 1}, {"label": "ST_NOEXEC", "kind": 6, "sortText": "z", "filterText": "ST_NOEXEC", "insertText": "ST_NOEXEC", "insertTextFormat": 1}, {"label": "ST_NOSUID", "kind": 6, "sortText": "z", "filterText": "ST_NOSUID", "insertText": "ST_NOSUID", "insertTextFormat": 1}, {"label": "ST_RDONLY", "kind": 6, "sortText": "z", "filterText": "ST_RDONLY", "insertText": "ST_RDONLY", "insertTextFormat": 1}, {"label": "ST_RELATIME", "kind": 6, "sortText": "z", "filterText": "ST_RELATIME", "insertText": "ST_RELATIME", "insertTextFormat": 1}, {"label": "ST_SYNCHRONOUS", "kind": 6, "sortText": "z", "filterText": "ST_SYNCHRONOUS", "insertText": "ST_SYNCHRONOUS", "insertTextFormat": 1}, {"label": "ST_WRITE", "kind": 6, "sortText": "z", "filterText": "ST_WRITE", "insertText": "ST_WRITE", "insertTextFormat": 1}, {"label": "startfile", "kind": 3, "sortText": "z", "filterText": "startfile", "insertText": "startfile(${1:path})$0", "insertTextFormat": 2}, {"label": "stat", "kind": 3, "sortText": "z", "filterText": "stat", "insertText": "stat(${1:path})$0", "insertTextFormat": 2}, {"label": "stat_result", "kind": 7, "sortText": "z", "filterText": "stat_result", "insertText": "stat_result(${1:tuple})$0", "insertTextFormat": 2}, {"label": "statvfs", "kind": 3, "sortText": "z", "filterText": "statvfs", "insertText": "statvfs(${1:path})$0", "insertTextFormat": 2}, {"label": "statvfs_result", "kind": 7, "sortText": "z", "filterText": "statvfs_result", "insertText": "statvfs_result()$0", "insertTextFormat": 2}, {"label": "strerror", "kind": 3, "sortText": "z", "filterText": "strerror", "insertText": "strerror(${1:code})$0", "insertTextFormat": 2}, {"label": "supports_bytes_environ", "kind": 6, "sortText": "z", "filterText": "supports_bytes_environ", "insertText": "supports_bytes_environ", "insertTextFormat": 1}, {"label": "supports_dir_fd", "kind": 6, "sortText": "z", "filterText": "supports_dir_fd", "insertText": "supports_dir_fd", "insertTextFormat": 1}, {"label": "supports_effective_ids", "kind": 6, "sortText": "z", "filterText": "supports_effective_ids", "insertText": "supports_effective_ids", "insertTextFormat": 1}, {"label": "supports_fd", "kind": 6, "sortText": "z", "filterText": "supports_fd", "insertText": "supports_fd", "insertTextFormat": 1}, {"label": "supports_follow_symlinks", "kind": 6, "sortText": "z", "filterText": "supports_follow_symlinks", "insertText": "supports_follow_symlinks", "insertTextFormat": 1}, {"label": "symlink", "kind": 3, "sortText": "z", "filterText": "symlink", "insertText": "symlink(${1:source}, ${2:link_name})$0", "insertTextFormat": 2}, {"label": "sync", "kind": 3, "sortText": "z", "filterText": "sync", "insertText": "sync()$0", "insertTextFormat": 2}, {"label": "sys", "kind": 9, "sortText": "z", "filterText": "sys", "insertText": "sys", "insertTextFormat": 1}, {"label": "sysconf", "kind": 3, "sortText": "z", "filterText": "sysconf", "insertText": "sysconf(${1:name})$0", "insertTextFormat": 2}, {"label": "sysconf_names", "kind": 6, "sortText": "z", "filterText": "sysconf_names", "insertText": "sysconf_names", "insertTextFormat": 1}, {"label": "system", "kind": 3, "sortText": "z", "filterText": "system", "insertText": "system(${1:command})$0", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 770, "result": {"label": "scandir", "kind": 3, "detail": "def scandir", "documentation": {"kind": "markdown", "value": "```text\nscandir() -> _ScandirIterator[str]\nscandir(path: int) -> _ScandirIterator[str]\nscandir(path: Union[AnyStr, PathLike[AnyStr]]) -> _ScandirIterator[AnyStr]\nscandir() -> _ScandirIterator[str]\nscandir(path: Union[AnyStr, PathLike[AnyStr]]) -> _ScandirIterator[AnyStr]\n```"}, "sortText": "z", "filterText": "scandir", "insertText": "scandir()$0", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 771, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 22}, "end": {"line": 29, "character": 22}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 23}, "end": {"line": 29, "character": 23}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 772, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 24}, "end": {"line": 29, "character": 24}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 773, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 25}, "end": {"line": 29, "character": 25}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 26}, "end": {"line": 29, "character": 26}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 27}, "end": {"line": 29, "character": 27}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 26}, "end": {"line": 29, "character": 26}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 774, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 28}, "end": {"line": 29, "character": 28}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 775, "result": {"signatures": [{"label": "scandir() -> _ScandirIterator[str]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": []}, {"label": "scandir(path: int) -> _ScandirIterator[str]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "path: int"}]}, {"label": "scandir(path: Union[AnyStr, PathLike[AnyStr]]) -> _ScandirIterator[AnyStr]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "path: Union[AnyStr, PathLike[AnyStr]]"}]}, {"label": "scandir() -> _ScandirIterator[str]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": []}, {"label": "scandir(path: Union[AnyStr, PathLike[AnyStr]]) -> _ScandirIterator[AnyStr]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "path: Union[AnyStr, PathLike[AnyStr]]"}]}], "activeSignature": 0, "activeParameter": null}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 776, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 777, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 54}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__) + '/test_flacs/'", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 778, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 779, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 780, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 29}, "end": {"line": 29, "character": 29}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 781, "result": {"isIncomplete": false, "items": [{"label": "False", "kind": 14, "sortText": "z", "filterText": "False", "insertText": "False", "insertTextFormat": 1}, {"label": "FileExistsError", "kind": 7, "sortText": "z", "filterText": "FileExistsError", "insertText": "FileExistsError($0)", "insertTextFormat": 2}, {"label": "FileNotFoundError", "kind": 7, "sortText": "z", "filterText": "FileNotFoundError", "insertText": "FileNotFoundError($0)", "insertTextFormat": 2}, {"label": "filter", "kind": 3, "sortText": "z", "filterText": "filter", "insertText": "filter(${1:function}, ${2:iterable})$0", "insertTextFormat": 2}, {"label": "FLAC", "kind": 9, "sortText": "z", "filterText": "FLAC", "insertText": "FLAC", "insertTextFormat": 1}, {"label": "flac_dir", "kind": 6, "sortText": "z", "filterText": "flac_dir", "insertText": "flac_dir", "insertTextFormat": 1}, {"label": "float", "kind": 7, "sortText": "z", "filterText": "float", "insertText": "float($0)", "insertTextFormat": 2}, {"label": "FloatingPointError", "kind": 7, "sortText": "z", "filterText": "FloatingPointError", "insertText": "FloatingPointError($0)", "insertTextFormat": 2}, {"label": "format", "kind": 3, "sortText": "z", "filterText": "format", "insertText": "format(${1:o})$0", "insertTextFormat": 2}, {"label": "frozenset", "kind": 7, "sortText": "z", "filterText": "frozenset", "insertText": "frozenset($0)", "insertTextFormat": 2}, {"label": "FutureWarning", "kind": 7, "sortText": "z", "filterText": "FutureWarning", "insertText": "FutureWarning($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 782, "result": {"signatures": [{"label": "scandir() -> _ScandirIterator[str]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": []}, {"label": "scandir(path: int) -> _ScandirIterator[str]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "path: int"}]}, {"label": "scandir(path: Union[AnyStr, PathLike[AnyStr]]) -> _ScandirIterator[AnyStr]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "path: Union[AnyStr, PathLike[AnyStr]]"}]}, {"label": "scandir() -> _ScandirIterator[str]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": []}, {"label": "scandir(path: Union[AnyStr, PathLike[AnyStr]]) -> _ScandirIterator[AnyStr]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "path: Union[AnyStr, PathLike[AnyStr]]"}]}], "activeSignature": 0, "activeParameter": null}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 30}, "end": {"line": 29, "character": 30}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 31}, "end": {"line": 29, "character": 31}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 783, "result": {"label": "flac_dir", "kind": 6, "detail": "flac_dir = os.path.realpath(__file__) + '/test_flacs/'", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "flac_dir", "insertText": "flac_dir", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 784, "result": {"signatures": [{"label": "scandir() -> _ScandirIterator[str]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": []}, {"label": "scandir(path: int) -> _ScandirIterator[str]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "path: int"}]}, {"label": "scandir(path: Union[AnyStr, PathLike[AnyStr]]) -> _ScandirIterator[AnyStr]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "path: Union[AnyStr, PathLike[AnyStr]]"}]}, {"label": "scandir() -> _ScandirIterator[str]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": []}, {"label": "scandir(path: Union[AnyStr, PathLike[AnyStr]]) -> _ScandirIterator[AnyStr]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "path: Union[AnyStr, PathLike[AnyStr]]"}]}], "activeSignature": 0, "activeParameter": null}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 32}, "end": {"line": 29, "character": 32}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 785, "result": {"signatures": [{"label": "scandir() -> _ScandirIterator[str]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": []}, {"label": "scandir(path: int) -> _ScandirIterator[str]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "path: int"}]}, {"label": "scandir(path: Union[AnyStr, PathLike[AnyStr]]) -> _ScandirIterator[AnyStr]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "path: Union[AnyStr, PathLike[AnyStr]]"}]}, {"label": "scandir() -> _ScandirIterator[str]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": []}, {"label": "scandir(path: Union[AnyStr, PathLike[AnyStr]]) -> _ScandirIterator[AnyStr]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "path: Union[AnyStr, PathLike[AnyStr]]"}]}], "activeSignature": 0, "activeParameter": null}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 786, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 32}, "end": {"line": 29, "character": 32}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 787, "result": {"signatures": [{"label": "scandir() -> _ScandirIterator[str]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": []}, {"label": "scandir(path: int) -> _ScandirIterator[str]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "path: int"}]}, {"label": "scandir(path: Union[AnyStr, PathLike[AnyStr]]) -> _ScandirIterator[AnyStr]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "path: Union[AnyStr, PathLike[AnyStr]]"}]}, {"label": "scandir() -> _ScandirIterator[str]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": []}, {"label": "scandir(path: Union[AnyStr, PathLike[AnyStr]]) -> _ScandirIterator[AnyStr]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "path: Union[AnyStr, PathLike[AnyStr]]"}]}], "activeSignature": 0, "activeParameter": null}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 788, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 789, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 54}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__) + '/test_flacs/'", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 790, "result": [{"range": {"start": {"line": 29, "character": 27}, "end": {"line": 29, "character": 31}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 791, "result": {"signatures": [{"label": "scandir() -> _ScandirIterator[str]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": []}, {"label": "scandir(path: int) -> _ScandirIterator[str]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "path: int"}]}, {"label": "scandir(path: Union[AnyStr, PathLike[AnyStr]]) -> _ScandirIterator[AnyStr]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "path: Union[AnyStr, PathLike[AnyStr]]"}]}, {"label": "scandir() -> _ScandirIterator[str]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": []}, {"label": "scandir(path: Union[AnyStr, PathLike[AnyStr]]) -> _ScandirIterator[AnyStr]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "path: Union[AnyStr, PathLike[AnyStr]]"}]}], "activeSignature": 0, "activeParameter": null}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 792, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 33}, "end": {"line": 29, "character": 33}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 793, "result": {"isIncomplete": false, "items": [{"label": "flac_dir", "kind": 6, "sortText": "z", "filterText": "flac_dir", "insertText": "flac_dir", "insertTextFormat": 1}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 794, "result": {"label": "flac_dir", "kind": 6, "detail": "flac_dir = os.path.realpath(__file__) + '/test_flacs/'", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "flac_dir", "insertText": "flac_dir", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 795, "result": {"signatures": [{"label": "scandir() -> _ScandirIterator[str]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": []}, {"label": "scandir(path: int) -> _ScandirIterator[str]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "path: int"}]}, {"label": "scandir(path: Union[AnyStr, PathLike[AnyStr]]) -> _ScandirIterator[AnyStr]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "path: Union[AnyStr, PathLike[AnyStr]]"}]}, {"label": "scandir() -> _ScandirIterator[str]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": []}, {"label": "scandir(path: Union[AnyStr, PathLike[AnyStr]]) -> _ScandirIterator[AnyStr]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "path: Union[AnyStr, PathLike[AnyStr]]"}]}], "activeSignature": 0, "activeParameter": null}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 796, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 34}, "end": {"line": 29, "character": 34}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 35}, "end": {"line": 29, "character": 35}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 797, "result": {"signatures": [{"label": "scandir() -> _ScandirIterator[str]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": []}, {"label": "scandir(path: int) -> _ScandirIterator[str]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "path: int"}]}, {"label": "scandir(path: Union[AnyStr, PathLike[AnyStr]]) -> _ScandirIterator[AnyStr]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "path: Union[AnyStr, PathLike[AnyStr]]"}]}, {"label": "scandir() -> _ScandirIterator[str]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": []}, {"label": "scandir(path: Union[AnyStr, PathLike[AnyStr]]) -> _ScandirIterator[AnyStr]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "path: Union[AnyStr, PathLike[AnyStr]]"}]}], "activeSignature": 0, "activeParameter": null}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 36}, "end": {"line": 29, "character": 36}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 798, "result": {"signatures": [{"label": "scandir() -> _ScandirIterator[str]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": []}, {"label": "scandir(path: int) -> _ScandirIterator[str]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "path: int"}]}, {"label": "scandir(path: Union[AnyStr, PathLike[AnyStr]]) -> _ScandirIterator[AnyStr]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "path: Union[AnyStr, PathLike[AnyStr]]"}]}, {"label": "scandir() -> _ScandirIterator[str]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": []}, {"label": "scandir(path: Union[AnyStr, PathLike[AnyStr]]) -> _ScandirIterator[AnyStr]", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "parameters": [{"label": "path: Union[AnyStr, PathLike[AnyStr]]"}]}], "activeSignature": 0, "activeParameter": null}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 36}, "end": {"line": 29, "character": 37}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 799, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 800, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 36}, "end": {"line": 29, "character": 36}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 801, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 802, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 803, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 54}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__) + '/test_flacs/'", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 37}, "end": {"line": 29, "character": 37}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 804, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 805, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 54}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__) + '/test_flacs/'", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 36}, "end": {"line": 29, "character": 36}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 806, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 807, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 54}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__) + '/test_flacs/'", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 29, "character": 37}, "end": {"line": 29, "character": 37}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 808, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 809, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 54}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__) + '/test_flacs/'", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 810, "result": {"isIncomplete": false, "items": [{"label": "abs", "kind": 3, "sortText": "z", "filterText": "abs", "insertText": "abs(${1:n})$0", "insertTextFormat": 2}, {"label": "all", "kind": 3, "sortText": "z", "filterText": "all", "insertText": "all(${1:i})$0", "insertTextFormat": 2}, {"label": "any", "kind": 3, "sortText": "z", "filterText": "any", "insertText": "any(${1:i})$0", "insertTextFormat": 2}, {"label": "ArithmeticError", "kind": 7, "sortText": "z", "filterText": "ArithmeticError", "insertText": "ArithmeticError($0)", "insertTextFormat": 2}, {"label": "ascii", "kind": 3, "sortText": "z", "filterText": "ascii", "insertText": "ascii(${1:o})$0", "insertTextFormat": 2}, {"label": "assert", "kind": 14, "sortText": "z", "filterText": "assert", "insertText": "assert", "insertTextFormat": 1}, {"label": "AssertionError", "kind": 7, "sortText": "z", "filterText": "AssertionError", "insertText": "AssertionError($0)", "insertTextFormat": 2}, {"label": "async", "kind": 14, "sortText": "z", "filterText": "async", "insertText": "async", "insertTextFormat": 1}, {"label": "AttributeError", "kind": 7, "sortText": "z", "filterText": "AttributeError", "insertText": "AttributeError($0)", "insertTextFormat": 2}, {"label": "await", "kind": 14, "sortText": "z", "filterText": "await", "insertText": "await", "insertTextFormat": 1}, {"label": "BaseException", "kind": 7, "sortText": "z", "filterText": "BaseException", "insertText": "BaseException($0)", "insertTextFormat": 2}, {"label": "bin", "kind": 3, "sortText": "z", "filterText": "bin", "insertText": "bin(${1:number})$0", "insertTextFormat": 2}, {"label": "BlockingIOError", "kind": 7, "sortText": "z", "filterText": "BlockingIOError", "insertText": "BlockingIOError($0)", "insertTextFormat": 2}, {"label": "bool", "kind": 7, "sortText": "z", "filterText": "bool", "insertText": "bool($0)", "insertTextFormat": 2}, {"label": "break", "kind": 14, "sortText": "z", "filterText": "break", "insertText": "break", "insertTextFormat": 1}, {"label": "breakpoint", "kind": 3, "sortText": "z", "filterText": "breakpoint", "insertText": "breakpoint($0)", "insertTextFormat": 2}, {"label": "BrokenPipeError", "kind": 7, "sortText": "z", "filterText": "BrokenPipeError", "insertText": "BrokenPipeError($0)", "insertTextFormat": 2}, {"label": "BufferError", "kind": 7, "sortText": "z", "filterText": "BufferError", "insertText": "BufferError($0)", "insertTextFormat": 2}, {"label": "bytearray", "kind": 7, "sortText": "z", "filterText": "bytearray", "insertText": "bytearray()$0", "insertTextFormat": 2}, {"label": "bytes", "kind": 7, "sortText": "z", "filterText": "bytes", "insertText": "bytes(${1:ints})$0", "insertTextFormat": 2}, {"label": "BytesWarning", "kind": 7, "sortText": "z", "filterText": "BytesWarning", "insertText": "BytesWarning($0)", "insertTextFormat": 2}, {"label": "callable", "kind": 3, "sortText": "z", "filterText": "callable", "insertText": "callable(${1:o})$0", "insertTextFormat": 2}, {"label": "ChildProcessError", "kind": 7, "sortText": "z", "filterText": "ChildProcessError", "insertText": "ChildProcessError($0)", "insertTextFormat": 2}, {"label": "chr", "kind": 3, "sortText": "z", "filterText": "chr", "insertText": "chr(${1:code})$0", "insertTextFormat": 2}, {"label": "class", "kind": 14, "sortText": "z", "filterText": "class", "insertText": "class", "insertTextFormat": 1}, {"label": "classmethod", "kind": 7, "sortText": "z", "filterText": "classmethod", "insertText": "classmethod(${1:f})$0", "insertTextFormat": 2}, {"label": "compile", "kind": 3, "sortText": "z", "filterText": "compile", "insertText": "compile(${1:source}, ${2:filename}, ${3:mode})$0", "insertTextFormat": 2}, {"label": "complex", "kind": 7, "sortText": "z", "filterText": "complex", "insertText": "complex($0)", "insertTextFormat": 2}, {"label": "ConnectionAbortedError", "kind": 7, "sortText": "z", "filterText": "ConnectionAbortedError", "insertText": "ConnectionAbortedError($0)", "insertTextFormat": 2}, {"label": "ConnectionError", "kind": 7, "sortText": "z", "filterText": "ConnectionError", "insertText": "ConnectionError($0)", "insertTextFormat": 2}, {"label": "ConnectionRefusedError", "kind": 7, "sortText": "z", "filterText": "ConnectionRefusedError", "insertText": "ConnectionRefusedError($0)", "insertTextFormat": 2}, {"label": "ConnectionResetError", "kind": 7, "sortText": "z", "filterText": "ConnectionResetError", "insertText": "ConnectionResetError($0)", "insertTextFormat": 2}, {"label": "continue", "kind": 14, "sortText": "z", "filterText": "continue", "insertText": "continue", "insertTextFormat": 1}, {"label": "copyright", "kind": 3, "sortText": "z", "filterText": "copyright", "insertText": "copyright()$0", "insertTextFormat": 2}, {"label": "credits", "kind": 3, "sortText": "z", "filterText": "credits", "insertText": "credits()$0", "insertTextFormat": 2}, {"label": "def", "kind": 14, "sortText": "z", "filterText": "def", "insertText": "def", "insertTextFormat": 1}, {"label": "del", "kind": 14, "sortText": "z", "filterText": "del", "insertText": "del", "insertTextFormat": 1}, {"label": "delattr", "kind": 3, "sortText": "z", "filterText": "delattr", "insertText": "delattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "DeprecationWarning", "kind": 7, "sortText": "z", "filterText": "DeprecationWarning", "insertText": "DeprecationWarning($0)", "insertTextFormat": 2}, {"label": "dict", "kind": 7, "sortText": "z", "filterText": "dict", "insertText": "dict($0)", "insertTextFormat": 2}, {"label": "dir", "kind": 3, "sortText": "z", "filterText": "dir", "insertText": "dir($0)", "insertTextFormat": 2}, {"label": "divmod", "kind": 3, "sortText": "z", "filterText": "divmod", "insertText": "divmod(${1:a}, ${2:b})$0", "insertTextFormat": 2}, {"label": "ellipsis", "kind": 7, "sortText": "z", "filterText": "ellipsis", "insertText": "ellipsis()$0", "insertTextFormat": 2}, {"label": "Ellipsis", "kind": 6, "sortText": "z", "filterText": "Ellipsis", "insertText": "Ellipsis", "insertTextFormat": 1}, {"label": "enumerate", "kind": 7, "sortText": "z", "filterText": "enumerate", "insertText": "enumerate(${1:iterable})$0", "insertTextFormat": 2}, {"label": "EnvironmentError", "kind": 6, "sortText": "z", "filterText": "EnvironmentError", "insertText": "EnvironmentError", "insertTextFormat": 1}, {"label": "EOFError", "kind": 7, "sortText": "z", "filterText": "EOFError", "insertText": "EOFError($0)", "insertTextFormat": 2}, {"label": "eval", "kind": 3, "sortText": "z", "filterText": "eval", "insertText": "eval(${1:source})$0", "insertTextFormat": 2}, {"label": "Exception", "kind": 7, "sortText": "z", "filterText": "Exception", "insertText": "Exception($0)", "insertTextFormat": 2}, {"label": "exec", "kind": 3, "sortText": "z", "filterText": "exec", "insertText": "exec(${1:object})$0", "insertTextFormat": 2}, {"label": "exit", "kind": 3, "sortText": "z", "filterText": "exit", "insertText": "exit($0)", "insertTextFormat": 2}, {"label": "False", "kind": 14, "sortText": "z", "filterText": "False", "insertText": "False", "insertTextFormat": 1}, {"label": "FileExistsError", "kind": 7, "sortText": "z", "filterText": "FileExistsError", "insertText": "FileExistsError($0)", "insertTextFormat": 2}, {"label": "filename", "kind": 6, "sortText": "z", "filterText": "filename", "insertText": "filename", "insertTextFormat": 1}, {"label": "FileNotFoundError", "kind": 7, "sortText": "z", "filterText": "FileNotFoundError", "insertText": "FileNotFoundError($0)", "insertTextFormat": 2}, {"label": "filter", "kind": 3, "sortText": "z", "filterText": "filter", "insertText": "filter(${1:function}, ${2:iterable})$0", "insertTextFormat": 2}, {"label": "FLAC", "kind": 9, "sortText": "z", "filterText": "FLAC", "insertText": "FLAC", "insertTextFormat": 1}, {"label": "flac_dir", "kind": 6, "sortText": "z", "filterText": "flac_dir", "insertText": "flac_dir", "insertTextFormat": 1}, {"label": "float", "kind": 7, "sortText": "z", "filterText": "float", "insertText": "float($0)", "insertTextFormat": 2}, {"label": "FloatingPointError", "kind": 7, "sortText": "z", "filterText": "FloatingPointError", "insertText": "FloatingPointError($0)", "insertTextFormat": 2}, {"label": "for", "kind": 14, "sortText": "z", "filterText": "for", "insertText": "for", "insertTextFormat": 1}, {"label": "format", "kind": 3, "sortText": "z", "filterText": "format", "insertText": "format(${1:o})$0", "insertTextFormat": 2}, {"label": "from", "kind": 14, "sortText": "z", "filterText": "from", "insertText": "from", "insertTextFormat": 1}, {"label": "frozenset", "kind": 7, "sortText": "z", "filterText": "frozenset", "insertText": "frozenset($0)", "insertTextFormat": 2}, {"label": "FutureWarning", "kind": 7, "sortText": "z", "filterText": "FutureWarning", "insertText": "FutureWarning($0)", "insertTextFormat": 2}, {"label": "GeneratorExit", "kind": 7, "sortText": "z", "filterText": "GeneratorExit", "insertText": "GeneratorExit($0)", "insertTextFormat": 2}, {"label": "get_songs", "kind": 3, "sortText": "z", "filterText": "get_songs", "insertText": "get_songs(${1:directory}, ${2:albums})$0", "insertTextFormat": 2}, {"label": "getattr", "kind": 3, "sortText": "z", "filterText": "getattr", "insertText": "getattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "global", "kind": 14, "sortText": "z", "filterText": "global", "insertText": "global", "insertTextFormat": 1}, {"label": "globals", "kind": 3, "sortText": "z", "filterText": "globals", "insertText": "globals()$0", "insertTextFormat": 2}, {"label": "hasattr", "kind": 3, "sortText": "z", "filterText": "hasattr", "insertText": "hasattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "hash", "kind": 3, "sortText": "z", "filterText": "hash", "insertText": "hash(${1:o})$0", "insertTextFormat": 2}, {"label": "help", "kind": 3, "sortText": "z", "filterText": "help", "insertText": "help($0)", "insertTextFormat": 2}, {"label": "hex", "kind": 3, "sortText": "z", "filterText": "hex", "insertText": "hex(${1:i})$0", "insertTextFormat": 2}, {"label": "id", "kind": 3, "sortText": "z", "filterText": "id", "insertText": "id(${1:o})$0", "insertTextFormat": 2}, {"label": "if", "kind": 14, "sortText": "z", "filterText": "if", "insertText": "if", "insertTextFormat": 1}, {"label": "import", "kind": 14, "sortText": "z", "filterText": "import", "insertText": "import", "insertTextFormat": 1}, {"label": "ImportError", "kind": 7, "sortText": "z", "filterText": "ImportError", "insertText": "ImportError($0)", "insertTextFormat": 2}, {"label": "ImportWarning", "kind": 7, "sortText": "z", "filterText": "ImportWarning", "insertText": "ImportWarning($0)", "insertTextFormat": 2}, {"label": "IndentationError", "kind": 7, "sortText": "z", "filterText": "IndentationError", "insertText": "IndentationError($0)", "insertTextFormat": 2}, {"label": "IndexError", "kind": 7, "sortText": "z", "filterText": "IndexError", "insertText": "IndexError($0)", "insertTextFormat": 2}, {"label": "input", "kind": 3, "sortText": "z", "filterText": "input", "insertText": "input($0)", "insertTextFormat": 2}, {"label": "int", "kind": 7, "sortText": "z", "filterText": "int", "insertText": "int($0)", "insertTextFormat": 2}, {"label": "InterruptedError", "kind": 7, "sortText": "z", "filterText": "InterruptedError", "insertText": "InterruptedError($0)", "insertTextFormat": 2}, {"label": "IOError", "kind": 6, "sortText": "z", "filterText": "IOError", "insertText": "IOError", "insertTextFormat": 1}, {"label": "IsADirectoryError", "kind": 7, "sortText": "z", "filterText": "IsADirectoryError", "insertText": "IsADirectoryError($0)", "insertTextFormat": 2}, {"label": "isinstance", "kind": 3, "sortText": "z", "filterText": "isinstance", "insertText": "isinstance(${1:o}, ${2:t})$0", "insertTextFormat": 2}, {"label": "issubclass", "kind": 3, "sortText": "z", "filterText": "issubclass", "insertText": "issubclass(${1:cls}, ${2:classinfo})$0", "insertTextFormat": 2}, {"label": "iter", "kind": 3, "sortText": "z", "filterText": "iter", "insertText": "iter(${1:iterable})$0", "insertTextFormat": 2}, {"label": "KeyboardInterrupt", "kind": 7, "sortText": "z", "filterText": "KeyboardInterrupt", "insertText": "KeyboardInterrupt($0)", "insertTextFormat": 2}, {"label": "KeyError", "kind": 7, "sortText": "z", "filterText": "KeyError", "insertText": "KeyError($0)", "insertTextFormat": 2}, {"label": "lambda", "kind": 14, "sortText": "z", "filterText": "lambda", "insertText": "lambda", "insertTextFormat": 1}, {"label": "len", "kind": 3, "sortText": "z", "filterText": "len", "insertText": "len(${1:o})$0", "insertTextFormat": 2}, {"label": "license", "kind": 3, "sortText": "z", "filterText": "license", "insertText": "license()$0", "insertTextFormat": 2}, {"label": "list", "kind": 7, "sortText": "z", "filterText": "list", "insertText": "list()$0", "insertTextFormat": 2}, {"label": "locals", "kind": 3, "sortText": "z", "filterText": "locals", "insertText": "locals()$0", "insertTextFormat": 2}, {"label": "LookupError", "kind": 7, "sortText": "z", "filterText": "LookupError", "insertText": "LookupError($0)", "insertTextFormat": 2}, {"label": "map", "kind": 3, "sortText": "z", "filterText": "map", "insertText": "map(${1:func}, ${2:iter1})$0", "insertTextFormat": 2}, {"label": "max", "kind": 3, "sortText": "z", "filterText": "max", "insertText": "max(${1:arg1}, ${2:arg2})$0", "insertTextFormat": 2}, {"label": "MemoryError", "kind": 7, "sortText": "z", "filterText": "MemoryError", "insertText": "MemoryError($0)", "insertTextFormat": 2}, {"label": "memoryview", "kind": 7, "sortText": "z", "filterText": "memoryview", "insertText": "memoryview(${1:obj})$0", "insertTextFormat": 2}, {"label": "min", "kind": 3, "sortText": "z", "filterText": "min", "insertText": "min(${1:arg1}, ${2:arg2})$0", "insertTextFormat": 2}, {"label": "ModuleNotFoundError", "kind": 7, "sortText": "z", "filterText": "ModuleNotFoundError", "insertText": "ModuleNotFoundError($0)", "insertTextFormat": 2}, {"label": "NameError", "kind": 7, "sortText": "z", "filterText": "NameError", "insertText": "NameError($0)", "insertTextFormat": 2}, {"label": "next", "kind": 3, "sortText": "z", "filterText": "next", "insertText": "next(${1:i})$0", "insertTextFormat": 2}, {"label": "None", "kind": 14, "sortText": "z", "filterText": "None", "insertText": "None", "insertTextFormat": 1}, {"label": "nonlocal", "kind": 14, "sortText": "z", "filterText": "nonlocal", "insertText": "nonlocal", "insertTextFormat": 1}, {"label": "not", "kind": 14, "sortText": "z", "filterText": "not", "insertText": "not", "insertTextFormat": 1}, {"label": "NotADirectoryError", "kind": 7, "sortText": "z", "filterText": "NotADirectoryError", "insertText": "NotADirectoryError($0)", "insertTextFormat": 2}, {"label": "NotImplemented", "kind": 6, "sortText": "z", "filterText": "NotImplemented", "insertText": "NotImplemented", "insertTextFormat": 1}, {"label": "NotImplementedError", "kind": 7, "sortText": "z", "filterText": "NotImplementedError", "insertText": "NotImplementedError($0)", "insertTextFormat": 2}, {"label": "object", "kind": 7, "sortText": "z", "filterText": "object", "insertText": "object()$0", "insertTextFormat": 2}, {"label": "oct", "kind": 3, "sortText": "z", "filterText": "oct", "insertText": "oct(${1:i})$0", "insertTextFormat": 2}, {"label": "open", "kind": 3, "sortText": "z", "filterText": "open", "insertText": "open(${1:file})$0", "insertTextFormat": 2}, {"label": "ord", "kind": 3, "sortText": "z", "filterText": "ord", "insertText": "ord(${1:c})$0", "insertTextFormat": 2}, {"label": "os", "kind": 9, "sortText": "z", "filterText": "os", "insertText": "os", "insertTextFormat": 1}, {"label": "OSError", "kind": 7, "sortText": "z", "filterText": "OSError", "insertText": "OSError($0)", "insertTextFormat": 2}, {"label": "OverflowError", "kind": 7, "sortText": "z", "filterText": "OverflowError", "insertText": "OverflowError($0)", "insertTextFormat": 2}, {"label": "pass", "kind": 14, "sortText": "z", "filterText": "pass", "insertText": "pass", "insertTextFormat": 1}, {"label": "PendingDeprecationWarning", "kind": 7, "sortText": "z", "filterText": "PendingDeprecationWarning", "insertText": "PendingDeprecationWarning($0)", "insertTextFormat": 2}, {"label": "PermissionError", "kind": 7, "sortText": "z", "filterText": "PermissionError", "insertText": "PermissionError($0)", "insertTextFormat": 2}, {"label": "pow", "kind": 3, "sortText": "z", "filterText": "pow", "insertText": "pow(${1:x}, ${2:y})$0", "insertTextFormat": 2}, {"label": "print", "kind": 3, "sortText": "z", "filterText": "print", "insertText": "print($0)", "insertTextFormat": 2}, {"label": "ProcessLookupError", "kind": 7, "sortText": "z", "filterText": "ProcessLookupError", "insertText": "ProcessLookupError($0)", "insertTextFormat": 2}, {"label": "property", "kind": 7, "sortText": "z", "filterText": "property", "insertText": "property($0)", "insertTextFormat": 2}, {"label": "quit", "kind": 3, "sortText": "z", "filterText": "quit", "insertText": "quit($0)", "insertTextFormat": 2}, {"label": "raise", "kind": 14, "sortText": "z", "filterText": "raise", "insertText": "raise", "insertTextFormat": 1}, {"label": "range", "kind": 7, "sortText": "z", "filterText": "range", "insertText": "range(${1:stop})$0", "insertTextFormat": 2}, {"label": "read_metadata", "kind": 3, "sortText": "z", "filterText": "read_metadata", "insertText": "read_metadata(${1:flac_filename})$0", "insertTextFormat": 2}, {"label": "RecursionError", "kind": 7, "sortText": "z", "filterText": "RecursionError", "insertText": "RecursionError($0)", "insertTextFormat": 2}, {"label": "ReferenceError", "kind": 7, "sortText": "z", "filterText": "ReferenceError", "insertText": "ReferenceError($0)", "insertTextFormat": 2}, {"label": "repr", "kind": 3, "sortText": "z", "filterText": "repr", "insertText": "repr(${1:o})$0", "insertTextFormat": 2}, {"label": "ResourceWarning", "kind": 7, "sortText": "z", "filterText": "ResourceWarning", "insertText": "ResourceWarning($0)", "insertTextFormat": 2}, {"label": "return", "kind": 14, "sortText": "z", "filterText": "return", "insertText": "return", "insertTextFormat": 1}, {"label": "reversed", "kind": 3, "sortText": "z", "filterText": "reversed", "insertText": "reversed(${1:object})$0", "insertTextFormat": 2}, {"label": "round", "kind": 3, "sortText": "z", "filterText": "round", "insertText": "round(${1:number})$0", "insertTextFormat": 2}, {"label": "RuntimeError", "kind": 7, "sortText": "z", "filterText": "RuntimeError", "insertText": "RuntimeError($0)", "insertTextFormat": 2}, {"label": "RuntimeWarning", "kind": 7, "sortText": "z", "filterText": "RuntimeWarning", "insertText": "RuntimeWarning($0)", "insertTextFormat": 2}, {"label": "set", "kind": 7, "sortText": "z", "filterText": "set", "insertText": "set($0)", "insertTextFormat": 2}, {"label": "setattr", "kind": 3, "sortText": "z", "filterText": "setattr", "insertText": "setattr(${1:object}, ${2:name}, ${3:value})$0", "insertTextFormat": 2}, {"label": "slice", "kind": 7, "sortText": "z", "filterText": "slice", "insertText": "slice(${1:stop})$0", "insertTextFormat": 2}, {"label": "sorted", "kind": 3, "sortText": "z", "filterText": "sorted", "insertText": "sorted(${1:iterable})$0", "insertTextFormat": 2}, {"label": "staticmethod", "kind": 7, "sortText": "z", "filterText": "staticmethod", "insertText": "staticmethod(${1:f})$0", "insertTextFormat": 2}, {"label": "StopAsyncIteration", "kind": 7, "sortText": "z", "filterText": "StopAsyncIteration", "insertText": "StopAsyncIteration($0)", "insertTextFormat": 2}, {"label": "StopIteration", "kind": 7, "sortText": "z", "filterText": "StopIteration", "insertText": "StopIteration($0)", "insertTextFormat": 2}, {"label": "str", "kind": 7, "sortText": "z", "filterText": "str", "insertText": "str($0)", "insertTextFormat": 2}, {"label": "sum", "kind": 3, "sortText": "z", "filterText": "sum", "insertText": "sum(${1:iterable})$0", "insertTextFormat": 2}, {"label": "super", "kind": 7, "sortText": "z", "filterText": "super", "insertText": "super(${1:t}, ${2:obj})$0", "insertTextFormat": 2}, {"label": "SyntaxError", "kind": 7, "sortText": "z", "filterText": "SyntaxError", "insertText": "SyntaxError($0)", "insertTextFormat": 2}, {"label": "SyntaxWarning", "kind": 7, "sortText": "z", "filterText": "SyntaxWarning", "insertText": "SyntaxWarning($0)", "insertTextFormat": 2}, {"label": "SystemError", "kind": 7, "sortText": "z", "filterText": "SystemError", "insertText": "SystemError($0)", "insertTextFormat": 2}, {"label": "SystemExit", "kind": 7, "sortText": "z", "filterText": "SystemExit", "insertText": "SystemExit($0)", "insertTextFormat": 2}, {"label": "TabError", "kind": 7, "sortText": "z", "filterText": "TabError", "insertText": "TabError($0)", "insertTextFormat": 2}, {"label": "TimeoutError", "kind": 7, "sortText": "z", "filterText": "TimeoutError", "insertText": "TimeoutError($0)", "insertTextFormat": 2}, {"label": "True", "kind": 14, "sortText": "z", "filterText": "True", "insertText": "True", "insertTextFormat": 1}, {"label": "try", "kind": 14, "sortText": "z", "filterText": "try", "insertText": "try", "insertTextFormat": 1}, {"label": "tuple", "kind": 7, "sortText": "z", "filterText": "tuple", "insertText": "tuple($0)", "insertTextFormat": 2}, {"label": "type", "kind": 7, "sortText": "z", "filterText": "type", "insertText": "type(${1:o})$0", "insertTextFormat": 2}, {"label": "TypeError", "kind": 7, "sortText": "z", "filterText": "TypeError", "insertText": "TypeError($0)", "insertTextFormat": 2}, {"label": "UnboundLocalError", "kind": 7, "sortText": "z", "filterText": "UnboundLocalError", "insertText": "UnboundLocalError($0)", "insertTextFormat": 2}, {"label": "UnicodeDecodeError", "kind": 7, "sortText": "z", "filterText": "UnicodeDecodeError", "insertText": "UnicodeDecodeError(${1:encoding}, ${2:object}, ${3:start}, ${4:end}, ${5:reason})$0", "insertTextFormat": 2}, {"label": "UnicodeEncodeError", "kind": 7, "sortText": "z", "filterText": "UnicodeEncodeError", "insertText": "UnicodeEncodeError(${1:encoding}, ${2:object}, ${3:start}, ${4:end}, ${5:reason})$0", "insertTextFormat": 2}, {"label": "UnicodeError", "kind": 7, "sortText": "z", "filterText": "UnicodeError", "insertText": "UnicodeError($0)", "insertTextFormat": 2}, {"label": "UnicodeTranslateError", "kind": 7, "sortText": "z", "filterText": "UnicodeTranslateError", "insertText": "UnicodeTranslateError($0)", "insertTextFormat": 2}, {"label": "UnicodeWarning", "kind": 7, "sortText": "z", "filterText": "UnicodeWarning", "insertText": "UnicodeWarning($0)", "insertTextFormat": 2}, {"label": "UserWarning", "kind": 7, "sortText": "z", "filterText": "UserWarning", "insertText": "UserWarning($0)", "insertTextFormat": 2}, {"label": "ValueError", "kind": 7, "sortText": "z", "filterText": "ValueError", "insertText": "ValueError($0)", "insertTextFormat": 2}, {"label": "vars", "kind": 3, "sortText": "z", "filterText": "vars", "insertText": "vars($0)", "insertTextFormat": 2}, {"label": "Warning", "kind": 7, "sortText": "z", "filterText": "Warning", "insertText": "Warning($0)", "insertTextFormat": 2}, {"label": "while", "kind": 14, "sortText": "z", "filterText": "while", "insertText": "while", "insertTextFormat": 1}, {"label": "WindowsError", "kind": 7, "sortText": "z", "filterText": "WindowsError", "insertText": "WindowsError($0)", "insertTextFormat": 2}, {"label": "with", "kind": 14, "sortText": "z", "filterText": "with", "insertText": "with", "insertTextFormat": 1}, {"label": "yield", "kind": 14, "sortText": "z", "filterText": "yield", "insertText": "yield", "insertTextFormat": 1}, {"label": "ZeroDivisionError", "kind": 7, "sortText": "z", "filterText": "ZeroDivisionError", "insertText": "ZeroDivisionError($0)", "insertTextFormat": 2}, {"label": "zip", "kind": 3, "sortText": "z", "filterText": "zip", "insertText": "zip(${1:iter1})$0", "insertTextFormat": 2}, {"label": "__doc__", "kind": 6, "sortText": "z", "filterText": "__doc__", "insertText": "__doc__", "insertTextFormat": 1}, {"label": "__file__", "kind": 6, "sortText": "z", "filterText": "__file__", "insertText": "__file__", "insertTextFormat": 1}, {"label": "__import__", "kind": 3, "sortText": "z", "filterText": "__import__", "insertText": "__import__(${1:name})$0", "insertTextFormat": 2}, {"label": "__name__", "kind": 6, "sortText": "z", "filterText": "__name__", "insertText": "__name__", "insertTextFormat": 1}, {"label": "__package__", "kind": 6, "sortText": "z", "filterText": "__package__", "insertText": "__package__", "insertTextFormat": 1}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 811, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 812, "result": {"label": "set", "kind": 7, "detail": "class set", "documentation": {"kind": "markdown", "value": "```text\nset(iterable: Iterable[_T]=...)\n\nset() -> new empty set object\nset(iterable) -> new set object\n\nBuild an unordered collection of unique elements.\n```"}, "sortText": "z", "filterText": "set", "insertText": "set($0)", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 0}, "end": {"line": 30, "character": 4}}, "message": "IndentationError: expected an indented block", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 813, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 54}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__) + '/test_flacs/'", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 814, "result": {"contents": {"kind": "markdown", "value": "```python\nflac_dir: Union[str, str]\n```\n---\n```python\nflac_dir = os.path.realpath(__file__) + '/test_flacs/'\n```\n**Full name:** `fixer.flac_dir`"}, "range": {"start": {"line": 29, "character": 27}, "end": {"line": 29, "character": 35}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 815, "result": {"isIncomplete": false, "items": [{"label": "abs", "kind": 3, "sortText": "z", "filterText": "abs", "insertText": "abs(${1:n})$0", "insertTextFormat": 2}, {"label": "all", "kind": 3, "sortText": "z", "filterText": "all", "insertText": "all(${1:i})$0", "insertTextFormat": 2}, {"label": "any", "kind": 3, "sortText": "z", "filterText": "any", "insertText": "any(${1:i})$0", "insertTextFormat": 2}, {"label": "ArithmeticError", "kind": 7, "sortText": "z", "filterText": "ArithmeticError", "insertText": "ArithmeticError($0)", "insertTextFormat": 2}, {"label": "ascii", "kind": 3, "sortText": "z", "filterText": "ascii", "insertText": "ascii(${1:o})$0", "insertTextFormat": 2}, {"label": "assert", "kind": 14, "sortText": "z", "filterText": "assert", "insertText": "assert", "insertTextFormat": 1}, {"label": "AssertionError", "kind": 7, "sortText": "z", "filterText": "AssertionError", "insertText": "AssertionError($0)", "insertTextFormat": 2}, {"label": "async", "kind": 14, "sortText": "z", "filterText": "async", "insertText": "async", "insertTextFormat": 1}, {"label": "AttributeError", "kind": 7, "sortText": "z", "filterText": "AttributeError", "insertText": "AttributeError($0)", "insertTextFormat": 2}, {"label": "await", "kind": 14, "sortText": "z", "filterText": "await", "insertText": "await", "insertTextFormat": 1}, {"label": "BaseException", "kind": 7, "sortText": "z", "filterText": "BaseException", "insertText": "BaseException($0)", "insertTextFormat": 2}, {"label": "bin", "kind": 3, "sortText": "z", "filterText": "bin", "insertText": "bin(${1:number})$0", "insertTextFormat": 2}, {"label": "BlockingIOError", "kind": 7, "sortText": "z", "filterText": "BlockingIOError", "insertText": "BlockingIOError($0)", "insertTextFormat": 2}, {"label": "bool", "kind": 7, "sortText": "z", "filterText": "bool", "insertText": "bool($0)", "insertTextFormat": 2}, {"label": "break", "kind": 14, "sortText": "z", "filterText": "break", "insertText": "break", "insertTextFormat": 1}, {"label": "breakpoint", "kind": 3, "sortText": "z", "filterText": "breakpoint", "insertText": "breakpoint($0)", "insertTextFormat": 2}, {"label": "BrokenPipeError", "kind": 7, "sortText": "z", "filterText": "BrokenPipeError", "insertText": "BrokenPipeError($0)", "insertTextFormat": 2}, {"label": "BufferError", "kind": 7, "sortText": "z", "filterText": "BufferError", "insertText": "BufferError($0)", "insertTextFormat": 2}, {"label": "bytearray", "kind": 7, "sortText": "z", "filterText": "bytearray", "insertText": "bytearray()$0", "insertTextFormat": 2}, {"label": "bytes", "kind": 7, "sortText": "z", "filterText": "bytes", "insertText": "bytes(${1:ints})$0", "insertTextFormat": 2}, {"label": "BytesWarning", "kind": 7, "sortText": "z", "filterText": "BytesWarning", "insertText": "BytesWarning($0)", "insertTextFormat": 2}, {"label": "callable", "kind": 3, "sortText": "z", "filterText": "callable", "insertText": "callable(${1:o})$0", "insertTextFormat": 2}, {"label": "ChildProcessError", "kind": 7, "sortText": "z", "filterText": "ChildProcessError", "insertText": "ChildProcessError($0)", "insertTextFormat": 2}, {"label": "chr", "kind": 3, "sortText": "z", "filterText": "chr", "insertText": "chr(${1:code})$0", "insertTextFormat": 2}, {"label": "class", "kind": 14, "sortText": "z", "filterText": "class", "insertText": "class", "insertTextFormat": 1}, {"label": "classmethod", "kind": 7, "sortText": "z", "filterText": "classmethod", "insertText": "classmethod(${1:f})$0", "insertTextFormat": 2}, {"label": "compile", "kind": 3, "sortText": "z", "filterText": "compile", "insertText": "compile(${1:source}, ${2:filename}, ${3:mode})$0", "insertTextFormat": 2}, {"label": "complex", "kind": 7, "sortText": "z", "filterText": "complex", "insertText": "complex($0)", "insertTextFormat": 2}, {"label": "ConnectionAbortedError", "kind": 7, "sortText": "z", "filterText": "ConnectionAbortedError", "insertText": "ConnectionAbortedError($0)", "insertTextFormat": 2}, {"label": "ConnectionError", "kind": 7, "sortText": "z", "filterText": "ConnectionError", "insertText": "ConnectionError($0)", "insertTextFormat": 2}, {"label": "ConnectionRefusedError", "kind": 7, "sortText": "z", "filterText": "ConnectionRefusedError", "insertText": "ConnectionRefusedError($0)", "insertTextFormat": 2}, {"label": "ConnectionResetError", "kind": 7, "sortText": "z", "filterText": "ConnectionResetError", "insertText": "ConnectionResetError($0)", "insertTextFormat": 2}, {"label": "continue", "kind": 14, "sortText": "z", "filterText": "continue", "insertText": "continue", "insertTextFormat": 1}, {"label": "copyright", "kind": 3, "sortText": "z", "filterText": "copyright", "insertText": "copyright()$0", "insertTextFormat": 2}, {"label": "credits", "kind": 3, "sortText": "z", "filterText": "credits", "insertText": "credits()$0", "insertTextFormat": 2}, {"label": "def", "kind": 14, "sortText": "z", "filterText": "def", "insertText": "def", "insertTextFormat": 1}, {"label": "del", "kind": 14, "sortText": "z", "filterText": "del", "insertText": "del", "insertTextFormat": 1}, {"label": "delattr", "kind": 3, "sortText": "z", "filterText": "delattr", "insertText": "delattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "DeprecationWarning", "kind": 7, "sortText": "z", "filterText": "DeprecationWarning", "insertText": "DeprecationWarning($0)", "insertTextFormat": 2}, {"label": "dict", "kind": 7, "sortText": "z", "filterText": "dict", "insertText": "dict($0)", "insertTextFormat": 2}, {"label": "dir", "kind": 3, "sortText": "z", "filterText": "dir", "insertText": "dir($0)", "insertTextFormat": 2}, {"label": "divmod", "kind": 3, "sortText": "z", "filterText": "divmod", "insertText": "divmod(${1:a}, ${2:b})$0", "insertTextFormat": 2}, {"label": "ellipsis", "kind": 7, "sortText": "z", "filterText": "ellipsis", "insertText": "ellipsis()$0", "insertTextFormat": 2}, {"label": "Ellipsis", "kind": 6, "sortText": "z", "filterText": "Ellipsis", "insertText": "Ellipsis", "insertTextFormat": 1}, {"label": "enumerate", "kind": 7, "sortText": "z", "filterText": "enumerate", "insertText": "enumerate(${1:iterable})$0", "insertTextFormat": 2}, {"label": "EnvironmentError", "kind": 6, "sortText": "z", "filterText": "EnvironmentError", "insertText": "EnvironmentError", "insertTextFormat": 1}, {"label": "EOFError", "kind": 7, "sortText": "z", "filterText": "EOFError", "insertText": "EOFError($0)", "insertTextFormat": 2}, {"label": "eval", "kind": 3, "sortText": "z", "filterText": "eval", "insertText": "eval(${1:source})$0", "insertTextFormat": 2}, {"label": "Exception", "kind": 7, "sortText": "z", "filterText": "Exception", "insertText": "Exception($0)", "insertTextFormat": 2}, {"label": "exec", "kind": 3, "sortText": "z", "filterText": "exec", "insertText": "exec(${1:object})$0", "insertTextFormat": 2}, {"label": "exit", "kind": 3, "sortText": "z", "filterText": "exit", "insertText": "exit($0)", "insertTextFormat": 2}, {"label": "False", "kind": 14, "sortText": "z", "filterText": "False", "insertText": "False", "insertTextFormat": 1}, {"label": "FileExistsError", "kind": 7, "sortText": "z", "filterText": "FileExistsError", "insertText": "FileExistsError($0)", "insertTextFormat": 2}, {"label": "filename", "kind": 6, "sortText": "z", "filterText": "filename", "insertText": "filename", "insertTextFormat": 1}, {"label": "FileNotFoundError", "kind": 7, "sortText": "z", "filterText": "FileNotFoundError", "insertText": "FileNotFoundError($0)", "insertTextFormat": 2}, {"label": "filter", "kind": 3, "sortText": "z", "filterText": "filter", "insertText": "filter(${1:function}, ${2:iterable})$0", "insertTextFormat": 2}, {"label": "FLAC", "kind": 9, "sortText": "z", "filterText": "FLAC", "insertText": "FLAC", "insertTextFormat": 1}, {"label": "flac_dir", "kind": 6, "sortText": "z", "filterText": "flac_dir", "insertText": "flac_dir", "insertTextFormat": 1}, {"label": "float", "kind": 7, "sortText": "z", "filterText": "float", "insertText": "float($0)", "insertTextFormat": 2}, {"label": "FloatingPointError", "kind": 7, "sortText": "z", "filterText": "FloatingPointError", "insertText": "FloatingPointError($0)", "insertTextFormat": 2}, {"label": "for", "kind": 14, "sortText": "z", "filterText": "for", "insertText": "for", "insertTextFormat": 1}, {"label": "format", "kind": 3, "sortText": "z", "filterText": "format", "insertText": "format(${1:o})$0", "insertTextFormat": 2}, {"label": "from", "kind": 14, "sortText": "z", "filterText": "from", "insertText": "from", "insertTextFormat": 1}, {"label": "frozenset", "kind": 7, "sortText": "z", "filterText": "frozenset", "insertText": "frozenset($0)", "insertTextFormat": 2}, {"label": "FutureWarning", "kind": 7, "sortText": "z", "filterText": "FutureWarning", "insertText": "FutureWarning($0)", "insertTextFormat": 2}, {"label": "GeneratorExit", "kind": 7, "sortText": "z", "filterText": "GeneratorExit", "insertText": "GeneratorExit($0)", "insertTextFormat": 2}, {"label": "get_songs", "kind": 3, "sortText": "z", "filterText": "get_songs", "insertText": "get_songs(${1:directory}, ${2:albums})$0", "insertTextFormat": 2}, {"label": "getattr", "kind": 3, "sortText": "z", "filterText": "getattr", "insertText": "getattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "global", "kind": 14, "sortText": "z", "filterText": "global", "insertText": "global", "insertTextFormat": 1}, {"label": "globals", "kind": 3, "sortText": "z", "filterText": "globals", "insertText": "globals()$0", "insertTextFormat": 2}, {"label": "hasattr", "kind": 3, "sortText": "z", "filterText": "hasattr", "insertText": "hasattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "hash", "kind": 3, "sortText": "z", "filterText": "hash", "insertText": "hash(${1:o})$0", "insertTextFormat": 2}, {"label": "help", "kind": 3, "sortText": "z", "filterText": "help", "insertText": "help($0)", "insertTextFormat": 2}, {"label": "hex", "kind": 3, "sortText": "z", "filterText": "hex", "insertText": "hex(${1:i})$0", "insertTextFormat": 2}, {"label": "id", "kind": 3, "sortText": "z", "filterText": "id", "insertText": "id(${1:o})$0", "insertTextFormat": 2}, {"label": "if", "kind": 14, "sortText": "z", "filterText": "if", "insertText": "if", "insertTextFormat": 1}, {"label": "import", "kind": 14, "sortText": "z", "filterText": "import", "insertText": "import", "insertTextFormat": 1}, {"label": "ImportError", "kind": 7, "sortText": "z", "filterText": "ImportError", "insertText": "ImportError($0)", "insertTextFormat": 2}, {"label": "ImportWarning", "kind": 7, "sortText": "z", "filterText": "ImportWarning", "insertText": "ImportWarning($0)", "insertTextFormat": 2}, {"label": "IndentationError", "kind": 7, "sortText": "z", "filterText": "IndentationError", "insertText": "IndentationError($0)", "insertTextFormat": 2}, {"label": "IndexError", "kind": 7, "sortText": "z", "filterText": "IndexError", "insertText": "IndexError($0)", "insertTextFormat": 2}, {"label": "input", "kind": 3, "sortText": "z", "filterText": "input", "insertText": "input($0)", "insertTextFormat": 2}, {"label": "int", "kind": 7, "sortText": "z", "filterText": "int", "insertText": "int($0)", "insertTextFormat": 2}, {"label": "InterruptedError", "kind": 7, "sortText": "z", "filterText": "InterruptedError", "insertText": "InterruptedError($0)", "insertTextFormat": 2}, {"label": "IOError", "kind": 6, "sortText": "z", "filterText": "IOError", "insertText": "IOError", "insertTextFormat": 1}, {"label": "IsADirectoryError", "kind": 7, "sortText": "z", "filterText": "IsADirectoryError", "insertText": "IsADirectoryError($0)", "insertTextFormat": 2}, {"label": "isinstance", "kind": 3, "sortText": "z", "filterText": "isinstance", "insertText": "isinstance(${1:o}, ${2:t})$0", "insertTextFormat": 2}, {"label": "issubclass", "kind": 3, "sortText": "z", "filterText": "issubclass", "insertText": "issubclass(${1:cls}, ${2:classinfo})$0", "insertTextFormat": 2}, {"label": "iter", "kind": 3, "sortText": "z", "filterText": "iter", "insertText": "iter(${1:iterable})$0", "insertTextFormat": 2}, {"label": "KeyboardInterrupt", "kind": 7, "sortText": "z", "filterText": "KeyboardInterrupt", "insertText": "KeyboardInterrupt($0)", "insertTextFormat": 2}, {"label": "KeyError", "kind": 7, "sortText": "z", "filterText": "KeyError", "insertText": "KeyError($0)", "insertTextFormat": 2}, {"label": "lambda", "kind": 14, "sortText": "z", "filterText": "lambda", "insertText": "lambda", "insertTextFormat": 1}, {"label": "len", "kind": 3, "sortText": "z", "filterText": "len", "insertText": "len(${1:o})$0", "insertTextFormat": 2}, {"label": "license", "kind": 3, "sortText": "z", "filterText": "license", "insertText": "license()$0", "insertTextFormat": 2}, {"label": "list", "kind": 7, "sortText": "z", "filterText": "list", "insertText": "list()$0", "insertTextFormat": 2}, {"label": "locals", "kind": 3, "sortText": "z", "filterText": "locals", "insertText": "locals()$0", "insertTextFormat": 2}, {"label": "LookupError", "kind": 7, "sortText": "z", "filterText": "LookupError", "insertText": "LookupError($0)", "insertTextFormat": 2}, {"label": "map", "kind": 3, "sortText": "z", "filterText": "map", "insertText": "map(${1:func}, ${2:iter1})$0", "insertTextFormat": 2}, {"label": "max", "kind": 3, "sortText": "z", "filterText": "max", "insertText": "max(${1:arg1}, ${2:arg2})$0", "insertTextFormat": 2}, {"label": "MemoryError", "kind": 7, "sortText": "z", "filterText": "MemoryError", "insertText": "MemoryError($0)", "insertTextFormat": 2}, {"label": "memoryview", "kind": 7, "sortText": "z", "filterText": "memoryview", "insertText": "memoryview(${1:obj})$0", "insertTextFormat": 2}, {"label": "min", "kind": 3, "sortText": "z", "filterText": "min", "insertText": "min(${1:arg1}, ${2:arg2})$0", "insertTextFormat": 2}, {"label": "ModuleNotFoundError", "kind": 7, "sortText": "z", "filterText": "ModuleNotFoundError", "insertText": "ModuleNotFoundError($0)", "insertTextFormat": 2}, {"label": "NameError", "kind": 7, "sortText": "z", "filterText": "NameError", "insertText": "NameError($0)", "insertTextFormat": 2}, {"label": "next", "kind": 3, "sortText": "z", "filterText": "next", "insertText": "next(${1:i})$0", "insertTextFormat": 2}, {"label": "None", "kind": 14, "sortText": "z", "filterText": "None", "insertText": "None", "insertTextFormat": 1}, {"label": "nonlocal", "kind": 14, "sortText": "z", "filterText": "nonlocal", "insertText": "nonlocal", "insertTextFormat": 1}, {"label": "not", "kind": 14, "sortText": "z", "filterText": "not", "insertText": "not", "insertTextFormat": 1}, {"label": "NotADirectoryError", "kind": 7, "sortText": "z", "filterText": "NotADirectoryError", "insertText": "NotADirectoryError($0)", "insertTextFormat": 2}, {"label": "NotImplemented", "kind": 6, "sortText": "z", "filterText": "NotImplemented", "insertText": "NotImplemented", "insertTextFormat": 1}, {"label": "NotImplementedError", "kind": 7, "sortText": "z", "filterText": "NotImplementedError", "insertText": "NotImplementedError($0)", "insertTextFormat": 2}, {"label": "object", "kind": 7, "sortText": "z", "filterText": "object", "insertText": "object()$0", "insertTextFormat": 2}, {"label": "oct", "kind": 3, "sortText": "z", "filterText": "oct", "insertText": "oct(${1:i})$0", "insertTextFormat": 2}, {"label": "open", "kind": 3, "sortText": "z", "filterText": "open", "insertText": "open(${1:file})$0", "insertTextFormat": 2}, {"label": "ord", "kind": 3, "sortText": "z", "filterText": "ord", "insertText": "ord(${1:c})$0", "insertTextFormat": 2}, {"label": "os", "kind": 9, "sortText": "z", "filterText": "os", "insertText": "os", "insertTextFormat": 1}, {"label": "OSError", "kind": 7, "sortText": "z", "filterText": "OSError", "insertText": "OSError($0)", "insertTextFormat": 2}, {"label": "OverflowError", "kind": 7, "sortText": "z", "filterText": "OverflowError", "insertText": "OverflowError($0)", "insertTextFormat": 2}, {"label": "pass", "kind": 14, "sortText": "z", "filterText": "pass", "insertText": "pass", "insertTextFormat": 1}, {"label": "PendingDeprecationWarning", "kind": 7, "sortText": "z", "filterText": "PendingDeprecationWarning", "insertText": "PendingDeprecationWarning($0)", "insertTextFormat": 2}, {"label": "PermissionError", "kind": 7, "sortText": "z", "filterText": "PermissionError", "insertText": "PermissionError($0)", "insertTextFormat": 2}, {"label": "pow", "kind": 3, "sortText": "z", "filterText": "pow", "insertText": "pow(${1:x}, ${2:y})$0", "insertTextFormat": 2}, {"label": "print", "kind": 3, "sortText": "z", "filterText": "print", "insertText": "print($0)", "insertTextFormat": 2}, {"label": "ProcessLookupError", "kind": 7, "sortText": "z", "filterText": "ProcessLookupError", "insertText": "ProcessLookupError($0)", "insertTextFormat": 2}, {"label": "property", "kind": 7, "sortText": "z", "filterText": "property", "insertText": "property($0)", "insertTextFormat": 2}, {"label": "quit", "kind": 3, "sortText": "z", "filterText": "quit", "insertText": "quit($0)", "insertTextFormat": 2}, {"label": "raise", "kind": 14, "sortText": "z", "filterText": "raise", "insertText": "raise", "insertTextFormat": 1}, {"label": "range", "kind": 7, "sortText": "z", "filterText": "range", "insertText": "range(${1:stop})$0", "insertTextFormat": 2}, {"label": "read_metadata", "kind": 3, "sortText": "z", "filterText": "read_metadata", "insertText": "read_metadata(${1:flac_filename})$0", "insertTextFormat": 2}, {"label": "RecursionError", "kind": 7, "sortText": "z", "filterText": "RecursionError", "insertText": "RecursionError($0)", "insertTextFormat": 2}, {"label": "ReferenceError", "kind": 7, "sortText": "z", "filterText": "ReferenceError", "insertText": "ReferenceError($0)", "insertTextFormat": 2}, {"label": "repr", "kind": 3, "sortText": "z", "filterText": "repr", "insertText": "repr(${1:o})$0", "insertTextFormat": 2}, {"label": "ResourceWarning", "kind": 7, "sortText": "z", "filterText": "ResourceWarning", "insertText": "ResourceWarning($0)", "insertTextFormat": 2}, {"label": "return", "kind": 14, "sortText": "z", "filterText": "return", "insertText": "return", "insertTextFormat": 1}, {"label": "reversed", "kind": 3, "sortText": "z", "filterText": "reversed", "insertText": "reversed(${1:object})$0", "insertTextFormat": 2}, {"label": "round", "kind": 3, "sortText": "z", "filterText": "round", "insertText": "round(${1:number})$0", "insertTextFormat": 2}, {"label": "RuntimeError", "kind": 7, "sortText": "z", "filterText": "RuntimeError", "insertText": "RuntimeError($0)", "insertTextFormat": 2}, {"label": "RuntimeWarning", "kind": 7, "sortText": "z", "filterText": "RuntimeWarning", "insertText": "RuntimeWarning($0)", "insertTextFormat": 2}, {"label": "set", "kind": 7, "sortText": "z", "filterText": "set", "insertText": "set($0)", "insertTextFormat": 2}, {"label": "setattr", "kind": 3, "sortText": "z", "filterText": "setattr", "insertText": "setattr(${1:object}, ${2:name}, ${3:value})$0", "insertTextFormat": 2}, {"label": "slice", "kind": 7, "sortText": "z", "filterText": "slice", "insertText": "slice(${1:stop})$0", "insertTextFormat": 2}, {"label": "sorted", "kind": 3, "sortText": "z", "filterText": "sorted", "insertText": "sorted(${1:iterable})$0", "insertTextFormat": 2}, {"label": "staticmethod", "kind": 7, "sortText": "z", "filterText": "staticmethod", "insertText": "staticmethod(${1:f})$0", "insertTextFormat": 2}, {"label": "StopAsyncIteration", "kind": 7, "sortText": "z", "filterText": "StopAsyncIteration", "insertText": "StopAsyncIteration($0)", "insertTextFormat": 2}, {"label": "StopIteration", "kind": 7, "sortText": "z", "filterText": "StopIteration", "insertText": "StopIteration($0)", "insertTextFormat": 2}, {"label": "str", "kind": 7, "sortText": "z", "filterText": "str", "insertText": "str($0)", "insertTextFormat": 2}, {"label": "sum", "kind": 3, "sortText": "z", "filterText": "sum", "insertText": "sum(${1:iterable})$0", "insertTextFormat": 2}, {"label": "super", "kind": 7, "sortText": "z", "filterText": "super", "insertText": "super(${1:t}, ${2:obj})$0", "insertTextFormat": 2}, {"label": "SyntaxError", "kind": 7, "sortText": "z", "filterText": "SyntaxError", "insertText": "SyntaxError($0)", "insertTextFormat": 2}, {"label": "SyntaxWarning", "kind": 7, "sortText": "z", "filterText": "SyntaxWarning", "insertText": "SyntaxWarning($0)", "insertTextFormat": 2}, {"label": "SystemError", "kind": 7, "sortText": "z", "filterText": "SystemError", "insertText": "SystemError($0)", "insertTextFormat": 2}, {"label": "SystemExit", "kind": 7, "sortText": "z", "filterText": "SystemExit", "insertText": "SystemExit($0)", "insertTextFormat": 2}, {"label": "TabError", "kind": 7, "sortText": "z", "filterText": "TabError", "insertText": "TabError($0)", "insertTextFormat": 2}, {"label": "TimeoutError", "kind": 7, "sortText": "z", "filterText": "TimeoutError", "insertText": "TimeoutError($0)", "insertTextFormat": 2}, {"label": "True", "kind": 14, "sortText": "z", "filterText": "True", "insertText": "True", "insertTextFormat": 1}, {"label": "try", "kind": 14, "sortText": "z", "filterText": "try", "insertText": "try", "insertTextFormat": 1}, {"label": "tuple", "kind": 7, "sortText": "z", "filterText": "tuple", "insertText": "tuple($0)", "insertTextFormat": 2}, {"label": "type", "kind": 7, "sortText": "z", "filterText": "type", "insertText": "type(${1:o})$0", "insertTextFormat": 2}, {"label": "TypeError", "kind": 7, "sortText": "z", "filterText": "TypeError", "insertText": "TypeError($0)", "insertTextFormat": 2}, {"label": "UnboundLocalError", "kind": 7, "sortText": "z", "filterText": "UnboundLocalError", "insertText": "UnboundLocalError($0)", "insertTextFormat": 2}, {"label": "UnicodeDecodeError", "kind": 7, "sortText": "z", "filterText": "UnicodeDecodeError", "insertText": "UnicodeDecodeError(${1:encoding}, ${2:object}, ${3:start}, ${4:end}, ${5:reason})$0", "insertTextFormat": 2}, {"label": "UnicodeEncodeError", "kind": 7, "sortText": "z", "filterText": "UnicodeEncodeError", "insertText": "UnicodeEncodeError(${1:encoding}, ${2:object}, ${3:start}, ${4:end}, ${5:reason})$0", "insertTextFormat": 2}, {"label": "UnicodeError", "kind": 7, "sortText": "z", "filterText": "UnicodeError", "insertText": "UnicodeError($0)", "insertTextFormat": 2}, {"label": "UnicodeTranslateError", "kind": 7, "sortText": "z", "filterText": "UnicodeTranslateError", "insertText": "UnicodeTranslateError($0)", "insertTextFormat": 2}, {"label": "UnicodeWarning", "kind": 7, "sortText": "z", "filterText": "UnicodeWarning", "insertText": "UnicodeWarning($0)", "insertTextFormat": 2}, {"label": "UserWarning", "kind": 7, "sortText": "z", "filterText": "UserWarning", "insertText": "UserWarning($0)", "insertTextFormat": 2}, {"label": "ValueError", "kind": 7, "sortText": "z", "filterText": "ValueError", "insertText": "ValueError($0)", "insertTextFormat": 2}, {"label": "vars", "kind": 3, "sortText": "z", "filterText": "vars", "insertText": "vars($0)", "insertTextFormat": 2}, {"label": "Warning", "kind": 7, "sortText": "z", "filterText": "Warning", "insertText": "Warning($0)", "insertTextFormat": 2}, {"label": "while", "kind": 14, "sortText": "z", "filterText": "while", "insertText": "while", "insertTextFormat": 1}, {"label": "WindowsError", "kind": 7, "sortText": "z", "filterText": "WindowsError", "insertText": "WindowsError($0)", "insertTextFormat": 2}, {"label": "with", "kind": 14, "sortText": "z", "filterText": "with", "insertText": "with", "insertTextFormat": 1}, {"label": "yield", "kind": 14, "sortText": "z", "filterText": "yield", "insertText": "yield", "insertTextFormat": 1}, {"label": "ZeroDivisionError", "kind": 7, "sortText": "z", "filterText": "ZeroDivisionError", "insertText": "ZeroDivisionError($0)", "insertTextFormat": 2}, {"label": "zip", "kind": 3, "sortText": "z", "filterText": "zip", "insertText": "zip(${1:iter1})$0", "insertTextFormat": 2}, {"label": "__doc__", "kind": 6, "sortText": "z", "filterText": "__doc__", "insertText": "__doc__", "insertTextFormat": 1}, {"label": "__file__", "kind": 6, "sortText": "z", "filterText": "__file__", "insertText": "__file__", "insertTextFormat": 1}, {"label": "__import__", "kind": 3, "sortText": "z", "filterText": "__import__", "insertText": "__import__(${1:name})$0", "insertTextFormat": 2}, {"label": "__name__", "kind": 6, "sortText": "z", "filterText": "__name__", "insertText": "__name__", "insertTextFormat": 1}, {"label": "__package__", "kind": 6, "sortText": "z", "filterText": "__package__", "insertText": "__package__", "insertTextFormat": 1}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 816, "result": {"label": "print", "kind": 3, "detail": "def print", "documentation": {"kind": "markdown", "value": "```text\nprint(*values: object, sep: Optional[Text]=..., end: Optional[Text]=..., file: Optional[_Writer]=..., flush: bool=...) -> None\n\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.\n```"}, "sortText": "z", "filterText": "print", "insertText": "print($0)", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 817, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 818, "result": {"signatures": [{"label": "print(*values: object, sep: Optional[Text]=..., end: Optional[Text]=..., file: Optional[_Writer]=..., flush: bool=...) -> None", "documentation": {"kind": "markdown", "value": "```text\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.\n```"}, "parameters": [{"label": "*values: object"}, {"label": "sep: Optional[Text]=..."}, {"label": "end: Optional[Text]=..."}, {"label": "file: Optional[_Writer]=..."}, {"label": "flush: bool=..."}]}], "activeSignature": 0, "activeParameter": 0}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 819, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 820, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 54}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__) + '/test_flacs/'", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}, {"name": "filename", "kind": 13, "range": {"start": {"line": 29, "character": 0}, "end": {"line": 30, "character": 11}}, "selectionRange": {"start": {"line": 29, "character": 4}, "end": {"line": 29, "character": 12}}, "detail": "for filename in os.scandir(flac_dir): print()", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 821, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 822, "result": {"contents": {"kind": "markdown", "value": "```python\ndef print(*values: object, sep: Optional[Text]=..., end: Optional[Text]=..., file: Optional[_Writer]=..., flush: bool=...) -> None\n```\n---\n```text\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.\n```\n**Full name:** `builtins.print`"}, "range": {"start": {"line": 30, "character": 4}, "end": {"line": 30, "character": 9}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 823, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 824, "result": {"isIncomplete": false, "items": [{"label": "False", "kind": 14, "sortText": "z", "filterText": "False", "insertText": "False", "insertTextFormat": 1}, {"label": "file=", "kind": 6, "sortText": "a", "filterText": "file=", "insertText": "file=", "insertTextFormat": 1}, {"label": "FileExistsError", "kind": 7, "sortText": "z", "filterText": "FileExistsError", "insertText": "FileExistsError($0)", "insertTextFormat": 2}, {"label": "filename", "kind": 6, "sortText": "z", "filterText": "filename", "insertText": "filename", "insertTextFormat": 1}, {"label": "FileNotFoundError", "kind": 7, "sortText": "z", "filterText": "FileNotFoundError", "insertText": "FileNotFoundError($0)", "insertTextFormat": 2}, {"label": "filter", "kind": 3, "sortText": "z", "filterText": "filter", "insertText": "filter(${1:function}, ${2:iterable})$0", "insertTextFormat": 2}, {"label": "FLAC", "kind": 9, "sortText": "z", "filterText": "FLAC", "insertText": "FLAC", "insertTextFormat": 1}, {"label": "flac_dir", "kind": 6, "sortText": "z", "filterText": "flac_dir", "insertText": "flac_dir", "insertTextFormat": 1}, {"label": "float", "kind": 7, "sortText": "z", "filterText": "float", "insertText": "float($0)", "insertTextFormat": 2}, {"label": "FloatingPointError", "kind": 7, "sortText": "z", "filterText": "FloatingPointError", "insertText": "FloatingPointError($0)", "insertTextFormat": 2}, {"label": "flush=", "kind": 6, "sortText": "a", "filterText": "flush=", "insertText": "flush=", "insertTextFormat": 1}, {"label": "format", "kind": 3, "sortText": "z", "filterText": "format", "insertText": "format(${1:o})$0", "insertTextFormat": 2}, {"label": "frozenset", "kind": 7, "sortText": "z", "filterText": "frozenset", "insertText": "frozenset($0)", "insertTextFormat": 2}, {"label": "FutureWarning", "kind": 7, "sortText": "z", "filterText": "FutureWarning", "insertText": "FutureWarning($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 825, "result": {"label": "filename", "kind": 6, "detail": "for filename in os.scandir(flac_dir): print(f)", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "filename", "insertText": "filename", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 826, "result": {"label": "FileNotFoundError", "kind": 7, "detail": "class FileNotFoundError", "documentation": {"kind": "markdown", "value": "```text\nFileNotFoundError(*args: object)\n\nFile not found.\n```"}, "sortText": "z", "filterText": "FileNotFoundError", "insertText": "FileNotFoundError($0)", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 827, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 828, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": [{"range": {"start": {"line": 30, "character": 19}, "end": {"line": 30, "character": 20}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 829, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 830, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 831, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 54}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__) + '/test_flacs/'", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}, {"name": "filename", "kind": 13, "range": {"start": {"line": 29, "character": 0}, "end": {"line": 30, "character": 19}}, "selectionRange": {"start": {"line": 29, "character": 4}, "end": {"line": 29, "character": 12}}, "detail": "for filename in os.scandir(flac_dir): print(filename)", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 832, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 833, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 834, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 54}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__) + '/test_flacs/'", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}, {"name": "filename", "kind": 13, "range": {"start": {"line": 29, "character": 0}, "end": {"line": 30, "character": 19}}, "selectionRange": {"start": {"line": 29, "character": 4}, "end": {"line": 29, "character": 12}}, "detail": "for filename in os.scandir(flac_dir): print(filename)", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 835, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 54}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__) + '/test_flacs/'", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}, {"name": "filename", "kind": 13, "range": {"start": {"line": 29, "character": 0}, "end": {"line": 30, "character": 19}}, "selectionRange": {"start": {"line": 29, "character": 4}, "end": {"line": 29, "character": 12}}, "detail": "for filename in os.scandir(flac_dir): print(filename)", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 836, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 837, "result": {"contents": {"kind": "markdown", "value": "```python\ndef realpath(path: _PathLike[AnyStr]) -> AnyStr\ndef realpath(path: AnyStr) -> AnyStr\ndef realpath(filename: _PathLike[AnyStr]) -> AnyStr\ndef realpath(filename: AnyStr) -> AnyStr\ndef realpath(path: _PathLike[AnyStr]) -> AnyStr\ndef realpath(path: AnyStr) -> AnyStr\ndef realpath(filename: _PathLike[AnyStr]) -> AnyStr\ndef realpath(filename: AnyStr) -> AnyStr\ndef realpath(path: _PathLike[AnyStr]) -> AnyStr\ndef realpath(path: AnyStr) -> AnyStr\ndef realpath(filename: _PathLike[AnyStr]) -> AnyStr\ndef realpath(filename: AnyStr) -> AnyStr\ndef realpath(path: _PathLike[AnyStr]) -> AnyStr\ndef realpath(path: AnyStr) -> AnyStr\ndef realpath(filename: _PathLike[AnyStr]) -> AnyStr\ndef realpath(path: _PathLike[AnyStr]) -> AnyStr\ndef realpath(path: AnyStr) -> AnyStr\ndef realpath(path: _PathLike[AnyStr]) -> AnyStr\n```\n---\n**Full name:** `os.path.realpath`"}, "range": {"start": {"line": 3, "character": 19}, "end": {"line": 3, "character": 27}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 838, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 839, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 54}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__) + '/test_flacs/'", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}, {"name": "filename", "kind": 13, "range": {"start": {"line": 30, "character": 0}, "end": {"line": 31, "character": 19}}, "selectionRange": {"start": {"line": 30, "character": 4}, "end": {"line": 30, "character": 12}}, "detail": "for filename in os.scandir(flac_dir): print(filename)", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 840, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 54}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__) + '/test_flacs/'", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}, {"name": "filename", "kind": 13, "range": {"start": {"line": 29, "character": 0}, "end": {"line": 30, "character": 19}}, "selectionRange": {"start": {"line": 29, "character": 4}, "end": {"line": 29, "character": 12}}, "detail": "for filename in os.scandir(flac_dir): print(filename)", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 841, "result": {"isIncomplete": false, "items": [{"label": "pass", "kind": 14, "sortText": "z", "filterText": "pass", "insertText": "pass", "insertTextFormat": 1}, {"label": "PendingDeprecationWarning", "kind": 7, "sortText": "z", "filterText": "PendingDeprecationWarning", "insertText": "PendingDeprecationWarning($0)", "insertTextFormat": 2}, {"label": "PermissionError", "kind": 7, "sortText": "z", "filterText": "PermissionError", "insertText": "PermissionError($0)", "insertTextFormat": 2}, {"label": "pow", "kind": 3, "sortText": "z", "filterText": "pow", "insertText": "pow(${1:x}, ${2:y})$0", "insertTextFormat": 2}, {"label": "print", "kind": 3, "sortText": "z", "filterText": "print", "insertText": "print($0)", "insertTextFormat": 2}, {"label": "ProcessLookupError", "kind": 7, "sortText": "z", "filterText": "ProcessLookupError", "insertText": "ProcessLookupError($0)", "insertTextFormat": 2}, {"label": "property", "kind": 7, "sortText": "z", "filterText": "property", "insertText": "property($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 842, "result": {"label": "pass", "kind": 14, "detail": "keyword pass", "documentation": {"kind": "markdown", "value": "```text\nThe \"pass\" statement\n********************\n\n   pass_stmt ::= \"pass\"\n\n\"pass\" is a null operation \u2014 when it is executed, nothing happens. It\nis useful as a placeholder when a statement is required syntactically,\nbut no code needs to be executed, for example:\n\n   def f(arg): pass    # a function that does nothing (yet)\n\n   class C: pass       # a class with no methods (yet)\n```"}, "sortText": "z", "filterText": "pass", "insertText": "pass", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 843, "result": {"label": "print", "kind": 3, "detail": "def print", "documentation": {"kind": "markdown", "value": "```text\nprint(*values: object, sep: Optional[Text]=..., end: Optional[Text]=..., file: Optional[_Writer]=..., flush: bool=...) -> None\n\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.\n```"}, "sortText": "z", "filterText": "print", "insertText": "print($0)", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 844, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 655}, "edits": [{"range": {"start": {"line": 4, "character": 0}, "end": {"line": 4, "character": 0}}, "newText": "def jls_extract_def():\n    \n    return \n\n\n"}, {"range": {"start": {"line": 4, "character": 5}, "end": {"line": 4, "character": 5}}, "newText": " = jls_extract_def()"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 845, "result": {"signatures": [{"label": "print(*values: object, sep: Optional[Text]=..., end: Optional[Text]=..., file: Optional[_Writer]=..., flush: bool=...) -> None", "documentation": {"kind": "markdown", "value": "```text\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.\n```"}, "parameters": [{"label": "*values: object"}, {"label": "sep: Optional[Text]=..."}, {"label": "end: Optional[Text]=..."}, {"label": "file: Optional[_Writer]=..."}, {"label": "flush: bool=..."}]}], "activeSignature": 0, "activeParameter": 0}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 846, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 847, "result": {"isIncomplete": false, "items": [{"label": "False", "kind": 14, "sortText": "z", "filterText": "False", "insertText": "False", "insertTextFormat": 1}, {"label": "file=", "kind": 6, "sortText": "a", "filterText": "file=", "insertText": "file=", "insertTextFormat": 1}, {"label": "FileExistsError", "kind": 7, "sortText": "z", "filterText": "FileExistsError", "insertText": "FileExistsError($0)", "insertTextFormat": 2}, {"label": "FileNotFoundError", "kind": 7, "sortText": "z", "filterText": "FileNotFoundError", "insertText": "FileNotFoundError($0)", "insertTextFormat": 2}, {"label": "filter", "kind": 3, "sortText": "z", "filterText": "filter", "insertText": "filter(${1:function}, ${2:iterable})$0", "insertTextFormat": 2}, {"label": "FLAC", "kind": 9, "sortText": "z", "filterText": "FLAC", "insertText": "FLAC", "insertTextFormat": 1}, {"label": "flac_dir", "kind": 6, "sortText": "z", "filterText": "flac_dir", "insertText": "flac_dir", "insertTextFormat": 1}, {"label": "float", "kind": 7, "sortText": "z", "filterText": "float", "insertText": "float($0)", "insertTextFormat": 2}, {"label": "FloatingPointError", "kind": 7, "sortText": "z", "filterText": "FloatingPointError", "insertText": "FloatingPointError($0)", "insertTextFormat": 2}, {"label": "flush=", "kind": 6, "sortText": "a", "filterText": "flush=", "insertText": "flush=", "insertTextFormat": 1}, {"label": "format", "kind": 3, "sortText": "z", "filterText": "format", "insertText": "format(${1:o})$0", "insertTextFormat": 2}, {"label": "frozenset", "kind": 7, "sortText": "z", "filterText": "frozenset", "insertText": "frozenset($0)", "insertTextFormat": 2}, {"label": "FutureWarning", "kind": 7, "sortText": "z", "filterText": "FutureWarning", "insertText": "FutureWarning($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 848, "result": {"signatures": [{"label": "print(*values: object, sep: Optional[Text]=..., end: Optional[Text]=..., file: Optional[_Writer]=..., flush: bool=...) -> None", "documentation": {"kind": "markdown", "value": "```text\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.\n```"}, "parameters": [{"label": "*values: object"}, {"label": "sep: Optional[Text]=..."}, {"label": "end: Optional[Text]=..."}, {"label": "file: Optional[_Writer]=..."}, {"label": "flush: bool=..."}]}], "activeSignature": 0, "activeParameter": 0}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 849, "result": {"label": "file=", "kind": 6, "detail": "param file: Optional[_Writer]=...", "documentation": {"kind": "markdown", "value": "```text\nNoneType()\n```"}, "sortText": "a", "filterText": "file=", "insertText": "file=", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 850, "result": {"label": "flush=", "kind": 6, "detail": "param flush: bool=...", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "a", "filterText": "flush=", "insertText": "flush=", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 851, "result": {"label": "flac_dir", "kind": 6, "detail": "flac_dir = os.path.realpath(__file__) + '/test_flacs/'", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "flac_dir", "insertText": "flac_dir", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 852, "result": {"signatures": [{"label": "print(*values: object, sep: Optional[Text]=..., end: Optional[Text]=..., file: Optional[_Writer]=..., flush: bool=...) -> None", "documentation": {"kind": "markdown", "value": "```text\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.\n```"}, "parameters": [{"label": "*values: object"}, {"label": "sep: Optional[Text]=..."}, {"label": "end: Optional[Text]=..."}, {"label": "file: Optional[_Writer]=..."}, {"label": "flush: bool=..."}]}], "activeSignature": 0, "activeParameter": 0}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 853, "result": {"signatures": [{"label": "print(*values: object, sep: Optional[Text]=..., end: Optional[Text]=..., file: Optional[_Writer]=..., flush: bool=...) -> None", "documentation": {"kind": "markdown", "value": "```text\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.\n```"}, "parameters": [{"label": "*values: object"}, {"label": "sep: Optional[Text]=..."}, {"label": "end: Optional[Text]=..."}, {"label": "file: Optional[_Writer]=..."}, {"label": "flush: bool=..."}]}], "activeSignature": 0, "activeParameter": 0}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 854, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 855, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 54}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__) + '/test_flacs/'", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}, {"name": "filename", "kind": 13, "range": {"start": {"line": 29, "character": 0}, "end": {"line": 30, "character": 19}}, "selectionRange": {"start": {"line": 29, "character": 4}, "end": {"line": 29, "character": 12}}, "detail": "for filename in os.scandir(flac_dir): print(filename)", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 856, "result": {"signatures": [{"label": "print(*values: object, sep: Optional[Text]=..., end: Optional[Text]=..., file: Optional[_Writer]=..., flush: bool=...) -> None", "documentation": {"kind": "markdown", "value": "```text\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.\n```"}, "parameters": [{"label": "*values: object"}, {"label": "sep: Optional[Text]=..."}, {"label": "end: Optional[Text]=..."}, {"label": "file: Optional[_Writer]=..."}, {"label": "flush: bool=..."}]}], "activeSignature": 0, "activeParameter": 0}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 857, "result": [{"title": "Inline variable", "kind": "refactor.inline", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 661}, "edits": [{"range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 11}}, "newText": "print("}, {"range": {"start": {"line": 3, "character": 54}, "end": {"line": 4, "character": 14}}, "newText": ""}, {"range": {"start": {"line": 29, "character": 27}, "end": {"line": 29, "character": 35}}, "newText": "os.path.realpath(__file__) + '/test_flacs/'"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 858, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 54}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__) + '/test_flacs/'", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}, {"name": "filename", "kind": 13, "range": {"start": {"line": 29, "character": 0}, "end": {"line": 30, "character": 19}}, "selectionRange": {"start": {"line": 29, "character": 4}, "end": {"line": 29, "character": 12}}, "detail": "for filename in os.scandir(flac_dir): print(filename)", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 859, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 860, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 861, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 54}}, "selectionRange": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__) + '/test_flacs/'", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 5, "character": 0}, "end": {"line": 23, "character": 21}}, "selectionRange": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 25, "character": 0}, "end": {"line": 27, "character": 31}}, "selectionRange": {"start": {"line": 25, "character": 4}, "end": {"line": 25, "character": 17}}, "detail": "def read_metadata", "children": []}, {"name": "filename", "kind": 13, "range": {"start": {"line": 29, "character": 0}, "end": {"line": 30, "character": 19}}, "selectionRange": {"start": {"line": 29, "character": 4}, "end": {"line": 29, "character": 12}}, "detail": "for filename in os.scandir(flac_dir): print(filename)", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 862, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement filename\n```\n---\n```python\nfor filename in os.scandir(directory): if filename.endswith(\".flac\" or \".jpg\" or \".png\"): set.add(filename) if filename.is_dir: dirs.add(filename) contains_directory = True\n```\n**Full name:** `fixer.get_songs.filename`"}, "range": {"start": {"line": 11, "character": 20}, "end": {"line": 11, "character": 28}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 863, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 864, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 4, "character": 54}}, "selectionRange": {"start": {"line": 4, "character": 0}, "end": {"line": 4, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__) + '/test_flacs/'", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 6, "character": 0}, "end": {"line": 24, "character": 21}}, "selectionRange": {"start": {"line": 6, "character": 4}, "end": {"line": 6, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 26, "character": 0}, "end": {"line": 28, "character": 31}}, "selectionRange": {"start": {"line": 26, "character": 4}, "end": {"line": 26, "character": 17}}, "detail": "def read_metadata", "children": []}, {"name": "filename", "kind": 13, "range": {"start": {"line": 30, "character": 0}, "end": {"line": 31, "character": 19}}, "selectionRange": {"start": {"line": 30, "character": 4}, "end": {"line": 30, "character": 12}}, "detail": "for filename in os.scandir(flac_dir): print(filename)", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 865, "result": {"isIncomplete": false, "items": [{"label": "pass", "kind": 14, "sortText": "z", "filterText": "pass", "insertText": "pass", "insertTextFormat": 1}, {"label": "PendingDeprecationWarning", "kind": 7, "sortText": "z", "filterText": "PendingDeprecationWarning", "insertText": "PendingDeprecationWarning($0)", "insertTextFormat": 2}, {"label": "PermissionError", "kind": 7, "sortText": "z", "filterText": "PermissionError", "insertText": "PermissionError($0)", "insertTextFormat": 2}, {"label": "pow", "kind": 3, "sortText": "z", "filterText": "pow", "insertText": "pow(${1:x}, ${2:y})$0", "insertTextFormat": 2}, {"label": "print", "kind": 3, "sortText": "z", "filterText": "print", "insertText": "print($0)", "insertTextFormat": 2}, {"label": "ProcessLookupError", "kind": 7, "sortText": "z", "filterText": "ProcessLookupError", "insertText": "ProcessLookupError($0)", "insertTextFormat": 2}, {"label": "property", "kind": 7, "sortText": "z", "filterText": "property", "insertText": "property($0)", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 866, "result": {"label": "print", "kind": 3, "detail": "def print", "documentation": {"kind": "markdown", "value": "```text\nprint(*values: object, sep: Optional[Text]=..., end: Optional[Text]=..., file: Optional[_Writer]=..., flush: bool=...) -> None\n\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.\n```"}, "sortText": "z", "filterText": "print", "insertText": "print($0)", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 867, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 668}, "edits": [{"range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 0}}, "newText": "def jls_extract_def():\n    \n    return \n\n\n"}, {"range": {"start": {"line": 3, "character": 5}, "end": {"line": 3, "character": 5}}, "newText": " = jls_extract_def()"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 868, "result": {"signatures": [{"label": "print(*values: object, sep: Optional[Text]=..., end: Optional[Text]=..., file: Optional[_Writer]=..., flush: bool=...) -> None", "documentation": {"kind": "markdown", "value": "```text\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.\n```"}, "parameters": [{"label": "*values: object"}, {"label": "sep: Optional[Text]=..."}, {"label": "end: Optional[Text]=..."}, {"label": "file: Optional[_Writer]=..."}, {"label": "flush: bool=..."}]}], "activeSignature": 0, "activeParameter": 0}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 869, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 870, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 4, "character": 54}}, "selectionRange": {"start": {"line": 4, "character": 0}, "end": {"line": 4, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__) + '/test_flacs/'", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 6, "character": 0}, "end": {"line": 24, "character": 21}}, "selectionRange": {"start": {"line": 6, "character": 4}, "end": {"line": 6, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 26, "character": 0}, "end": {"line": 28, "character": 31}}, "selectionRange": {"start": {"line": 26, "character": 4}, "end": {"line": 26, "character": 17}}, "detail": "def read_metadata", "children": []}, {"name": "filename", "kind": 13, "range": {"start": {"line": 30, "character": 0}, "end": {"line": 31, "character": 19}}, "selectionRange": {"start": {"line": 30, "character": 4}, "end": {"line": 30, "character": 12}}, "detail": "for filename in os.scandir(flac_dir): print(filename)", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 871, "result": {"isIncomplete": false, "items": [{"label": "bin/", "kind": 17, "sortText": "z", "filterText": "bin/", "insertText": "bin/", "insertTextFormat": 1}, {"label": "fixer.py", "kind": 17, "sortText": "z", "filterText": "fixer.py", "insertText": "fixer.py", "insertTextFormat": 1}, {"label": "include/", "kind": 17, "sortText": "z", "filterText": "include/", "insertText": "include/", "insertTextFormat": 1}, {"label": "lib/", "kind": 17, "sortText": "z", "filterText": "lib/", "insertText": "lib/", "insertTextFormat": 1}, {"label": "lib64/", "kind": 17, "sortText": "z", "filterText": "lib64/", "insertText": "lib64/", "insertTextFormat": 1}, {"label": "pyvenv.cfg", "kind": 17, "sortText": "z", "filterText": "pyvenv.cfg", "insertText": "pyvenv.cfg", "insertTextFormat": 1}, {"label": "share/", "kind": 17, "sortText": "z", "filterText": "share/", "insertText": "share/", "insertTextFormat": 1}, {"label": "test_flacs/", "kind": 17, "sortText": "z", "filterText": "test_flacs/", "insertText": "test_flacs/", "insertTextFormat": 1}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 872, "result": {"label": "bin/", "kind": 17, "detail": "path bin/", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "bin/", "insertText": "bin/", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 873, "result": {"signatures": [{"label": "print(*values: object, sep: Optional[Text]=..., end: Optional[Text]=..., file: Optional[_Writer]=..., flush: bool=...) -> None", "documentation": {"kind": "markdown", "value": "```text\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.\n```"}, "parameters": [{"label": "*values: object"}, {"label": "sep: Optional[Text]=..."}, {"label": "end: Optional[Text]=..."}, {"label": "file: Optional[_Writer]=..."}, {"label": "flush: bool=..."}]}], "activeSignature": 0, "activeParameter": 0}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 874, "result": [{"title": "Extract expression into variable 'jls_extract_var'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 670}, "edits": [{"range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 6}}, "newText": "jls_extract_var = "}, {"range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 8}}, "newText": "\nprint(jls_extract_var"}]}]}}, {"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 670}, "edits": [{"range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 6}}, "newText": "def jls_extract_def():\n    return "}, {"range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 8}}, "newText": "\n\n\nprint(jls_extract_def()"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 875, "result": {"signatures": [{"label": "print(*values: object, sep: Optional[Text]=..., end: Optional[Text]=..., file: Optional[_Writer]=..., flush: bool=...) -> None", "documentation": {"kind": "markdown", "value": "```text\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.\n```"}, "parameters": [{"label": "*values: object"}, {"label": "sep: Optional[Text]=..."}, {"label": "end: Optional[Text]=..."}, {"label": "file: Optional[_Writer]=..."}, {"label": "flush: bool=..."}]}], "activeSignature": 0, "activeParameter": 0}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 876, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 877, "result": {"isIncomplete": false, "items": [{"label": "bin/", "kind": 17, "sortText": "z", "filterText": "bin/", "insertText": "bin/", "insertTextFormat": 1}, {"label": "fixer.py", "kind": 17, "sortText": "z", "filterText": "fixer.py", "insertText": "fixer.py", "insertTextFormat": 1}, {"label": "include/", "kind": 17, "sortText": "z", "filterText": "include/", "insertText": "include/", "insertTextFormat": 1}, {"label": "lib/", "kind": 17, "sortText": "z", "filterText": "lib/", "insertText": "lib/", "insertTextFormat": 1}, {"label": "lib64/", "kind": 17, "sortText": "z", "filterText": "lib64/", "insertText": "lib64/", "insertTextFormat": 1}, {"label": "pyvenv.cfg", "kind": 17, "sortText": "z", "filterText": "pyvenv.cfg", "insertText": "pyvenv.cfg", "insertTextFormat": 1}, {"label": "share/", "kind": 17, "sortText": "z", "filterText": "share/", "insertText": "share/", "insertTextFormat": 1}, {"label": "test_flacs/", "kind": 17, "sortText": "z", "filterText": "test_flacs/", "insertText": "test_flacs/", "insertTextFormat": 1}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 878, "result": {"label": "bin/", "kind": 17, "detail": "path bin/", "documentation": {"kind": "markdown", "value": "```text\n\n```"}, "sortText": "z", "filterText": "bin/", "insertText": "bin/", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 879, "result": {"signatures": [{"label": "print(*values: object, sep: Optional[Text]=..., end: Optional[Text]=..., file: Optional[_Writer]=..., flush: bool=...) -> None", "documentation": {"kind": "markdown", "value": "```text\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.\n```"}, "parameters": [{"label": "*values: object"}, {"label": "sep: Optional[Text]=..."}, {"label": "end: Optional[Text]=..."}, {"label": "file: Optional[_Writer]=..."}, {"label": "flush: bool=..."}]}], "activeSignature": 0, "activeParameter": 0}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 880, "result": [{"title": "Extract expression into variable 'jls_extract_var'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 672}, "edits": [{"range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 6}}, "newText": "jls_extract_var = "}, {"range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 8}}, "newText": "\nprint(jls_extract_var"}]}]}}, {"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 672}, "edits": [{"range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 6}}, "newText": "def jls_extract_def():\n    return "}, {"range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 8}}, "newText": "\n\n\nprint(jls_extract_def()"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 881, "result": {"signatures": [{"label": "print(*values: object, sep: Optional[Text]=..., end: Optional[Text]=..., file: Optional[_Writer]=..., flush: bool=...) -> None", "documentation": {"kind": "markdown", "value": "```text\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.\n```"}, "parameters": [{"label": "*values: object"}, {"label": "sep: Optional[Text]=..."}, {"label": "end: Optional[Text]=..."}, {"label": "file: Optional[_Writer]=..."}, {"label": "flush: bool=..."}]}], "activeSignature": 0, "activeParameter": 0}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 882, "result": {"signatures": [{"label": "print(*values: object, sep: Optional[Text]=..., end: Optional[Text]=..., file: Optional[_Writer]=..., flush: bool=...) -> None", "documentation": {"kind": "markdown", "value": "```text\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.\n```"}, "parameters": [{"label": "*values: object"}, {"label": "sep: Optional[Text]=..."}, {"label": "end: Optional[Text]=..."}, {"label": "file: Optional[_Writer]=..."}, {"label": "flush: bool=..."}]}], "activeSignature": 0, "activeParameter": 0}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 883, "result": {"signatures": [{"label": "print(*values: object, sep: Optional[Text]=..., end: Optional[Text]=..., file: Optional[_Writer]=..., flush: bool=...) -> None", "documentation": {"kind": "markdown", "value": "```text\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.\n```"}, "parameters": [{"label": "*values: object"}, {"label": "sep: Optional[Text]=..."}, {"label": "end: Optional[Text]=..."}, {"label": "file: Optional[_Writer]=..."}, {"label": "flush: bool=..."}]}], "activeSignature": 0, "activeParameter": 0}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 884, "result": [{"title": "Extract expression into variable 'jls_extract_var'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 677}, "edits": [{"range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 6}}, "newText": "jls_extract_var = "}, {"range": {"start": {"line": 3, "character": 13}, "end": {"line": 3, "character": 13}}, "newText": "\nprint(jls_extract_var"}]}]}}, {"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 677}, "edits": [{"range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 6}}, "newText": "def jls_extract_def():\n    return "}, {"range": {"start": {"line": 3, "character": 13}, "end": {"line": 3, "character": 13}}, "newText": "\n\n\nprint(jls_extract_def()"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 885, "result": {"signatures": [{"label": "print(*values: object, sep: Optional[Text]=..., end: Optional[Text]=..., file: Optional[_Writer]=..., flush: bool=...) -> None", "documentation": {"kind": "markdown", "value": "```text\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.\n```"}, "parameters": [{"label": "*values: object"}, {"label": "sep: Optional[Text]=..."}, {"label": "end: Optional[Text]=..."}, {"label": "file: Optional[_Writer]=..."}, {"label": "flush: bool=..."}]}], "activeSignature": 0, "activeParameter": 0}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 886, "result": [{"title": "Extract expression into variable 'jls_extract_var'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 678}, "edits": [{"range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 6}}, "newText": "jls_extract_var = "}, {"range": {"start": {"line": 3, "character": 12}, "end": {"line": 3, "character": 12}}, "newText": "\nprint(jls_extract_var"}]}]}}, {"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 678}, "edits": [{"range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 6}}, "newText": "def jls_extract_def():\n    return "}, {"range": {"start": {"line": 3, "character": 12}, "end": {"line": 3, "character": 12}}, "newText": "\n\n\nprint(jls_extract_def()"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 887, "result": {"signatures": [{"label": "print(*values: object, sep: Optional[Text]=..., end: Optional[Text]=..., file: Optional[_Writer]=..., flush: bool=...) -> None", "documentation": {"kind": "markdown", "value": "```text\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.\n```"}, "parameters": [{"label": "*values: object"}, {"label": "sep: Optional[Text]=..."}, {"label": "end: Optional[Text]=..."}, {"label": "file: Optional[_Writer]=..."}, {"label": "flush: bool=..."}]}], "activeSignature": 0, "activeParameter": 0}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 888, "result": [{"title": "Extract expression into variable 'jls_extract_var'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 679}, "edits": [{"range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 6}}, "newText": "jls_extract_var = "}, {"range": {"start": {"line": 3, "character": 13}, "end": {"line": 3, "character": 13}}, "newText": "\nprint(jls_extract_var"}]}]}}, {"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 679}, "edits": [{"range": {"start": {"line": 3, "character": 0}, "end": {"line": 3, "character": 6}}, "newText": "def jls_extract_def():\n    return "}, {"range": {"start": {"line": 3, "character": 13}, "end": {"line": 3, "character": 13}}, "newText": "\n\n\nprint(jls_extract_def()"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 889, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 890, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 4, "character": 54}}, "selectionRange": {"start": {"line": 4, "character": 0}, "end": {"line": 4, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__) + '/test_flacs/'", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 6, "character": 0}, "end": {"line": 24, "character": 21}}, "selectionRange": {"start": {"line": 6, "character": 4}, "end": {"line": 6, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 26, "character": 0}, "end": {"line": 28, "character": 31}}, "selectionRange": {"start": {"line": 26, "character": 4}, "end": {"line": 26, "character": 17}}, "detail": "def read_metadata", "children": []}, {"name": "filename", "kind": 13, "range": {"start": {"line": 30, "character": 0}, "end": {"line": 31, "character": 19}}, "selectionRange": {"start": {"line": 30, "character": 4}, "end": {"line": 30, "character": 12}}, "detail": "for filename in os.scandir(flac_dir): print(filename)", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 891, "result": {"contents": {"kind": "markdown", "value": "```python\nparam flac_filename\n```"}, "range": {"start": {"line": 27, "character": 17}, "end": {"line": 27, "character": 30}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 892, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 893, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 894, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 895, "result": {"contents": {"kind": "markdown", "value": "```python\nparam albums\n```"}, "range": {"start": {"line": 18, "character": 4}, "end": {"line": 18, "character": 10}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 896, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement contains_directory\n```\n---\n```python\ncontains_directory = True\n```\n**Full name:** `fixer.get_songs.contains_directory`"}, "range": {"start": {"line": 23, "character": 11}, "end": {"line": 23, "character": 29}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 897, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 898, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 899, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement contains_directory\n```\n---\n```python\ncontains_directory = True\n```\n**Full name:** `fixer.get_songs.contains_directory`"}, "range": {"start": {"line": 16, "character": 12}, "end": {"line": 16, "character": 30}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 900, "result": [{"range": {"start": {"line": 9, "character": 4}, "end": {"line": 9, "character": 22}}}, {"range": {"start": {"line": 16, "character": 12}, "end": {"line": 16, "character": 30}}}, {"range": {"start": {"line": 23, "character": 11}, "end": {"line": 23, "character": 29}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 901, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 902, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 903, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 904, "result": {"contents": {"kind": "markdown", "value": "```python\nkeyword import\n```\n---\n```text\nThe \"import\" statement\n**********************\n\n   import_stmt     ::= \"import\" module [\"as\" identifier] (\",\" module [\"as\" identifier])*\n                   | \"from\" relative_module \"import\" identifier [\"as\" identifier]\n                   (\",\" identifier [\"as\" identifier])*\n                   | \"from\" relative_module \"import\" \"(\" identifier [\"as\" identifier]\n                   (\",\" identifier [\"as\" identifier])* [\",\"] \")\"\n                   | \"from\" relative_module \"import\" \"*\"\n   module          ::= (identifier \".\")* identifier\n   relative_module ::= \".\"* module | \".\"+\n\nThe basic import statement (no \"from\" clause) is executed in two\nsteps:\n\n1. find a module, loading and initializing it if necessary\n\n2. define a name or names in the local namespace for the scope where\n   the \"import\" statement occurs.\n\nWhen the statement contains multiple clauses (separated by commas) the\ntwo steps are carried out separately for each clause, just as though\nthe clauses had been separated out into individual import statements.\n\nThe details of the first step, finding and loading modules are\ndescribed in greater detail in the section on the import system, which\nalso describes the various types of packages and modules that can be\nimported, as well as all the hooks that can be used to customize the\nimport system. Note that failures in this step may indicate either\nthat the module could not be located, *or* that an error occurred\nwhile initializing the module, which includes execution of the\nmodule\u2019s code.\n\nIf the requested module is retrieved successfully, it will be made\navailable in the local namespace in one of three ways:\n\n* If the module name is followed by \"as\", then the name following \"as\"\n  is bound directly to the imported module.\n\n* If no other name is specified, and the module being imported is a\n  top level module, the module\u2019s name is bound in the local namespace\n  as a reference to the imported module\n\n* If the module being imported is *not* a top level module, then the\n  name of the top level package that contains the module is bound in\n  the local namespace as a reference to the top level package. The\n  imported module must be accessed using its full qualified name\n  rather than directly\n\nThe \"from\" form uses a slightly more complex process:\n\n1. find the module specified in the \"from\" clause, loading and\n   initializing it if necessary;\n\n2. for each of the identifiers specified in the \"import\" clauses:\n\n   1. check if the imported module has an attribute by that name\n\n   2. if not, attempt to import a submodule with that name and then\n      check the imported module again for that attribute\n\n   3. if the attribute is not found, \"ImportError\" is raised.\n\n   4. otherwise, a reference to that value is stored in the local\n      namespace, using the name in the \"as\" clause if it is present,\n      otherwise using the attribute name\n\nExamples:\n\n   import foo                 # foo imported and bound locally\n   import foo.bar.baz         # foo.bar.baz imported, foo bound locally\n   import foo.bar.baz as fbb  # foo.bar.baz imported and bound as fbb\n   from foo.bar import baz    # foo.bar.baz imported and bound as baz\n   from foo import attr       # foo imported and foo.attr bound as attr\n\nIf the list of identifiers is replaced by a star (\"'*'\"), all public\nnames defined in the module are bound in the local namespace for the\nscope where the \"import\" statement occurs.\n\nThe *public names* defined by a module are determined by checking the\nmodule\u2019s namespace for a variable named \"__all__\"; if defined, it must\nbe a sequence of strings which are names defined or imported by that\nmodule.  The names given in \"__all__\" are all considered public and\nare required to exist.  If \"__all__\" is not defined, the set of public\nnames includes all names found in the module\u2019s namespace which do not\nbegin with an underscore character (\"'_'\").  \"__all__\" should contain\nthe entire public API. It is intended to avoid accidentally exporting\nitems that are not part of the API (such as library modules which were\nimported and used within the module).\n\nThe wild card form of import \u2014 \"from module import *\" \u2014 is only\nallowed at the module level.  Attempting to use it in class or\nfunction definitions will raise a \"SyntaxError\".\n\nWhen specifying what module to import you do not have to specify the\nabsolute name of the module. When a module or package is contained\nwithin another package it is possible to make a relative import within\nthe same top package without having to mention the package name. By\nusing leading dots in the specified module or package after \"from\" you\ncan specify how high to traverse up the current package hierarchy\nwithout specifying exact names. One leading dot means the current\npackage where the module making the import exists. Two dots means up\none package level. Three dots is up two levels, etc. So if you execute\n\"from . import mod\" from a module in the \"pkg\" package then you will\nend up importing \"pkg.mod\". If you execute \"from ..subpkg2 import mod\"\nfrom within \"pkg.subpkg1\" you will import \"pkg.subpkg2.mod\". The\nspecification for relative imports is contained in the Package\nRelative Imports section.\n\n\"importlib.import_module()\" is provided to support applications that\ndetermine dynamically the modules to be loaded.\n\nRaises an auditing event \"import\" with arguments \"module\", \"filename\",\n\"sys.path\", \"sys.meta_path\", \"sys.path_hooks\".\n\n\nFuture statements\n=================\n\nA *future statement* is a directive to the compiler that a particular\nmodule should be compiled using syntax or semantics that will be\navailable in a specified future release of Python where the feature\nbecomes standard.\n\nThe future statement is intended to ease migration to future versions\nof Python that introduce incompatible changes to the language.  It\nallows use of the new features on a per-module basis before the\nrelease in which the feature becomes standard.\n\n   future_stmt ::= \"from\" \"__future__\" \"import\" feature [\"as\" identifier]\n                   (\",\" feature [\"as\" identifier])*\n                   | \"from\" \"__future__\" \"import\" \"(\" feature [\"as\" identifier]\n                   (\",\" feature [\"as\" identifier])* [\",\"] \")\"\n   feature     ::= identifier\n\nA future statement must appear near the top of the module.  The only\nlines that can appear before a future statement are:\n\n* the module docstring (if any),\n\n* comments,\n\n* blank lines, and\n\n* other future statements.\n\nThe only feature that requires using the future statement is\n\"annotations\" (see **PEP 563**).\n\nAll historical features enabled by the future statement are still\nrecognized by Python 3.  The list includes \"absolute_import\",\n\"division\", \"generators\", \"generator_stop\", \"unicode_literals\",\n\"print_function\", \"nested_scopes\" and \"with_statement\".  They are all\nredundant because they are always enabled, and only kept for backwards\ncompatibility.\n\nA future statement is recognized and treated specially at compile\ntime: Changes to the semantics of core constructs are often\nimplemented by generating different code.  It may even be the case\nthat a new feature introduces new incompatible syntax (such as a new\nreserved word), in which case the compiler may need to parse the\nmodule differently.  Such decisions cannot be pushed off until\nruntime.\n\nFor any given release, the compiler knows which feature names have\nbeen defined, and raises a compile-time error if a future statement\ncontains a feature not known to it.\n\nThe direct runtime semantics are the same as for any import statement:\nthere is a standard module \"__future__\", described later, and it will\nbe imported in the usual way at the time the future statement is\nexecuted.\n\nThe interesting runtime semantics depend on the specific feature\nenabled by the future statement.\n\nNote that there is nothing special about the statement:\n\n   import __future__ [as name]\n\nThat is not a future statement; it\u2019s an ordinary import statement with\nno special semantics or syntax restrictions.\n\nCode compiled by calls to the built-in functions \"exec()\" and\n\"compile()\" that occur in a module \"M\" containing a future statement\nwill, by default, use the new syntax or semantics associated with the\nfuture statement.  This can be controlled by optional arguments to\n\"compile()\" \u2014 see the documentation of that function for details.\n\nA future statement typed at an interactive interpreter prompt will\ntake effect for the rest of the interpreter session.  If an\ninterpreter is started with the \"-i\" option, is passed a script name\nto execute, and the script includes a future statement, it will be in\neffect in the interactive session started after the script is\nexecuted.\n\nSee also:\n\n  **PEP 236** - Back to the __future__\n     The original proposal for the __future__ mechanism.\n```"}, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 6}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 905, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 906, "result": {"contents": {"kind": "markdown", "value": "```python\nstatement filename\n```\n---\n```python\nfor filename in os.scandir(directory): if filename.endswith(\".flac\" or \".jpg\" or \".png\"): set.add(filename) if filename.is_dir: dirs.add(filename) contains_directory = True\n```\n**Full name:** `fixer.get_songs.filename`"}, "range": {"start": {"line": 14, "character": 11}, "end": {"line": 14, "character": 19}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 907, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 908, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 909, "result": [{"range": {"start": {"line": 0, "character": 5}, "end": {"line": 0, "character": 12}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 910, "result": [{"title": "Extract expression into variable 'jls_extract_var'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///home/neb/Dropbox/pie/Music_Organizer/fixer.py", "version": 679}, "edits": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 4}}, "newText": "jls_extract_var ="}, {"range": {"start": {"line": 0, "character": 12}, "end": {"line": 0, "character": 12}}, "newText": "\nfrom jls_extract_var"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 911, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 912, "result": [{"name": "FLAC", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 29}}, "selectionRange": {"start": {"line": 0, "character": 25}, "end": {"line": 0, "character": 29}}, "detail": "module FLAC", "children": []}, {"name": "os", "kind": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 9}}, "selectionRange": {"start": {"line": 1, "character": 7}, "end": {"line": 1, "character": 9}}, "detail": "module os", "children": []}, {"name": "flac_dir", "kind": 13, "range": {"start": {"line": 4, "character": 0}, "end": {"line": 4, "character": 54}}, "selectionRange": {"start": {"line": 4, "character": 0}, "end": {"line": 4, "character": 8}}, "detail": "flac_dir = os.path.realpath(__file__) + '/test_flacs/'", "children": []}, {"name": "get_songs", "kind": 12, "range": {"start": {"line": 6, "character": 0}, "end": {"line": 24, "character": 21}}, "selectionRange": {"start": {"line": 6, "character": 4}, "end": {"line": 6, "character": 13}}, "detail": "def get_songs", "children": []}, {"name": "read_metadata", "kind": 12, "range": {"start": {"line": 26, "character": 0}, "end": {"line": 28, "character": 31}}, "selectionRange": {"start": {"line": 26, "character": 4}, "end": {"line": 26, "character": 17}}, "detail": "def read_metadata", "children": []}, {"name": "filename", "kind": 13, "range": {"start": {"line": 30, "character": 0}, "end": {"line": 31, "character": 19}}, "selectionRange": {"start": {"line": 30, "character": 4}, "end": {"line": 30, "character": 12}}, "detail": "for filename in os.scandir(flac_dir): print(filename)", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 913, "result": null}
